Index: app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\nimport static com.example.eventiapp.util.Constants.EVENTS_VIEW_TYPE;\r\n\r\nimport android.content.Context;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentAllEventsBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\npublic class AllEventsFragment extends Fragment {\r\n\r\n    private static final String TAG = HomeFragment.class.getSimpleName();\r\n\r\n    private FragmentAllEventsBinding fragmentAllEventsBinding;\r\n\r\n    private List<Events> eventsList;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n\r\n    public AllEventsFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static String currentDate() {\r\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n        Date date = new Date();\r\n        return dateFormat.format(date);\r\n    }\r\n\r\n    public static AllEventsFragment newInstance() {\r\n        return new AllEventsFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentAllEventsBinding = FragmentAllEventsBinding.inflate(inflater, container, false);\r\n        return fragmentAllEventsBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        String country = \"IT\"; //POI VERRA PRESA DALLE SHAREDPREFERENCES\r\n        String location = \"45.51851,9.2075123\"; //BICOCCA\r\n        double radius = 4.2;\r\n        String sort = \"start\";\r\n        String date = currentDate();\r\n        int limit = 5000;\r\n\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_events);\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(),\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        String lastUpdate = \"0\";\r\n\r\n        fragmentAllEventsBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n\r\n        eventsAndPlacesViewModel.getEvents(country, radius + \"km@\" + location, date, sort, limit, Long.parseLong(lastUpdate)).observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result.isSuccess()) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n                EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                        eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());\r\n                        eventsAndPlacesViewModel.setFirstLoading(false);\r\n                        this.eventsList.addAll(fetchedEvents);\r\n                        eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                                this.eventsList.size());\r\n                    } else {\r\n                        // Updates related to the favorite status of the events\r\n                        eventsList.clear();\r\n                        eventsList.addAll(fetchedEvents);\r\n                        eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());\r\n                    }\r\n                    fragmentAllEventsBinding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                    int initialSize = eventsList.size();\r\n\r\n                    for (int i = 0; i < eventsList.size(); i++) {\r\n                        if (eventsList.get(i) == null) {\r\n                            eventsList.remove(eventsList.get(i));\r\n                        }\r\n                    }\r\n                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                            EVENTS_PAGE_SIZE_VALUE;\r\n                    for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                        eventsList.add(fetchedEvents.get(i));\r\n                    }\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n                }\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO ALL EVENTS\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(view, errorMessagesUtil.\r\n                                getErrorMessage(((Result.Error) result).getMessage()),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n                fragmentAllEventsBinding.progressBar.setVisibility(View.GONE);\r\n            }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getEventsResponseLiveData().getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<Result> eventsListMutableLiveData = eventsAndPlacesViewModel.getEventsResponseLiveData();\r\n\r\n                        if (eventsListMutableLiveData.getValue() != null &&\r\n                                eventsListMutableLiveData.getValue().isSuccess()) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            eventsList.add(null);\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(eventsList.size(),\r\n                                    eventsList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.fetchEvents(country, radius + \"km@\" + location, date, sort, limit);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentAllEventsBinding = null;\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java	(date 1683621264794)
@@ -1,12 +1,17 @@
 package com.example.eventiapp.ui.main;
 
 import static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;
-import static com.example.eventiapp.util.Constants.EVENTS_VIEW_TYPE;
+import static com.example.eventiapp.util.Constants.REQUEST_CODE;
 
+import android.Manifest;
+import android.content.ContentValues;
 import android.content.Context;
+import android.content.pm.PackageManager;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
+import android.net.Uri;
 import android.os.Bundle;
+import android.provider.CalendarContract;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -14,9 +19,13 @@
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.CompoundButton;
+import android.widget.LinearLayout;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.core.app.ActivityCompat;
+import androidx.core.content.ContextCompat;
 import androidx.core.view.MenuProvider;
 import androidx.fragment.app.Fragment;
 import androidx.lifecycle.MutableLiveData;
@@ -35,23 +44,35 @@
 import com.example.eventiapp.repository.events.IRepositoryWithLiveData;
 import com.example.eventiapp.util.ErrorMessageUtil;
 import com.example.eventiapp.util.ServiceLocator;
+import com.google.android.material.button.MaterialButton;
+import com.google.android.material.chip.Chip;
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.snackbar.Snackbar;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Date;
 import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.atomic.AtomicBoolean;
 
-public class AllEventsFragment extends Fragment {
+public class AllEventsFragment extends Fragment implements MyDialogFragment.MyDialogListener {
 
-    private static final String TAG = HomeFragment.class.getSimpleName();
+    private static final String TAG = AllEventsFragment.class.getSimpleName();
 
     private FragmentAllEventsBinding fragmentAllEventsBinding;
 
     private List<Events> eventsList;
+    private List<String> allCategories;
     private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;
     private EventsAndPlacesViewModel eventsAndPlacesViewModel;
+    private RecyclerView recyclerView;
+    private LinearLayoutManager layoutManager;
+    private String sortingParameter;
+    private int lastSelectedSortingParameter;
+
     //private SharedPreferencesUtil sharedPreferencesUtil;
 
     private int totalItemCount; // Total number of events
@@ -61,13 +82,23 @@
     // Based on this value, the process of loading more events is anticipated or postponed
     private final int threshold = 1;
 
+    //CAMPI QUERY
+    String country = "IT"; //POI VERRA PRESA DALLE SHAREDPREFERENCES
+    String location = "45.51851,9.2075123"; //BICOCCA
+    double radius = 4.2;
+    String sort = "start";
+    String date = currentDate();
+    int limit = 5000;
+    List<String> checkedCategories;
+    String firstDate, endDate;
+
 
     public AllEventsFragment() {
         // Required empty public constructor
     }
 
     public static String currentDate() {
-        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
+        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
         Date date = new Date();
         return dateFormat.format(date);
     }
@@ -94,7 +125,7 @@
                     R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();
         }
         eventsList = new ArrayList<>();
-
+        allCategories = new ArrayList<>();
     }
 
     @Override
@@ -108,12 +139,18 @@
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
 
-        String country = "IT"; //POI VERRA PRESA DALLE SHAREDPREFERENCES
-        String location = "45.51851,9.2075123"; //BICOCCA
-        double radius = 4.2;
-        String sort = "start";
-        String date = currentDate();
-        int limit = 5000;
+        //PERMESSI CALENDARIO
+        // Verifica se l'app ha i permessi di lettura del calendario
+        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
+            // Se non ha i permessi, li richiede all'utente
+            ActivityCompat.requestPermissions(requireActivity(), new String[]{Manifest.permission.READ_CALENDAR}, REQUEST_CODE);
+        }
+
+// Verifica se l'app ha i permessi di scrittura del calendario
+        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.WRITE_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
+            // Se non ha i permessi, li richiede all'utente
+            ActivityCompat.requestPermissions(requireActivity(), new String[]{Manifest.permission.WRITE_CALENDAR}, REQUEST_CODE);
+        }
 
         requireActivity().addMenuProvider(new MenuProvider() {
             @Override
@@ -127,8 +164,8 @@
             }
         });
 
-        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_events);
-        LinearLayoutManager layoutManager =
+        recyclerView = view.findViewById(R.id.recyclerview_events);
+        layoutManager =
                 new LinearLayoutManager(requireContext(),
                         LinearLayoutManager.VERTICAL, false);
 
@@ -143,6 +180,25 @@
                         Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_eventFragment, bundle);
                     }
 
+                    @Override
+                    public void onExportButtonPressed(Events events) {
+                        ContentValues event = new ContentValues();
+                        event.put(CalendarContract.Events.CALENDAR_ID, events.getId_db());
+                        event.put(CalendarContract.Events.TITLE, events.getTitle());
+                        event.put(CalendarContract.Events.EVENT_LOCATION, events.getPlaces().get(0).getAddress());
+                        event.put(CalendarContract.Events.DESCRIPTION, events.getDescription());
+                        if (events.getStart() != null) {
+                            event.put(CalendarContract.Events.DTSTART, events.getStart());
+                        }
+                        if (events.getEnd() != null) {
+                            event.put(CalendarContract.Events.DTEND, events.getEnd());
+                        }
+                        event.put(CalendarContract.Events.EVENT_TIMEZONE, events.getTimezone());
+
+                        // Inserisci l'evento nel calendario
+                        Uri uri = requireContext().getContentResolver().insert(CalendarContract.Events.CONTENT_URI, event);
+                    }
+
                     @Override
                     public void onFavoriteButtonPressed(int position) {
                         //SETTA EVENTO COME PREFERITO
@@ -155,58 +211,189 @@
 
         fragmentAllEventsBinding.progressBar.setVisibility(View.VISIBLE);
 
+        //eventsAndPlacesViewModel.deleteEvents(); //IN QUESTO MODO MI CARICA SEMPRE EVENTI NUOVI A PARTIRE DAL GIORNO CORRENTE
+
+        eventsAndPlacesViewModel.getAllCategories().observe(getViewLifecycleOwner(), result -> {
+            if (!result.isEmpty()) {
+                allCategories = result;
+            }
+        });
 
         eventsAndPlacesViewModel.getEvents(country, radius + "km@" + location, date, sort, limit, Long.parseLong(lastUpdate)).observe(getViewLifecycleOwner(), result -> {
+            showEvents(result, 0);
+        });
+
+        //FILTRI
+
+        fragmentAllEventsBinding.filtersButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                showDialog(allCategories);
+            }
+        });
+
+        fragmentAllEventsBinding.sortingButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                showSorting();
+            }
+        });
+
+    }
+
+
+    public void showDialog(List<String> allCategories) {
+        MyDialogFragment dialogFragment = new MyDialogFragment(allCategories);
+        Bundle bundle = new Bundle();
+        if (checkedCategories != null && !checkedCategories.isEmpty()) {
+            bundle.putStringArrayList("categories", (ArrayList<String>) checkedCategories);
+            dialogFragment.setArguments(bundle);
+        }
+        if (firstDate != null && endDate != null) {
+            bundle.putString("fromDate", firstDate);
+            bundle.putString("toDate", endDate);
+            dialogFragment.setArguments(bundle);
+        }
+        dialogFragment.show(getChildFragmentManager(), "MyDialogFragment");
+    }
+
+    public void showSorting() {
+        final String[] listItems = requireContext().getResources().getStringArray(R.array.sorting_parameters);
+        new MaterialAlertDialogBuilder(requireContext()).setTitle("ORDER BY")
+                .setSingleChoiceItems(listItems, lastSelectedSortingParameter, (dialog, i) -> {
+                    sortingParameter = listItems[i];
+                    lastSelectedSortingParameter = i;
+                    if (!eventsList.isEmpty()) {
+                        sortGames(sortingParameter, eventsList);
+                    }
+                }).setNegativeButton(R.string.cancel_text, (dialogInterface, i) -> {
+                }).show();
+    }
+
+    public void sortGames(String sortingParameter, List<Events> eventsList) {
+        switch (sortingParameter) {
+            case "Earliest date":
+            case "Più recente":
+                Collections.sort(eventsList, new Events.SortByMostRecent());
+                break;
+            case "Latest recent":
+            case "Meno recente":
+                Collections.sort(eventsList, new Events.SortByLeastRecent());
+                break;
+            case "Alphabet (A-Z)":
+            case "Alfabetico (A-Z)":
+                Collections.sort(eventsList, new Events.SortByAlphabetAZ());
+                break;
+            case "Alphabet (Z-A)":
+            case "Alfabetico (Z-A)":
+                Collections.sort(eventsList, new Events.SortByAlphabetZA());
+                break;
+
+        }
+    }
+
+    @Override
+    public void onFilterApply(List<String> categories, String fromDate, String toDate) {
+        Log.i(TAG, "FILTRI");
+        firstDate = fromDate;
+        endDate = toDate;
+        checkedCategories = categories;
+        if (categories.isEmpty() && Objects.equals(fromDate, "") && Objects.equals(toDate, "")) {
+            //NON FARE NIENTE
+        } else if (categories.isEmpty() && !Objects.equals(fromDate, "") && !Objects.equals(toDate, "")) {
+            eventsAndPlacesViewModel.getEventsBetweenDatesLiveData(fromDate, toDate).observe(getViewLifecycleOwner(), result -> {
+                showEvents(result, 1);
+            });
+        } else if (!categories.isEmpty() && !Objects.equals(fromDate, "") && !Objects.equals(toDate, "")) {
+            eventsAndPlacesViewModel.getCategoryEventsBetweenDatesLiveData(firstDate, endDate, categories).observe(getViewLifecycleOwner(), result -> {
+                showEvents(result, 2);
+            });
+        } else if (!categories.isEmpty() && Objects.equals(fromDate, "") && Objects.equals(toDate, "")) {
+            eventsAndPlacesViewModel.getCategoriesEventsLiveData(categories).observe(getViewLifecycleOwner(), result -> {
+                showEvents(result, 3);
+            });
+        }
+
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        eventsAndPlacesViewModel.setFirstLoading(true);
+        eventsAndPlacesViewModel.setLoading(false);
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        fragmentAllEventsBinding = null;
+    }
+
+
+    private boolean isConnected() {
+        ConnectivityManager cm =
+                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
 
-            if (result.isSuccess()) {
-                Log.i("SUCCESSO", "SUCCESSO");
+        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
+        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();
+    }
+
+    private void showEvents(Result result, int typeOfQuery) {
+        if (result.isSuccess()) {
+            Log.i("SUCCESSO", "SUCCESSO GET EVENTS");
 
-                EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();
-                List<Events> fetchedEvents = eventsResponse.getEventsList();
+            EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();
+            List<Events> fetchedEvents = eventsResponse.getEventsList();
 
-                if (!eventsAndPlacesViewModel.isLoading()) {
-                    if (eventsAndPlacesViewModel.isFirstLoading()) {
-                        eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());
-                        eventsAndPlacesViewModel.setFirstLoading(false);
-                        this.eventsList.addAll(fetchedEvents);
-                        eventsRecyclerViewAdapter.notifyItemRangeInserted(0,
-                                this.eventsList.size());
-                    } else {
-                        // Updates related to the favorite status of the events
-                        eventsList.clear();
-                        eventsList.addAll(fetchedEvents);
-                        eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());
-                    }
-                    fragmentAllEventsBinding.progressBar.setVisibility(View.GONE);
-                } else {
-                    eventsAndPlacesViewModel.setLoading(false);
-                    eventsAndPlacesViewModel.setCurrentResults(eventsList.size());
+            if (!eventsAndPlacesViewModel.isLoading()) {
+                if (eventsAndPlacesViewModel.isFirstLoading()) {
+                    Log.i(TAG, "FIRST LOADING");
+                    eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());
+                    eventsAndPlacesViewModel.setFirstLoading(false);
+                    this.eventsList.addAll(fetchedEvents);
+                    eventsRecyclerViewAdapter.notifyItemRangeInserted(0,
+                            this.eventsList.size());
+                } else {
+                    Log.i(TAG, "NOT FIRST LOADING");
+
+                    // Updates related to the favorite status of the events
+                    eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, eventsList.size());
+                    eventsList.clear();
+                    eventsList.addAll(fetchedEvents);
+                    eventsRecyclerViewAdapter.notifyItemRangeInserted(0, fetchedEvents.size());
+                }
+                fragmentAllEventsBinding.progressBar.setVisibility(View.GONE);
+            } else {
+                Log.i(TAG, "IS LOADING");
+                eventsAndPlacesViewModel.setLoading(false);
+                eventsAndPlacesViewModel.setCurrentResults(eventsList.size());
 
-                    int initialSize = eventsList.size();
+                int initialSize = eventsList.size();
 
-                    for (int i = 0; i < eventsList.size(); i++) {
-                        if (eventsList.get(i) == null) {
-                            eventsList.remove(eventsList.get(i));
-                        }
-                    }
-                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -
-                            EVENTS_PAGE_SIZE_VALUE;
-                    for (int i = startIndex; i < fetchedEvents.size(); i++) {
-                        eventsList.add(fetchedEvents.get(i));
-                    }
-                    eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());
-                }
-            } else {
-                Log.i("FALLITO", "FALLITO ALL EVENTS");
+                for (int i = 0; i < eventsList.size(); i++) {
+                    if (eventsList.get(i) == null) {
+                        eventsList.remove(eventsList.get(i));
+                    }
+                }
+                int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -
+                        EVENTS_PAGE_SIZE_VALUE;
+                for (int i = startIndex; i < fetchedEvents.size(); i++) {
+                    eventsList.add(fetchedEvents.get(i));
+                }
+                eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());
+            }
+            fragmentAllEventsBinding.numberOfEvents.setText(String.valueOf(eventsList.size()));
+
+        } else {
+            Log.i("FALLITO", "FALLITO ALL EVENTS");
 
-                ErrorMessageUtil errorMessagesUtil =
-                        new ErrorMessageUtil(requireActivity().getApplication());
-                Snackbar.make(view, errorMessagesUtil.
-                                getErrorMessage(((Result.Error) result).getMessage()),
-                        Snackbar.LENGTH_SHORT).show();
-                fragmentAllEventsBinding.progressBar.setVisibility(View.GONE);
-            }
-        });
+            ErrorMessageUtil errorMessagesUtil =
+                    new ErrorMessageUtil(requireActivity().getApplication());
+            Snackbar.make(requireView(), errorMessagesUtil.
+                            getErrorMessage(((Result.Error) result).getMessage()),
+                    Snackbar.LENGTH_SHORT).show();
+            fragmentAllEventsBinding.progressBar.setVisibility(View.GONE);
+        }
 
         recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
             @Override
@@ -228,7 +415,23 @@
                                     eventsAndPlacesViewModel.getEventsResponseLiveData().getValue() != null &&
                                     eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()
                     ) {
-                        MutableLiveData<Result> eventsListMutableLiveData = eventsAndPlacesViewModel.getEventsResponseLiveData();
+                        MutableLiveData<Result> eventsListMutableLiveData;
+                        switch (typeOfQuery) {
+                            case 0:
+                                eventsListMutableLiveData = eventsAndPlacesViewModel.getEventsResponseLiveData();
+                                break;
+                            case 1:
+                                eventsListMutableLiveData = eventsAndPlacesViewModel.getEventsBetweenDatesLiveData(firstDate, endDate);
+                                break;
+                            case 2:
+                                eventsListMutableLiveData = eventsAndPlacesViewModel.getCategoryEventsBetweenDatesLiveData(firstDate, endDate, checkedCategories);
+                                break;
+                            case 3:
+                                eventsListMutableLiveData = eventsAndPlacesViewModel.getCategoriesEventsLiveData(checkedCategories);
+                                break;
+                            default:
+                                eventsListMutableLiveData = eventsAndPlacesViewModel.getEventsResponseLiveData();
+                        }
 
                         if (eventsListMutableLiveData.getValue() != null &&
                                 eventsListMutableLiveData.getValue().isSuccess()) {
@@ -240,36 +443,26 @@
 
                             int page = eventsAndPlacesViewModel.getPage() + 1;
                             eventsAndPlacesViewModel.setPage(page);
-                            eventsAndPlacesViewModel.fetchEvents(country, radius + "km@" + location, date, sort, limit);
-                        }
-                    }
-                }
-            }
-        });
-
-
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        eventsAndPlacesViewModel.setFirstLoading(true);
-        eventsAndPlacesViewModel.setLoading(false);
+                            switch (typeOfQuery) {
+                                case 0:
+                                    eventsAndPlacesViewModel.fetchEvents(country, radius + "km@" + location, date, sort, limit);
+                                    break;
+                                case 1:
+                                    eventsAndPlacesViewModel.getEventsBetweenDatesLiveData(firstDate, endDate);
+                                    break;
+                                case 2:
+                                    eventsAndPlacesViewModel.getCategoryEventsBetweenDatesLiveData(firstDate, endDate, checkedCategories);
+                                    break;
+                                case 3:
+                                    eventsAndPlacesViewModel.getCategoriesEventsLiveData(checkedCategories);
+                                    break;
+                            }
+                        }
+                    }
+                }
+            }
+        });
     }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        fragmentAllEventsBinding = null;
-    }
 
-
-    private boolean isConnected() {
-        ConnectivityManager cm =
-                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
-
-        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
-        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();
-    }
 
 }
Index: app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.repository.events;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.util.Log;\r\n\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.source.events.BaseEventsLocalDataSource;\r\nimport com.example.eventiapp.source.events.BaseEventsRemoteDataSource;\r\nimport com.example.eventiapp.source.events.EventsCallback;\r\nimport com.example.eventiapp.source.google.PlaceDetailsSource;\r\nimport com.example.eventiapp.source.places.BasePlacesLocalDataSource;\r\nimport com.example.eventiapp.source.places.PlaceCallback;\r\nimport com.example.eventiapp.util.Constants;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\npublic class RepositoryWithLiveData implements IRepositoryWithLiveData, EventsCallback, PlaceCallback {\r\n\r\n    private static final String TAG = RepositoryWithLiveData.class.getSimpleName();\r\n\r\n    private final MutableLiveData<Result> allEventsMutableLiveData;\r\n    private final MutableLiveData<Result> favoriteEventsMutableLiveData;\r\n    private final MutableLiveData<Result> categoryEventsMutableLiveData;\r\n    private final MutableLiveData<Result> placeEventsMutableLiveData;\r\n    private final MutableLiveData<Result> singleEventMutableLiveData;\r\n    private final MutableLiveData<List<String>> eventsDateMutableLiveData;\r\n    private final MutableLiveData<String[]> moviesHoursMutableLiveData;\r\n\r\n    //PLACES\r\n    private final MutableLiveData<List<Place>> allPlacesMutableLiveData;\r\n    private final MutableLiveData<List<Place>> favoritePlacesMutableLiveData;\r\n    private final MutableLiveData<Place> singlePlaceMutableLiveData;\r\n\r\n    private final BaseEventsRemoteDataSource eventsRemoteDataSource;\r\n    private final BaseEventsLocalDataSource eventsLocalDataSource;\r\n    private final BasePlacesLocalDataSource placesLocalDataSource;\r\n    private final PlaceDetailsSource placeDetailsSource;\r\n    private List<String> dates;\r\n    private int count;\r\n\r\n\r\n    public RepositoryWithLiveData(BaseEventsRemoteDataSource eventsRemoteDataSource, BaseEventsLocalDataSource eventsLocalDataSource,\r\n                                  BasePlacesLocalDataSource placesLocalDataSource, PlaceDetailsSource placeDetailsSource) {\r\n        allEventsMutableLiveData = new MutableLiveData<>();\r\n        favoriteEventsMutableLiveData = new MutableLiveData<>();\r\n        categoryEventsMutableLiveData = new MutableLiveData<>();\r\n        singleEventMutableLiveData = new MutableLiveData<>();\r\n        placeEventsMutableLiveData = new MutableLiveData<>();\r\n        eventsDateMutableLiveData = new MutableLiveData<>();\r\n        moviesHoursMutableLiveData = new MutableLiveData<>();\r\n        allPlacesMutableLiveData = new MutableLiveData<>();\r\n        favoritePlacesMutableLiveData = new MutableLiveData<>();\r\n        singlePlaceMutableLiveData = new MutableLiveData();\r\n        this.eventsRemoteDataSource = eventsRemoteDataSource;\r\n        this.eventsRemoteDataSource.setEventsCallback(this);\r\n        this.eventsLocalDataSource = eventsLocalDataSource;\r\n        this.eventsLocalDataSource.setEventsCallback(this);\r\n        this.placesLocalDataSource = placesLocalDataSource;\r\n        this.placesLocalDataSource.setPlacesCallback((PlaceCallback) this);\r\n        this.placeDetailsSource = placeDetailsSource;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> fetchEvents(String country, String location, String date, String sort, int limit, long lastUpdate) {\r\n        long currentTime = System.currentTimeMillis();\r\n\r\n        if (currentTime - lastUpdate > Constants.FRESH_TIMEOUT) {\r\n            eventsRemoteDataSource.getEvents(country, location, date, sort, limit);\r\n        } else {\r\n            eventsLocalDataSource.getEvents();\r\n        }\r\n        return allEventsMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public void fetchEvents(String country, String location, String date, String sort, int limit) {\r\n        eventsRemoteDataSource.getEvents(country, location, date, sort, limit);\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getFavoriteEvents(boolean isFirstLoading) {\r\n        if (isFirstLoading) {\r\n            //PRENDE I BACKUP\r\n        } else {\r\n            eventsLocalDataSource.getFavoriteEvents();\r\n        }\r\n        return favoriteEventsMutableLiveData;\r\n    }\r\n\r\n\r\n    public MutableLiveData<Result> getCategoryEvents(String category) {\r\n        eventsLocalDataSource.getCategoryEvents(category);\r\n        return categoryEventsMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getPlaceEvents(String id) {\r\n        eventsLocalDataSource.getPlaceEvent(id);\r\n        return placeEventsMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getSingleEvent(long id) {\r\n        eventsLocalDataSource.getSingleEvent(id);\r\n        return singleEventMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<String>> getEventsDates(String name) {\r\n        eventsLocalDataSource.getEventsDates(name);\r\n        return eventsDateMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<String[]> getMoviesHours(String name) {\r\n        eventsLocalDataSource.getMoviesHours(name);\r\n        return moviesHoursMutableLiveData;\r\n    }\r\n\r\n    //PLACES --------------------------\r\n\r\n    @Override\r\n    public MutableLiveData<List<Place>> fetchPlaces() {\r\n        placesLocalDataSource.getPlaces();\r\n        return allPlacesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<Place>> getFavoritePlaces(boolean isFirstLoading) {\r\n        if (isFirstLoading) {\r\n            //PRENDE I BACKUP\r\n        } else {\r\n            placesLocalDataSource.getFavoritePlaces();\r\n        }\r\n        return favoritePlacesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Place> getSinglePlace(String id) {\r\n        placesLocalDataSource.getSinglePlace(id);\r\n        return singlePlaceMutableLiveData;\r\n    }\r\n\r\n    //----------------------------\r\n\r\n    @Override\r\n    public void updateEvents(Events events) {\r\n        eventsLocalDataSource.updateEvents(events);\r\n        if (events.isFavorite()) {\r\n            //AGGIUNGI EVENTO COME PREFERITO\r\n        } else {\r\n            //ELIMINA EVENTO COME PREFERITO\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getCount() {\r\n        eventsLocalDataSource.getCount();\r\n        return this.count;\r\n    }\r\n\r\n    public void deleteEvents() {\r\n        eventsLocalDataSource.deleteAll();\r\n    }\r\n\r\n    @Override\r\n    public void deleteFavoriteEvents() {\r\n        eventsLocalDataSource.deleteFavoriteEvents();\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromRemote(EventsApiResponse eventsApiResponse, long lastUpdate) {\r\n        //Result.EventsResponseSuccess result = new Result.EventsResponseSuccess(eventsApiResponse);\r\n        //allEventsMutableLiveData.postValue(result);\r\n        eventsLocalDataSource.insertEvents(eventsApiResponse);\r\n\r\n        //PLACES\r\n        List<Events> fetchedEvents = eventsApiResponse.getEventsList();\r\n\r\n\r\n        //RIMUOVE EVENTI PRESENTI NELLO STESSO LUOGO COSI DA AVERE EVENTI CHE SI TENGONO IN POSTI DIVERSI PER POTER SALVARE QUEST ULTIMI\r\n        Map<String, Events> map = new HashMap<String, Events>();\r\n        for (Events e : fetchedEvents) {\r\n            if (!e.getPlaces().isEmpty() && !e.getCategory().equals(\"severe-weather\") && !e.getCategory().equals(\"airport-delays\")) {\r\n                String idPlace = e.getPlaces().get(0).getId();\r\n                if (!map.containsKey(idPlace)) {\r\n                    map.put(idPlace, e);\r\n                }\r\n                if (e.getCoordinates()[0] < e.getCoordinates()[1]) {\r\n                    double temp = e.getCoordinates()[0];\r\n                    e.getCoordinates()[0] = e.getCoordinates()[1];\r\n                    e.getCoordinates()[1] = temp;\r\n                }\r\n            }\r\n        }\r\n        List<Events> eventsNoDuplicates = new ArrayList<>(map.values());\r\n        for (Events e : eventsNoDuplicates) {\r\n            //if(!e.getPlaces().get(0).getId().equals(\"ChIJUQcYMFvHhkcR2bA0VH8rzJw\") && !e.getPlaces().get(0).getId().equals(\"ChIJX19ryKPGhkcR5i34n6bQsyI\")) {\r\n            //DEVO PRENDERE COORDINATE, INDIRIZZO, FOTO E NUMERO DI TELEFONO DEL POSTO  PIU PRECISI\r\n            placeDetailsSource.fetchPlaceDetails(e.getPlaces().get(0).getName(), e.getPlaces().get(0).getAddress(), new PlaceDetailsSource.PlaceDetailsListener() {\r\n                @Override\r\n                public void onPlaceDetailsFetched(com.google.android.libraries.places.api.model.Place place) {\r\n                    // Hai ottenuto i dettagli del posto\r\n                    double[] coordinates;\r\n                    if (place.getLatLng() != null) {\r\n                        coordinates = new double[]{place.getLatLng().latitude, place.getLatLng().longitude};\r\n                    } else {\r\n                        coordinates = new double[]{e.getCoordinates()[0], e.getCoordinates()[1]};\r\n                    }\r\n                    List<Place> placesList = new ArrayList<>();\r\n                    placesList.add(new Place(e.getPlaces().get(0).getId(), place.getName(), e.getPlaces().get(0).getType(), place.getAddress(), place.getId(), coordinates, place.getPhoneNumber(), place.getPhotoMetadatas()));\r\n                    placesLocalDataSource.insertPlaces(placesList);\r\n                }\r\n\r\n                @Override\r\n                public void onError(String message) {\r\n                    Log.i(\"ERRORE FETCH PLACE:\", message);\r\n                    //PER I POSTI NON TROVATI USO IL COSTUTTORE DI DEFAULT CON LE INFORMAZIONI BASE\r\n                    //placesList.add(new Place(e.getPlaces().get(0).getId(), e.getPlaces().get(0).getName(), e.getPlaces().get(0).getType(), e.getPlaces().get(0).getAddress(), e.getCoordinates()));\r\n                }\r\n            });\r\n            //}\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onFailureFromRemote(Exception exception) {\r\n        Result.Error result = new Result.Error(exception.getMessage());\r\n        allEventsMutableLiveData.postValue(result);\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromLocal(EventsApiResponse eventsApiResponse) {\r\n        if (allEventsMutableLiveData.getValue() != null && allEventsMutableLiveData.getValue().isSuccess()) {\r\n            List<Events> eventsList = ((Result.EventsResponseSuccess) allEventsMutableLiveData.getValue()).getData().getEventsList();\r\n            eventsList.addAll(eventsApiResponse.getEventsList());\r\n            eventsApiResponse.setEventsList(eventsList);\r\n            Result.EventsResponseSuccess result = new Result.EventsResponseSuccess(eventsApiResponse);\r\n            allEventsMutableLiveData.postValue(result);\r\n        } else {\r\n            Result.EventsResponseSuccess result = new Result.EventsResponseSuccess(eventsApiResponse);\r\n            allEventsMutableLiveData.postValue(result);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onFailureFromLocal(Exception exception) {\r\n        Result.Error resultError = new Result.Error(exception.getMessage());\r\n        allEventsMutableLiveData.postValue(resultError);\r\n        favoriteEventsMutableLiveData.postValue(resultError);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onEventsCategory(List<Events> events) {\r\n        categoryEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onEventsPlace(List<Events> events) {\r\n        placeEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onSingleEvent(Events event) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onEventsDates(List<String> dates) {\r\n        if (dates.size() > 1) {\r\n            eventsDateMutableLiveData.postValue(dates);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onMoviesHours(String[] hours) {\r\n        if (hours.length > 1) {\r\n            moviesHoursMutableLiveData.postValue(hours);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onEventsFavoriteStatusChanged(Events events, List<Events> favoriteEvents) {\r\n        Result allEventsResult = allEventsMutableLiveData.getValue();\r\n\r\n        if (allEventsResult != null && allEventsResult.isSuccess()) {\r\n            List<Events> oldAllEvents = ((Result.EventsResponseSuccess) allEventsResult).getData().getEventsList();\r\n            if (oldAllEvents.contains(events)) {\r\n                oldAllEvents.set(oldAllEvents.indexOf(events), events);\r\n                allEventsMutableLiveData.postValue(allEventsResult);\r\n            }\r\n        }\r\n        favoriteEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(favoriteEvents)));\r\n    }\r\n\r\n    @Override\r\n    public void onEventsFavoriteStatusChanged(List<Events> events) {\r\n        List<Events> notSynchronizedEventsList = new ArrayList<>();\r\n\r\n        for (Events event : events) {\r\n            if (!event.isSynchronized()) {\r\n                notSynchronizedEventsList.add(event);\r\n            }\r\n        }\r\n\r\n        if (!notSynchronizedEventsList.isEmpty()) {\r\n            //BACKUP\r\n        }\r\n\r\n        favoriteEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteFavoriteEventsSuccess(List<Events> favoriteEvents) {\r\n        Result allEventsResult = allEventsMutableLiveData.getValue();\r\n\r\n        if (allEventsResult != null && allEventsResult.isSuccess()) {\r\n            List<Events> oldAllEvents = ((Result.EventsResponseSuccess) allEventsResult).getData().getEventsList();\r\n            for (Events event : favoriteEvents) {\r\n                if (oldAllEvents.contains(event)) {\r\n                    oldAllEvents.set(oldAllEvents.indexOf(event), event);\r\n                }\r\n            }\r\n            allEventsMutableLiveData.postValue(allEventsResult);\r\n        }\r\n\r\n        if (favoriteEventsMutableLiveData.getValue() != null &&\r\n                favoriteEventsMutableLiveData.getValue().isSuccess()) {\r\n            favoriteEvents.clear();\r\n            Result.EventsResponseSuccess result = new Result.EventsResponseSuccess(new EventsResponse(favoriteEvents));\r\n            favoriteEventsMutableLiveData.postValue(result);\r\n        }\r\n\r\n        //backupDataSource.deleteAllFavoriteNews();\r\n    }\r\n\r\n    @Override\r\n    public void onCount(int count) {\r\n        this.count = count;\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromCloudReading(List<Events> eventsList) {\r\n        if (eventsList != null) {\r\n            for (Events events : eventsList) {\r\n                events.setSynchronized(true);\r\n            }\r\n            eventsLocalDataSource.insertEvents(eventsList);\r\n            favoriteEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(eventsList)));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromCloudWriting(Events events) {\r\n        if (events != null && !events.isFavorite()) {\r\n            events.setSynchronized(false);\r\n        }\r\n        eventsLocalDataSource.updateEvents(events);\r\n        //backupDataSource.getFavoriteNews();\r\n    }\r\n\r\n    @Override\r\n    public void onFailureFromCloud(Exception exception) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessSynchronization() {\r\n        Log.d(TAG, \"Events synchronized from remote\");\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessDeletion() {\r\n\r\n    }\r\n\r\n\r\n    //PLACECALLBACK -------------------------------------------\r\n\r\n    public void onSuccessFromLocalP(List<Place> placeList) {\r\n        if (allPlacesMutableLiveData.getValue() != null) {\r\n            List<Place> placeListOld = allPlacesMutableLiveData.getValue();\r\n            placeListOld.addAll(placeList);\r\n            allPlacesMutableLiveData.postValue(placeListOld);\r\n        } else {\r\n            allPlacesMutableLiveData.postValue(placeList);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onFailureFromLocalP(Exception exception) {\r\n        exception.getMessage();\r\n    }\r\n\r\n    @Override\r\n    public void onSingleEvent(Place place) {\r\n        singlePlaceMutableLiveData.postValue(place);\r\n    }\r\n\r\n    @Override\r\n    public void onPlacesFavoriteStatusChanged(Place place, List<Place> favoritePlaces) {\r\n        List<Place> allPlaces = allPlacesMutableLiveData.getValue();\r\n        if (allPlaces != null) {\r\n            List<Place> oldAllPlaces = allPlaces;\r\n            if (oldAllPlaces.contains(place)) {\r\n                oldAllPlaces.set(oldAllPlaces.indexOf(place), place);\r\n                allPlacesMutableLiveData.postValue(allPlaces);\r\n            }\r\n        }\r\n        favoritePlacesMutableLiveData.postValue(favoritePlaces);\r\n    }\r\n\r\n    @Override\r\n    public void onPlacesFavoriteStatusChanged(List<Place> placeList) {\r\n        List<Place> notSynchronizedPlacesList = new ArrayList<>();\r\n\r\n        for (Place p : placeList) {\r\n            if (!p.isSynchronized()) {\r\n                notSynchronizedPlacesList.add(p);\r\n            }\r\n        }\r\n\r\n        if (!notSynchronizedPlacesList.isEmpty()) {\r\n            //BACKUP\r\n        }\r\n\r\n        favoritePlacesMutableLiveData.postValue(placeList);\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteFavoritePlacesSuccess(List<Place> favoritePlaces) {\r\n        List<Place> allPlaces = allPlacesMutableLiveData.getValue();\r\n\r\n        if (allPlaces != null) {\r\n            List<Place> oldAllPlaces = allPlaces;\r\n            for (Place p : favoritePlaces) {\r\n                if (oldAllPlaces.contains(p)) {\r\n                    oldAllPlaces.set(oldAllPlaces.indexOf(p), p);\r\n                }\r\n            }\r\n            allPlacesMutableLiveData.postValue(allPlaces);\r\n        }\r\n\r\n        if (favoritePlacesMutableLiveData.getValue() != null) {\r\n            favoritePlaces.clear();\r\n            favoritePlacesMutableLiveData.postValue(favoritePlaces);\r\n        }\r\n\r\n        //backupDataSource.deleteAllFavoriteNews();\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessSynchronizationP() {\r\n        Log.d(TAG, \"Places synchronized from remote\");\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessDeletionP() {\r\n\r\n    }\r\n\r\n    //-----------------------------------------------------------------\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java b/app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java
--- a/app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java	(date 1683622660878)
@@ -33,10 +33,15 @@
     private final MutableLiveData<Result> allEventsMutableLiveData;
     private final MutableLiveData<Result> favoriteEventsMutableLiveData;
     private final MutableLiveData<Result> categoryEventsMutableLiveData;
+    private final MutableLiveData<Result> eventsInADateMutableLiveData;
+    private final MutableLiveData<Result> categoriesEventsMutableLiveData;
+    private final MutableLiveData<Result> eventsBetweenDatesMutableLiveData;
+    private final MutableLiveData<Result> categoryEventsBetweenDatesMutableLiveData;
     private final MutableLiveData<Result> placeEventsMutableLiveData;
     private final MutableLiveData<Result> singleEventMutableLiveData;
     private final MutableLiveData<List<String>> eventsDateMutableLiveData;
     private final MutableLiveData<String[]> moviesHoursMutableLiveData;
+    private final MutableLiveData<List<String>> allCategoriesMutableLiveData;
 
     //PLACES
     private final MutableLiveData<List<Place>> allPlacesMutableLiveData;
@@ -56,6 +61,10 @@
         allEventsMutableLiveData = new MutableLiveData<>();
         favoriteEventsMutableLiveData = new MutableLiveData<>();
         categoryEventsMutableLiveData = new MutableLiveData<>();
+        eventsInADateMutableLiveData = new MutableLiveData<>();
+        eventsBetweenDatesMutableLiveData = new MutableLiveData<>();
+        categoriesEventsMutableLiveData = new MutableLiveData<>();
+        categoryEventsBetweenDatesMutableLiveData = new MutableLiveData<>();
         singleEventMutableLiveData = new MutableLiveData<>();
         placeEventsMutableLiveData = new MutableLiveData<>();
         eventsDateMutableLiveData = new MutableLiveData<>();
@@ -63,6 +72,7 @@
         allPlacesMutableLiveData = new MutableLiveData<>();
         favoritePlacesMutableLiveData = new MutableLiveData<>();
         singlePlaceMutableLiveData = new MutableLiveData();
+        allCategoriesMutableLiveData = new MutableLiveData<>();
         this.eventsRemoteDataSource = eventsRemoteDataSource;
         this.eventsRemoteDataSource.setEventsCallback(this);
         this.eventsLocalDataSource = eventsLocalDataSource;
@@ -74,19 +84,21 @@
 
     @Override
     public MutableLiveData<Result> fetchEvents(String country, String location, String date, String sort, int limit, long lastUpdate) {
+        /* PRENDERE DATI DAL DB SENZA PAGARE OGNI VOLTA GOOGLE API PLACES
         long currentTime = System.currentTimeMillis();
-
         if (currentTime - lastUpdate > Constants.FRESH_TIMEOUT) {
             eventsRemoteDataSource.getEvents(country, location, date, sort, limit);
         } else {
             eventsLocalDataSource.getEvents();
         }
+        */
+        eventsLocalDataSource.getEvents();
         return allEventsMutableLiveData;
     }
 
     @Override
     public void fetchEvents(String country, String location, String date, String sort, int limit) {
-        eventsRemoteDataSource.getEvents(country, location, date, sort, limit);
+        // eventsRemoteDataSource.getEvents(country, location, date, sort, limit);
     }
 
     @Override
@@ -117,6 +129,36 @@
         return singleEventMutableLiveData;
     }
 
+    @Override
+    public MutableLiveData<Result> getEventsInADate(String date) {
+        eventsLocalDataSource.getEventsInADate(date);
+        return eventsInADateMutableLiveData;
+    }
+
+    @Override
+    public MutableLiveData<List<String>> getAllCategories() {
+        eventsLocalDataSource.getAllCategories();
+        return allCategoriesMutableLiveData;
+    }
+
+    @Override
+    public MutableLiveData<Result> getCategoriesEvents(List<String> categories) {
+        eventsLocalDataSource.getCategoriesEvents(categories);
+        return categoriesEventsMutableLiveData;
+    }
+
+    @Override
+    public MutableLiveData<Result> getEventsBetweenDates(String firstDate, String endDate) {
+        eventsLocalDataSource.getEventsBetweenDates(firstDate, endDate);
+        return eventsBetweenDatesMutableLiveData;
+    }
+
+    @Override
+    public MutableLiveData<Result> getCategoryEventsBetweenDates(String firstDate, String endDate, List<String> categories) {
+        eventsLocalDataSource.getCategoryEventsBetweenDates(firstDate, endDate, categories);
+        return categoryEventsBetweenDatesMutableLiveData;
+    }
+
     @Override
     public MutableLiveData<List<String>> getEventsDates(String name) {
         eventsLocalDataSource.getEventsDates(name);
@@ -152,6 +194,12 @@
         placesLocalDataSource.getSinglePlace(id);
         return singlePlaceMutableLiveData;
     }
+
+    @Override
+    public MutableLiveData<Place> getSinglePlaceByName(String name) {
+        placesLocalDataSource.getSinglePlaceByName(name);
+        return singlePlaceMutableLiveData;
+    }
 
     //----------------------------
 
@@ -280,6 +328,11 @@
 
     }
 
+    @Override
+    public void onEventsInADate(List<Events> events) {
+        eventsInADateMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));
+    }
+
     @Override
     public void onEventsDates(List<String> dates) {
         if (dates.size() > 1) {
@@ -354,6 +407,26 @@
         this.count = count;
     }
 
+    @Override
+    public void onAllCategories(List<String> categories) {
+        allCategoriesMutableLiveData.postValue(categories);
+    }
+
+    @Override
+    public void onCategoriesEvents(List<Events> events) {
+        categoriesEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));
+    }
+
+    @Override
+    public void onEventsBetweenDates(List<Events> events) {
+        eventsBetweenDatesMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));
+    }
+
+    @Override
+    public void onCategoryEventsBetweenDates(List<Events> events) {
+        categoryEventsBetweenDatesMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));
+    }
+
     @Override
     public void onSuccessFromCloudReading(List<Events> eventsList) {
         if (eventsList != null) {
@@ -386,7 +459,7 @@
 
     @Override
     public void onSuccessDeletion() {
-
+        Log.d(TAG, "Events delete from DB");
     }
 
 
@@ -408,10 +481,11 @@
     }
 
     @Override
-    public void onSingleEvent(Place place) {
+    public void onSinglePlace(Place place) {
         singlePlaceMutableLiveData.postValue(place);
     }
 
+
     @Override
     public void onPlacesFavoriteStatusChanged(Place place, List<Place> favoritePlaces) {
         List<Place> allPlaces = allPlacesMutableLiveData.getValue();
Index: app/src/main/res/images/diversity_3_FILL0_wght400_GRAD0_opsz48.svg
===================================================================
diff --git a/app/src/main/res/images/diversity_3_FILL0_wght400_GRAD0_opsz48.svg b/app/src/main/res/images/diversity_3_FILL0_wght400_GRAD0_opsz48.svg
deleted file mode 100644
--- a/app/src/main/res/images/diversity_3_FILL0_wght400_GRAD0_opsz48.svg	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ /dev/null	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
@@ -1,1 +0,0 @@
-<svg xmlns="http://www.w3.org/2000/svg" height="48" viewBox="0 96 960 960" width="48"><path d="M40 896V736q0-29 20.5-49.5T110 666h141q17 0 32.5 8.5T310 698q29 42 74 65t96 23q51 0 96-23t75-65q11-15 26-23.5t32-8.5h141q29 0 49.5 20.5T920 736v160H660V777q-36 33-82.5 51T480 846q-51 0-97-18t-83-51v119H40Zm440-170q-35 0-67.5-16.5T360 664q-16-23-38.5-37T273 608q29-30 91-46t116-16q54 0 116.5 16t91.5 46q-26 5-48.5 19T601 664q-20 29-52.5 45.5T480 726ZM160 596q-45 0-77.5-32.5T50 486q0-46 32.5-78t77.5-32q46 0 78 32t32 78q0 45-32 77.5T160 596Zm640 0q-45 0-77.5-32.5T690 486q0-46 32.5-78t77.5-32q46 0 78 32t32 78q0 45-32 77.5T800 596ZM480 476q-45 0-77.5-32.5T370 366q0-46 32.5-78t77.5-32q46 0 78 32t32 78q0 45-32 77.5T480 476Z"/></svg>
\ No newline at end of file
Index: app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.view.WindowManager;\r\n\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.fragment.NavHostFragment;\r\nimport androidx.navigation.ui.NavigationUI;\r\nimport androidx.viewpager2.widget.ViewPager2;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.MyViewPagerAdapter;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.Objects;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.fragmentContainerView);\r\n        assert navHostFragment != null;\r\n        NavController navController = navHostFragment.getNavController();\r\n        BottomNavigationView bottomNavigationView=findViewById(R.id.bottomNavigationView);\r\n        NavigationUI.setupWithNavController(bottomNavigationView,navController);\r\n\r\n        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java b/app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java	(date 1683365430588)
@@ -2,22 +2,15 @@
 
 import androidx.appcompat.app.AppCompatActivity;
 
-import android.graphics.Color;
-import android.graphics.drawable.ColorDrawable;
 import android.os.Bundle;
 import android.view.WindowManager;
 
 import androidx.navigation.NavController;
 import androidx.navigation.fragment.NavHostFragment;
 import androidx.navigation.ui.NavigationUI;
-import androidx.viewpager2.widget.ViewPager2;
 
 import com.example.eventiapp.R;
-import com.example.eventiapp.adapter.MyViewPagerAdapter;
 import com.google.android.material.bottomnavigation.BottomNavigationView;
-import com.google.android.material.tabs.TabLayout;
-
-import java.util.Objects;
 
 public class MainActivity extends AppCompatActivity {
 
Index: app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\nimport static com.example.eventiapp.util.Constants.EVENTS_VIEW_TYPE;\r\n\r\nimport android.content.Context;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavBackStackEntry;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentCategoryBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class CategoryFragment extends Fragment {\r\n\r\n    private static final String TAG = CategoryFragment.class.getSimpleName();\r\n\r\n    private FragmentCategoryBinding fragmentCategoryBinding;\r\n\r\n    private List<Events> eventsList;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n\r\n    public CategoryFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static CategoryFragment newInstance() {\r\n        return new CategoryFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentCategoryBinding = FragmentCategoryBinding.inflate(inflater, container, false);\r\n        return fragmentCategoryBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        String category = getArguments().getString(\"category\");\r\n\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_events);\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(),\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(view).navigate(R.id.action_categoryFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        String lastUpdate = \"0\";\r\n\r\n        fragmentCategoryBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n        eventsAndPlacesViewModel.getCategoryEventsLiveData(category).observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result.isSuccess()) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n                EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                        eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());\r\n                        eventsAndPlacesViewModel.setFirstLoading(false);\r\n                        this.eventsList.addAll(fetchedEvents);\r\n                        eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                                this.eventsList.size());\r\n                    } else {\r\n                        // Updates related to the favorite status of the events\r\n                        eventsList.clear();\r\n                        eventsList.addAll(fetchedEvents);\r\n                        eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());\r\n                    }\r\n                    fragmentCategoryBinding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                    int initialSize = eventsList.size();\r\n\r\n                    for (int i = 0; i < eventsList.size(); i++) {\r\n                        if (eventsList.get(i) == null) {\r\n                            eventsList.remove(eventsList.get(i));\r\n                        }\r\n                    }\r\n                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                            EVENTS_PAGE_SIZE_VALUE;\r\n                    for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                        eventsList.add(fetchedEvents.get(i));\r\n                    }\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n                }\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(view, errorMessagesUtil.\r\n                                getErrorMessage(((Result.Error) result).getMessage()),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n                fragmentCategoryBinding.progressBar.setVisibility(View.GONE);\r\n            }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getCategoryEventsLiveData(category).getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<Result> eventsListMutableLiveData = eventsAndPlacesViewModel.getCategoryEventsLiveData(category);\r\n\r\n                        if (eventsListMutableLiveData.getValue() != null &&\r\n                                eventsListMutableLiveData.getValue().isSuccess()) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            eventsList.add(null);\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(eventsList.size(),\r\n                                    eventsList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.getCategoryEventsLiveData(category);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        NavBackStackEntry navBackStackEntry = Navigation.\r\n                findNavController(view).getPreviousBackStackEntry();\r\n\r\n        if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.homeFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.homeFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.myEventsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.myEventsFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.mapsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.mapsFragment).setChecked(true);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentCategoryBinding = null;\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java	(date 1683620350032)
@@ -133,6 +133,11 @@
                         Navigation.findNavController(view).navigate(R.id.action_categoryFragment_to_eventFragment, bundle);
                     }
 
+                    @Override
+                    public void onExportButtonPressed(Events events) {
+
+                    }
+
                     @Override
                     public void onFavoriteButtonPressed(int position) {
                         //SETTA EVENTO COME PREFERITO
Index: app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager2.widget.ViewPager2;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.MyViewPagerAdapter;\r\nimport com.example.eventiapp.databinding.FragmentHomeBinding;\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\n\r\npublic class HomeFragment extends Fragment {\r\n\r\n    FragmentHomeBinding fragmentHomeBinding;\r\n    TabLayout tabLayout;\r\n    ViewPager2 viewPager2;\r\n    MyViewPagerAdapter myViewPagerAdapter;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentHomeBinding = FragmentHomeBinding.inflate(inflater, container, false);\r\n        return fragmentHomeBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        tabLayout=view.findViewById(R.id.tab_layout);\r\n        viewPager2=view.findViewById(R.id.view_pager);\r\n        myViewPagerAdapter=new MyViewPagerAdapter(this);\r\n        viewPager2.setAdapter(myViewPagerAdapter);\r\n\r\n        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                viewPager2.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n\r\n        viewPager2.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {\r\n            @Override\r\n            public void onPageSelected(int position) {\r\n                super.onPageSelected(position);\r\n                tabLayout.getTabAt(position).select();\r\n            }\r\n        });\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java	(date 1683105211021)
@@ -12,7 +12,7 @@
 import android.view.ViewGroup;
 
 import com.example.eventiapp.R;
-import com.example.eventiapp.adapter.MyViewPagerAdapter;
+import com.example.eventiapp.adapter.EventsAndPlacesPagerAdapter;
 import com.example.eventiapp.databinding.FragmentHomeBinding;
 import com.google.android.material.tabs.TabLayout;
 
@@ -22,7 +22,7 @@
     FragmentHomeBinding fragmentHomeBinding;
     TabLayout tabLayout;
     ViewPager2 viewPager2;
-    MyViewPagerAdapter myViewPagerAdapter;
+    EventsAndPlacesPagerAdapter eventsAndPlacesPagerAdapter;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
@@ -42,8 +42,8 @@
 
         tabLayout=view.findViewById(R.id.tab_layout);
         viewPager2=view.findViewById(R.id.view_pager);
-        myViewPagerAdapter=new MyViewPagerAdapter(this);
-        viewPager2.setAdapter(myViewPagerAdapter);
+        eventsAndPlacesPagerAdapter =new EventsAndPlacesPagerAdapter(this);
+        viewPager2.setAdapter(eventsAndPlacesPagerAdapter);
 
         tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
             @Override
Index: app/src/main/res/layout/fragment_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ui.main.HomeFragment\">\r\n\r\n    <com.google.android.material.tabs.TabLayout\r\n        android:id=\"@+id/tab_layout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        tools:ignore=\"SpeakableTextPresentCheck,SpeakableTextPresentCheck,SpeakableTextPresentCheck\">\r\n\r\n        <com.google.android.material.tabs.TabItem\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"All events\" />\r\n\r\n        <com.google.android.material.tabs.TabItem\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Places\" />\r\n    </com.google.android.material.tabs.TabLayout>\r\n\r\n    <androidx.viewpager2.widget.ViewPager2\r\n        android:id=\"@+id/view_pager\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_below=\"@id/tab_layout\"/>\r\n\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_home.xml b/app/src/main/res/layout/fragment_home.xml
--- a/app/src/main/res/layout/fragment_home.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/layout/fragment_home.xml	(date 1683105317687)
@@ -21,6 +21,11 @@
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:text="Places" />
+
+        <com.google.android.material.tabs.TabItem
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Calendar" />
     </com.google.android.material.tabs.TabLayout>
 
     <androidx.viewpager2.widget.ViewPager2
Index: app/src/main/java/com/example/eventiapp/util/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.util;\r\n\r\npublic class Constants {\r\n\r\n    // Constants for EventsApi (https://api.predicthq.com)\r\n    public static final String EVENTS_API_BASE_URL = \"https://api.predicthq.com/v1/\";\r\n    public static final String EVENTS_ENDPOINT = \"events\";\r\n    public static final String PLACES_ENDPOINT=\"places\";\r\n    public static final String CLIENT_ID = \"Client-ID\";\r\n    public static final String EVENTS_COUNTRY=\"country\";\r\n    public static final String EVENTS_LIMIT=\"limit\";\r\n    public static final String EVENTS_START=\"start.gte\";\r\n    public static final String EVENTS_WITHIN=\"within\";\r\n    public static final String EVENTS_SORT=\"sort\";\r\n    public static final String EVENTS_END=\"end.lte\";\r\n    public static final String CLIENT_ID_VALUE = \"JY2hDOGTKiMtHH_VdBulMoKQai3uJq49AazyMAfJDDuzOqiJN4uq6A\";\r\n    public static final String TOKEN_API = \"Authorization\";\r\n    public static final String CONTENT_TYPE = \"Accept\";\r\n    public static final String CONTENT_TYPE_VALUE = \"application/json\";\r\n\r\n    public static final String LAST_UPDATE = \"last_update\";\r\n    public static final int FRESH_TIMEOUT = 60*60*1000; // 1 hour in milliseconds\r\n    public static final int EVENTS_PAGE_SIZE_VALUE = 10;\r\n\r\n    public static final String RETROFIT_ERROR = \"retrofit_error\";\r\n    public static final String API_KEY_ERROR = \"api_key_error\";\r\n\r\n\r\n    // Constants for Room database\r\n    public static final String EVENTS_DATABASE_NAME = \"EVENTS_DB\";\r\n\r\n    //SHARED PREFERENCES\r\n    public static final String SHARED_PREFERENCES_FILE_NAME = \"preferences\";\r\n\r\n    // Constants for EncryptedSharedPreferences\r\n    public static final String ENCRYPTED_SHARED_PREFERENCES_FILE_NAME = \"encrypted_preferences\";\r\n\r\n    // Constants for encrypted files\r\n    public static final String ENCRYPTED_DATA_FILE_NAME = \"encrypted_file.txt\";\r\n\r\n    //RECYCLER VIEW ADAPTER\r\n    public static final int EVENTS_VIEW_TYPE = 0;\r\n    public static final int LOADING_VIEW_TYPE = 1;\r\n    public static final int PLACES_VIEW_TYPE = 2;\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/util/Constants.java b/app/src/main/java/com/example/eventiapp/util/Constants.java
--- a/app/src/main/java/com/example/eventiapp/util/Constants.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/util/Constants.java	(date 1683621022006)
@@ -5,26 +5,28 @@
     // Constants for EventsApi (https://api.predicthq.com)
     public static final String EVENTS_API_BASE_URL = "https://api.predicthq.com/v1/";
     public static final String EVENTS_ENDPOINT = "events";
-    public static final String PLACES_ENDPOINT="places";
+    public static final String PLACES_ENDPOINT = "places";
     public static final String CLIENT_ID = "Client-ID";
-    public static final String EVENTS_COUNTRY="country";
-    public static final String EVENTS_LIMIT="limit";
-    public static final String EVENTS_START="start.gte";
-    public static final String EVENTS_WITHIN="within";
-    public static final String EVENTS_SORT="sort";
-    public static final String EVENTS_END="end.lte";
+    public static final String EVENTS_COUNTRY = "country";
+    public static final String EVENTS_LIMIT = "limit";
+    public static final String EVENTS_START = "start.gte";
+    public static final String EVENTS_WITHIN = "within";
+    public static final String EVENTS_SORT = "sort";
+    public static final String EVENTS_END = "end.lte";
     public static final String CLIENT_ID_VALUE = "JY2hDOGTKiMtHH_VdBulMoKQai3uJq49AazyMAfJDDuzOqiJN4uq6A";
     public static final String TOKEN_API = "Authorization";
     public static final String CONTENT_TYPE = "Accept";
     public static final String CONTENT_TYPE_VALUE = "application/json";
 
     public static final String LAST_UPDATE = "last_update";
-    public static final int FRESH_TIMEOUT = 60*60*1000; // 1 hour in milliseconds
+    public static final int FRESH_TIMEOUT = 60 * 60 * 1000; // 1 hour in milliseconds
     public static final int EVENTS_PAGE_SIZE_VALUE = 10;
 
     public static final String RETROFIT_ERROR = "retrofit_error";
     public static final String API_KEY_ERROR = "api_key_error";
 
+    public static final int REQUEST_CODE = 123;
+
 
     // Constants for Room database
     public static final String EVENTS_DATABASE_NAME = "EVENTS_DB";
@@ -44,5 +46,4 @@
     public static final int PLACES_VIEW_TYPE = 2;
 
 
-
 }
Index: app/src/main/res/navigation/my_nav.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/my_nav\"\r\n    app:startDestination=\"@id/homeFragment\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/mapsFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.MapsFragment\"\r\n        android:label=\"fragment_maps\"\r\n        tools:layout=\"@layout/fragment_maps\" >\r\n        <action\r\n            android:id=\"@+id/action_mapsFragment_to_placeFragment\"\r\n            app:destination=\"@id/placeFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_mapsFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/homeFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.HomeFragment\"\r\n        android:label=\"fragment_home\"\r\n        tools:layout=\"@layout/fragment_home\" >\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\r\n            app:destination=\"@id/searchFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_placeFragment\"\r\n            app:destination=\"@id/placeFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/myEventsFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.MyEventsFragment\"\r\n        android:label=\"fragment_my_events\"\r\n        tools:layout=\"@layout/fragment_my_events\" />\r\n    <fragment\r\n        android:id=\"@+id/searchFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.SearchFragment\"\r\n        android:label=\"fragment_search\"\r\n        tools:layout=\"@layout/fragment_search\" >\r\n        <action\r\n            android:id=\"@+id/action_searchFragment_to_categoryFragment\"\r\n            app:destination=\"@id/categoryFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/categoryFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.CategoryFragment\"\r\n        android:label=\"fragment_category\"\r\n        tools:layout=\"@layout/fragment_category\" >\r\n        <action\r\n            android:id=\"@+id/action_categoryFragment_to_searchFragment\"\r\n            app:destination=\"@id/searchFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_categoryFragment_to_homeFragment\"\r\n            app:destination=\"@id/homeFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_categoryFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/eventFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.EventFragment\"\r\n        android:label=\"fragment_event\"\r\n        tools:layout=\"@layout/fragment_event\" >\r\n        <action\r\n            android:id=\"@+id/action_eventFragment_self\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/placeFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.PlaceFragment\"\r\n        android:label=\"PlaceFragment\" >\r\n        <action\r\n            android:id=\"@+id/action_placeFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/my_nav.xml b/app/src/main/res/navigation/my_nav.xml
--- a/app/src/main/res/navigation/my_nav.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/navigation/my_nav.xml	(date 1683205540330)
@@ -31,6 +31,9 @@
         <action
             android:id="@+id/action_homeFragment_to_placeFragment"
             app:destination="@id/placeFragment" />
+        <action
+            android:id="@+id/action_homeFragment_to_eventsInADateFragment"
+            app:destination="@id/eventsInADateFragment" />
     </fragment>
     <fragment
         android:id="@+id/myEventsFragment"
@@ -79,4 +82,13 @@
             android:id="@+id/action_placeFragment_to_eventFragment"
             app:destination="@id/eventFragment" />
     </fragment>
+    <fragment
+        android:id="@+id/eventsInADateFragment"
+        android:name="com.example.eventiapp.ui.main.EventsInADateFragment"
+        android:label="fragment_events_in_a_date"
+        tools:layout="@layout/fragment_events_in_a_date" >
+        <action
+            android:id="@+id/action_eventsInADateFragment_to_eventFragment"
+            app:destination="@id/eventFragment" />
+    </fragment>
 </navigation>
\ No newline at end of file
Index: app/src/main/java/com/example/eventiapp/model/Events.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.model;\r\n\r\nimport android.media.metrics.Event;\r\nimport android.os.Parcel;\r\nimport android.os.Parcelable;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.room.ColumnInfo;\r\nimport androidx.room.Embedded;\r\nimport androidx.room.Entity;\r\nimport androidx.room.Ignore;\r\nimport androidx.room.PrimaryKey;\r\nimport androidx.room.TypeConverters;\r\n\r\nimport com.example.eventiapp.util.Converters;\r\nimport com.google.gson.annotations.Expose;\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\n@Entity\r\npublic class Events implements Parcelable {\r\n\r\n    @PrimaryKey(autoGenerate = true)\r\n    private long id_db;\r\n    private EventSource eventSource;\r\n    private String title;\r\n    private String description;\r\n    private String category;\r\n    private String[] labels;\r\n    private int rank;\r\n    @SerializedName(\"local_rank\")\r\n    private int localRank;\r\n    @SerializedName(\"phq_attendance\")\r\n    private int attendance;\r\n    @SerializedName(\"entities\") //LUOGO E INDIRIZZO EVENTO\r\n    private List<Place> places;\r\n    private int duration;\r\n    @ColumnInfo(name = \"startDate\")\r\n    private String start;\r\n    private String end;\r\n    private String[] hours;\r\n    private String timezone;\r\n    @SerializedName(\"location\")\r\n    private double[] coordinates; //COORDINATE\r\n    private String country;\r\n    private String state; //ATTIVO o DISATTIVO\r\n    @SerializedName(\"private\")\r\n    private boolean isPrivate;\r\n    @ColumnInfo(name = \"is_favorite\")\r\n    private boolean isFavorite;\r\n    @ColumnInfo(name = \"is_synchronized\")\r\n    private boolean isSynchronized;\r\n\r\n    public Events() {\r\n    }\r\n\r\n\r\n    protected Events(Parcel in) {\r\n        id_db = in.readLong();\r\n        title = in.readString();\r\n        description = in.readString();\r\n        category = in.readString();\r\n        labels = in.createStringArray();\r\n        rank = in.readInt();\r\n        localRank = in.readInt();\r\n        attendance = in.readInt();\r\n        duration = in.readInt();\r\n        start = in.readString();\r\n        end = in.readString();\r\n        hours = in.createStringArray();\r\n        timezone = in.readString();\r\n        coordinates = in.createDoubleArray();\r\n        country = in.readString();\r\n        state = in.readString();\r\n        isPrivate = in.readByte() != 0;\r\n        isFavorite = in.readByte() != 0;\r\n        isSynchronized = in.readByte() != 0;\r\n    }\r\n\r\n    public static final Creator<Events> CREATOR = new Creator<Events>() {\r\n        @Override\r\n        public Events createFromParcel(Parcel in) {\r\n            return new Events(in);\r\n        }\r\n\r\n        @Override\r\n        public Events[] newArray(int size) {\r\n            return new Events[size];\r\n        }\r\n    };\r\n\r\n    public EventSource getEventSource() {\r\n        return eventSource;\r\n    }\r\n\r\n    public void setEventSource(EventSource eventSource) {\r\n        this.eventSource = eventSource;\r\n    }\r\n\r\n    public long getId_db() {\r\n        return id_db;\r\n    }\r\n\r\n    public void setId_db(long id_db) {\r\n        this.id_db = id_db;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    public String[] getLabels() {\r\n        return labels;\r\n    }\r\n\r\n    public void setLabels(String[] labels) {\r\n        this.labels = labels;\r\n    }\r\n\r\n    public int getRank() {\r\n        return rank;\r\n    }\r\n\r\n    public void setRank(int rank) {\r\n        this.rank = rank;\r\n    }\r\n\r\n    public int getLocalRank() {\r\n        return localRank;\r\n    }\r\n\r\n    public void setLocalRank(int localRank) {\r\n        this.localRank = localRank;\r\n    }\r\n\r\n    public int getAttendance() {\r\n        return attendance;\r\n    }\r\n\r\n    public void setAttendance(int attendance) {\r\n        this.attendance = attendance;\r\n    }\r\n\r\n    public List<Place> getPlaces() {\r\n        return places;\r\n    }\r\n\r\n    public void setPlaces(List<Place> places) {\r\n        this.places = places;\r\n    }\r\n\r\n    public int getDuration() {\r\n        return duration;\r\n    }\r\n\r\n    public void setDuration(int duration) {\r\n        this.duration = duration;\r\n    }\r\n\r\n    public String getStart() {\r\n        return start;\r\n    }\r\n\r\n    public void setStart(String start) {\r\n        this.start = start;\r\n    }\r\n\r\n    public String getEnd() {\r\n        return end;\r\n    }\r\n\r\n    public void setEnd(String end) {\r\n        this.end = end;\r\n    }\r\n\r\n    public String[] getHours() {\r\n        return hours;\r\n    }\r\n\r\n    public void setHours(String[] hours) {\r\n        this.hours = hours;\r\n    }\r\n\r\n    public String getTimezone() {\r\n        return timezone;\r\n    }\r\n\r\n    public void setTimezone(String timezone) {\r\n        this.timezone = timezone;\r\n    }\r\n\r\n    public double[] getCoordinates() {\r\n        return coordinates;\r\n    }\r\n\r\n    public void setCoordinates(double[] coordinates) {\r\n        this.coordinates = coordinates;\r\n    }\r\n\r\n    public String getCountry() {\r\n        return country;\r\n    }\r\n\r\n    public void setCountry(String country) {\r\n        this.country = country;\r\n    }\r\n\r\n    public String getState() {\r\n        return state;\r\n    }\r\n\r\n    public void setState(String state) {\r\n        this.state = state;\r\n    }\r\n\r\n    public boolean isPrivate() {\r\n        return isPrivate;\r\n    }\r\n\r\n    public void setPrivate(boolean aPrivate) {\r\n        isPrivate = aPrivate;\r\n    }\r\n\r\n    public boolean isFavorite() {\r\n        return isFavorite;\r\n    }\r\n\r\n    public void setFavorite(boolean favorite) {\r\n        isFavorite = favorite;\r\n    }\r\n\r\n    public boolean isSynchronized() {\r\n        return isSynchronized;\r\n    }\r\n\r\n    public void setSynchronized(boolean aSynchronized) {\r\n        isSynchronized = aSynchronized;\r\n    }\r\n\r\n\r\n    @Override\r\n    public int describeContents() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public void writeToParcel(@NonNull Parcel dest, int flags) {\r\n        dest.writeLong(id_db);\r\n        dest.writeString(title);\r\n        dest.writeString(description);\r\n        dest.writeString(category);\r\n        dest.writeStringArray(labels);\r\n        dest.writeInt(rank);\r\n        dest.writeInt(localRank);\r\n        dest.writeInt(attendance);\r\n        dest.writeInt(duration);\r\n        dest.writeString(start);\r\n        dest.writeString(end);\r\n        dest.writeStringArray(hours);\r\n        dest.writeString(timezone);\r\n        dest.writeDoubleArray(coordinates);\r\n        dest.writeString(country);\r\n        dest.writeString(state);\r\n        dest.writeByte((byte) (isPrivate ? 1 : 0));\r\n        dest.writeByte((byte) (isFavorite ? 1 : 0));\r\n        dest.writeByte((byte) (isSynchronized ? 1 : 0));\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        Events events = (Events) o;\r\n        return rank == events.rank && localRank == events.localRank && attendance == events.attendance && duration == events.duration && isPrivate == events.isPrivate && isFavorite == events.isFavorite && isSynchronized == events.isSynchronized && Objects.equals(eventSource, events.eventSource) && Objects.equals(title, events.title) && Objects.equals(description, events.description) && Objects.equals(category, events.category) && Arrays.equals(labels, events.labels) && Objects.equals(places, events.places) && Objects.equals(start, events.start) && Objects.equals(end, events.end) && Arrays.equals(hours, events.hours) && Objects.equals(timezone, events.timezone) && Arrays.equals(coordinates, events.coordinates) && Objects.equals(country, events.country) && Objects.equals(state, events.state);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result = Objects.hash(eventSource, title, description, category, rank, localRank, attendance, places, duration, start, end, timezone, country, state, isPrivate, isFavorite, isSynchronized);\r\n        result = 31 * result + Arrays.hashCode(labels);\r\n        result = 31 * result + Arrays.hashCode(hours);\r\n        result = 31 * result + Arrays.hashCode(coordinates);\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Events{\" +\r\n                \"id_db=\" + id_db +\r\n                \", eventSource=\" + eventSource +\r\n                \", title='\" + title + '\\'' +\r\n                \", description='\" + description + '\\'' +\r\n                \", category='\" + category + '\\'' +\r\n                \", labels=\" + Arrays.toString(labels) +\r\n                \", rank=\" + rank +\r\n                \", localRank=\" + localRank +\r\n                \", attendance=\" + attendance +\r\n                \", places=\" + places +\r\n                \", duration=\" + duration +\r\n                \", start='\" + start + '\\'' +\r\n                \", end='\" + end + '\\'' +\r\n                \", hours=\" + Arrays.toString(hours) +\r\n                \", timezone='\" + timezone + '\\'' +\r\n                \", coordinates=\" + Arrays.toString(coordinates) +\r\n                \", country='\" + country + '\\'' +\r\n                \", state='\" + state + '\\'' +\r\n                \", isPrivate=\" + isPrivate +\r\n                \", isFavorite=\" + isFavorite +\r\n                \", isSynchronized=\" + isSynchronized +\r\n                '}';\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/model/Events.java b/app/src/main/java/com/example/eventiapp/model/Events.java
--- a/app/src/main/java/com/example/eventiapp/model/Events.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/model/Events.java	(date 1683550055607)
@@ -20,8 +20,12 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 import java.util.Objects;
 
@@ -337,5 +341,50 @@
                 ", isSynchronized=" + isSynchronized +
                 '}';
     }
+
+
+    public static class SortByLeastRecent implements java.util.Comparator<Events> {
+        public int compare(Events a, Events b) {
+            if(a.getStart()!=null && b.getStart()!=null) {
+                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
+                try {
+                    Date dateA = format.parse(a.getStart());
+                    Date dateB = format.parse(b.getStart());
+                    return Objects.requireNonNull(dateA).compareTo(dateB);
+                } catch (ParseException e) {
+                    e.printStackTrace();
+                }
+            }
+            return 0;
+        }
+    }
+
+    public static class SortByMostRecent implements java.util.Comparator<Events> {
+        public int compare(Events a, Events b) {
+            if(a.getStart()!=null && b.getStart()!=null) {
+                try {
+                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
+                    Date date1 = formatter.parse(a.getStart());
+                    Date date2 = formatter.parse(b.getStart());
+                    return -Objects.requireNonNull(date1).compareTo(date2);
+                } catch (ParseException e1) {
+                    e1.printStackTrace();
+                }
+            }
+            return 0;
+        }
+    }
+
+    public static class SortByAlphabetAZ implements java.util.Comparator<Events> {
+        public int compare(Events a, Events b) {
+            return a.getTitle().compareTo(b.getTitle());
+        }
+    }
+
+    public static class SortByAlphabetZA implements java.util.Comparator<Events> {
+        public int compare(Events a, Events b) {
+            return -a.getTitle().compareTo(b.getTitle());
+        }
+    }
 }
 
Index: app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.jsoup;\r\n\r\nimport android.os.AsyncTask;\r\nimport android.util.Log;\r\n\r\nimport com.example.eventiapp.model.EventSource;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.source.events.BaseEventsRemoteDataSource;\r\nimport com.example.eventiapp.ui.main.AllEventsFragment;\r\n\r\nimport org.jsoup.Jsoup;\r\nimport org.jsoup.nodes.Document;\r\nimport org.jsoup.nodes.Element;\r\nimport org.jsoup.select.Elements;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class JsoupDataSource extends AsyncTask<Void, Void, EventsApiResponse> {\r\n\r\n\r\n    @Override\r\n    protected void onPreExecute() {\r\n        super.onPreExecute();\r\n    }\r\n\r\n    @Override\r\n    protected EventsApiResponse doInBackground(Void... voids) {\r\n\r\n        List<Events> allEvents=new ArrayList<>();\r\n        allEvents.addAll(eventsUciCinemas());\r\n        allEvents.addAll(eventsPirelliHangar());\r\n\r\n        return new EventsApiResponse(allEvents);\r\n    }\r\n\r\n    @Override\r\n    protected void onPostExecute(EventsApiResponse eventsApiResponse) {\r\n        BaseEventsRemoteDataSource.eventsCallback.onSuccessFromRemote(eventsApiResponse, System.currentTimeMillis());\r\n    }\r\n\r\n    private List<Events> eventsUciCinemas() {\r\n        List<Events> events = new ArrayList<>();\r\n        //UCI CINEMAS BICOCCA (FILM TRASMESSI NEL GIORNO CORRENTE)\r\n        try {\r\n            Document document = Jsoup.connect(\"https://www.ucicinemas.it/cinema/lombardia/milano/uci-cinemas-bicocca-milano/\").get();\r\n            Element element = document.getElementById(\"showtimes-venue-container\");\r\n            Element element2 = element.getElementsByClass(\"showtimes__movie\").first();\r\n            Elements show = element2.getElementsByClass(\"showtimes__show\");\r\n\r\n            for (Element e : show) {\r\n                Element movie = e.getElementsByClass(\"movie-name\").first();\r\n                Elements timetables = e.getElementsByClass(\"showtimes__movie__shows list-inline\");\r\n                Element href = movie.select(\"a\").first();\r\n                String name = href.text();\r\n                String urlMovie = \"https://www.ucicinemas.it\" + href.attr(\"href\");\r\n\r\n                //ORARI FILM\r\n                ArrayList<String> hours = new ArrayList<>();\r\n                Elements times = timetables.select(\"a\");\r\n                for (Element o : times) {\r\n                    String hour = o.text();\r\n                    hours.add(hour);\r\n                }\r\n\r\n                //DESCRIZIONE FILM\r\n                StringBuilder description = new StringBuilder();\r\n                Document document2 = Jsoup.connect(urlMovie).get();\r\n                Element movieDetail = document2.getElementsByClass(\"movie-data__wrapper\").first();\r\n                Elements p = movieDetail.getAllElements();\r\n                int count = 0;\r\n                for (Element o : p) {\r\n                    if (count < 2) {\r\n                        description.append(o.text());\r\n                        count++;\r\n                    }\r\n                }\r\n\r\n                //FOTO FILM\r\n                Element movieImage=document2.getElementsByClass(\"main-carousel\").first();\r\n                Element imageElement = movieImage.select(\"img\").first();\r\n                String srcValue = imageElement.attr(\"src\");\r\n\r\n                Events event = new Events();\r\n                event.setTitle(name);\r\n                event.setEventSource(new EventSource(urlMovie, srcValue));\r\n                event.setCategory(\"movies\");\r\n                event.setDescription(String.valueOf(description));\r\n                event.setStart(AllEventsFragment.currentDate());\r\n                String[] hoursArray = new String[hours.size()];\r\n                hoursArray = hours.toArray(hoursArray);\r\n                event.setHours(hoursArray);\r\n                event.setTimezone(\"Europe/Rome\");\r\n                double[] coordinates = {45.5220145, 9.2133497}; //COORDINATE UCI BICOCCA\r\n                event.setCoordinates(coordinates);\r\n                List<Place> placeList = new ArrayList<>();\r\n                Place place = new Place(\"uci_bicocca\", \"UCI Cinemas Bicocca\", \"venue\", \"Via Chiese, 20126 Milan MI, Italy\",coordinates);\r\n                placeList.add(place);\r\n                event.setPlaces(placeList);\r\n                Log.i(\"UCI MOVIE: \" , event.toString());\r\n                events.add(event);\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    private List<Events> eventsPirelliHangar() {\r\n        List<Events> events = new ArrayList<>();\r\n        try {\r\n            Document document = Jsoup.connect(\"https://pirellihangarbicocca.org/evento/\").get();\r\n            Elements elements = document.getElementsByClass(\"fl-post-column\");\r\n            for (Element e : elements) {\r\n                Events event = new Events();\r\n                Element href = e.select(\"a\").first();\r\n                Element eventType = e.getElementsByClass(\"spot-info uppercase\").first();\r\n                String category=eventType.text();\r\n                category=category.replace(\"Evento\",\"\");\r\n                category=category.replaceAll(\"\\\\s\", \" \");\r\n                event.setCategory(category);\r\n                Element imageElement = e.select(\"img\").first();\r\n                String srcValue = \"https:\" + imageElement.attr(\"src\");\r\n                event.setEventSource(new EventSource(href.attr(\"href\"), srcValue));\r\n                Element dateElement=e.getElementsByClass(\"spot-date uppercase\").first();\r\n                event.setStart(dateElement.text());\r\n                event.setTimezone(\"Europe/Rome\");\r\n                Element titleElement=e.select(\"h2\").first();\r\n                event.setTitle(titleElement.text());\r\n                List<Place> placeList=new ArrayList<>();\r\n                double[] coordinates={45.5203608,9.2160497};\r\n                event.setCoordinates(coordinates);\r\n                Place place=new Place(\"pirelli_hangar\",\"Pirelli HangarBicocca\",\"venue\",\"Via Chiese, 2, 20126 Milan MI, Italy\",coordinates);\r\n                placeList.add(place);\r\n                event.setPlaces(placeList);\r\n                Log.i(\"PIRELLI EVENT: \" , event.toString());\r\n                events.add(event);\r\n\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java b/app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java
--- a/app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java	(date 1683619406836)
@@ -9,6 +9,7 @@
 import com.example.eventiapp.model.Place;
 import com.example.eventiapp.source.events.BaseEventsRemoteDataSource;
 import com.example.eventiapp.ui.main.AllEventsFragment;
+import com.example.eventiapp.util.DateUtils;
 
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
@@ -16,8 +17,13 @@
 import org.jsoup.select.Elements;
 
 import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 
 public class JsoupDataSource extends AsyncTask<Void, Void, EventsApiResponse> {
 
@@ -30,7 +36,7 @@
     @Override
     protected EventsApiResponse doInBackground(Void... voids) {
 
-        List<Events> allEvents=new ArrayList<>();
+        List<Events> allEvents = new ArrayList<>();
         allEvents.addAll(eventsUciCinemas());
         allEvents.addAll(eventsPirelliHangar());
 
@@ -53,6 +59,13 @@
 
             for (Element e : show) {
                 Element movie = e.getElementsByClass("movie-name").first();
+                Element movieNote = e.getElementsByClass("mobile-showtimes__movie__notes-container").first();
+                Element movie3D = movieNote.getElementsByClass("mobile-showtimes__movie__notes").first();
+                String srcValue3D = null;
+                if (movie3D != null) {
+                    Element image3D = movie3D.select("img").first();
+                    srcValue3D = image3D.attr("src");
+                }
                 Elements timetables = e.getElementsByClass("showtimes__movie__shows list-inline");
                 Element href = movie.select("a").first();
                 String name = href.text();
@@ -66,6 +79,12 @@
                     hours.add(hour);
                 }
 
+                //3D FILM
+                if (srcValue3D != null && srcValue3D.contains("3d")) {
+                    name = name + " 3D";
+                }
+
+
                 //DESCRIZIONE FILM
                 StringBuilder description = new StringBuilder();
                 Document document2 = Jsoup.connect(urlMovie).get();
@@ -80,7 +99,7 @@
                 }
 
                 //FOTO FILM
-                Element movieImage=document2.getElementsByClass("main-carousel").first();
+                Element movieImage = document2.getElementsByClass("main-carousel").first();
                 Element imageElement = movieImage.select("img").first();
                 String srcValue = imageElement.attr("src");
 
@@ -97,10 +116,10 @@
                 double[] coordinates = {45.5220145, 9.2133497}; //COORDINATE UCI BICOCCA
                 event.setCoordinates(coordinates);
                 List<Place> placeList = new ArrayList<>();
-                Place place = new Place("uci_bicocca", "UCI Cinemas Bicocca", "venue", "Via Chiese, 20126 Milan MI, Italy",coordinates);
+                Place place = new Place("uci_bicocca", "UCI Cinemas Bicocca", "venue", "Via Chiese, 20126 Milan MI, Italy", coordinates);
                 placeList.add(place);
                 event.setPlaces(placeList);
-                Log.i("UCI MOVIE: " , event.toString());
+                Log.i("UCI MOVIE: ", event.toString());
                 events.add(event);
             }
 
@@ -120,25 +139,35 @@
                 Events event = new Events();
                 Element href = e.select("a").first();
                 Element eventType = e.getElementsByClass("spot-info uppercase").first();
-                String category=eventType.text();
-                category=category.replace("Evento","");
-                category=category.replaceAll("\\s", " ");
+                String category = eventType.text();
+                category = category.replace("Evento", "");
+                category = category.replaceAll("\\s", " ");
                 event.setCategory(category);
                 Element imageElement = e.select("img").first();
                 String srcValue = "https:" + imageElement.attr("src");
                 event.setEventSource(new EventSource(href.attr("href"), srcValue));
-                Element dateElement=e.getElementsByClass("spot-date uppercase").first();
-                event.setStart(dateElement.text());
+
+                //DATA EVENTO
+                Element dateElement = e.getElementsByClass("spot-date uppercase").first();
+                String date = dateElement.text();
+                Date date1 = DateUtils.parseDate(date, "it");
+                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
+                if (date1 != null) {
+                    String formattedDate = formatter.format(date1);
+                    if (formattedDate.compareTo(AllEventsFragment.currentDate()) >= 0) {
+                        event.setStart(formattedDate);
+                    }
+                }
                 event.setTimezone("Europe/Rome");
-                Element titleElement=e.select("h2").first();
+                Element titleElement = e.select("h2").first();
                 event.setTitle(titleElement.text());
-                List<Place> placeList=new ArrayList<>();
-                double[] coordinates={45.5203608,9.2160497};
+                List<Place> placeList = new ArrayList<>();
+                double[] coordinates = {45.5203608, 9.2160497};
                 event.setCoordinates(coordinates);
-                Place place=new Place("pirelli_hangar","Pirelli HangarBicocca","venue","Via Chiese, 2, 20126 Milan MI, Italy",coordinates);
+                Place place = new Place("pirelli_hangar", "Pirelli HangarBicocca", "venue", "Via Chiese, 2, 20126 Milan MI, Italy", coordinates);
                 placeList.add(place);
                 event.setPlaces(placeList);
-                Log.i("PIRELLI EVENT: " , event.toString());
+                Log.i("PIRELLI EVENT: ", event.toString());
                 events.add(event);
 
             }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\r\n\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.EVENTIAPP\"\r\n        tools:targetApi=\"33\">\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.gms.version\"\r\n            android:value=\"@integer/google_play_services_version\"  />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.maps.v2.API_KEY\"\r\n            android:value=\"${maps_api_key}\" />\r\n\r\n        <activity\r\n            android:name=\".ui.main.MainActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/AndroidManifest.xml	(date 1683620628844)
@@ -7,6 +7,8 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     <uses-permission android:name="android.permission.CALL_PHONE" />
+    <uses-permission android:name="android.permission.WRITE_CALENDAR" />
+    <uses-permission android:name="android.permission.READ_CALENDAR" />
 
 
     <application
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'\r\n}\r\n\r\nandroid {\r\n    namespace 'com.example.eventiapp'\r\n    compileSdk 33\r\n\r\n\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.eventiapp\"\r\n        minSdk 22\r\n        targetSdk 33\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n\r\n        Properties properties = new Properties()\r\n        properties.load(project.rootProject.file(\"local.properties\").newDataInputStream())\r\n        resValue \"string\", \"events_api_key\", properties.getProperty(\"events_api_key\", \"\")\r\n        resValue \"string\", \"maps_api_key\", properties.getProperty(\"maps_api_key\", \"\")\r\n        manifestPlaceholders = [maps_api_key: \"${properties.getProperty('maps_api_key')}\"]\r\n\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    buildFeatures {\r\n        viewBinding true\r\n    }\r\n\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\ndependencies {\r\n\r\n    implementation 'com.google.android.libraries.places:places:3.1.0'\r\n    def room_version = \"2.5.1\"\r\n    implementation 'com.google.android.gms:play-services-places:17.0.0'\r\n    implementation 'org.jsoup:jsoup:1.15.4'\r\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'\r\n    implementation 'androidx.appcompat:appcompat:1.6.1'\r\n    implementation 'com.google.android.material:material:1.8.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    implementation 'androidx.navigation:navigation-fragment:2.5.3'\r\n    implementation 'androidx.navigation:navigation-ui:2.5.3'\r\n    implementation \"androidx.room:room-runtime:$room_version\"\r\n    annotationProcessor \"androidx.room:room-compiler:$room_version\"\r\n    implementation \"androidx.security:security-crypto:1.1.0-alpha06\"\r\n    implementation 'com.google.android.gms:play-services-maps:18.1.0'\r\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/build.gradle	(date 1683277543784)
@@ -57,7 +57,7 @@
     implementation 'com.github.bumptech.glide:glide:4.11.0'
     annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
     implementation 'androidx.appcompat:appcompat:1.6.1'
-    implementation 'com.google.android.material:material:1.8.0'
+    implementation 'com.google.android.material:material:1.9.0'
     implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
     implementation 'androidx.navigation:navigation-fragment:2.5.3'
     implementation 'androidx.navigation:navigation-ui:2.5.3'
Index: app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.location.Geocoder;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.HorizontalScrollView;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.source.google.PlaceDetailsSource;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.UiSettings;\r\nimport com.google.android.gms.maps.model.CameraPosition;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.libraries.places.api.Places;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\npublic class MapsFragment extends Fragment {\r\n\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    private List<com.example.eventiapp.model.Place> placesList;\r\n    private List<Events> placeEventsList;\r\n    private Marker marker;\r\n    private UiSettings mUiSettings;\r\n    GoogleMap myGoogleMap;\r\n    private Geocoder geoCoder;\r\n    private BottomSheetBehavior mBottomSheetBehavior1;\r\n    View bottomSheet;\r\n    LinearLayout tapactionlayout;\r\n    LayoutInflater inflater;\r\n    private ImageView carImageView;\r\n    private ImageView mapsImageView;\r\n    private ImageView callImageView;\r\n    private ImageView favoriteImageView;\r\n    private LinearLayout galleryPhotos;\r\n    private HorizontalScrollView scrollViewImagesPlace;\r\n\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private RecyclerView recyclerView;\r\n    private ProgressBar progressBar;\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    private final OnMapReadyCallback callback = new OnMapReadyCallback() {\r\n\r\n        /**\r\n         * Manipulates the map once available.\r\n         * This callback is triggered when the map is ready to be used.\r\n         * This is where we can add markers or lines, add listeners or move the camera.\r\n         * In this case, we just add a marker near Sydney, Australia.\r\n         * If Google Play services is not installed on the device, the user will be prompted to\r\n         * install it inside the SupportMapFragment. This method will only be triggered once the\r\n         * user has installed Google Play services and returned to the app.\r\n         */\r\n        @Override\r\n        public void onMapReady(GoogleMap googleMap) {\r\n            myGoogleMap = googleMap;\r\n            mUiSettings = myGoogleMap.getUiSettings();\r\n            mUiSettings.setZoomControlsEnabled(true);\r\n            mUiSettings.setMapToolbarEnabled(true);\r\n\r\n\r\n            LatLng bicocca = new LatLng(45.51851, 9.2075123);\r\n           /*\r\n            myGoogleMap.addMarker(new MarkerOptions().position(bicocca).title(\"Marker in Bicocca\"));\r\n            myGoogleMap.moveCamera(CameraUpdateFactory.newLatLng(bicocca));\r\n            */\r\n\r\n            float zoomLevel = 13.0f; //This goes up to 21\r\n            myGoogleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(bicocca, zoomLevel));\r\n\r\n            int count = 0;\r\n\r\n            myGoogleMap.setInfoWindowAdapter(new GoogleMap.InfoWindowAdapter() {\r\n                @Nullable\r\n                @Override\r\n                public View getInfoContents(@NonNull Marker marker) {\r\n                    View v = getLayoutInflater().inflate(R.layout.info_window_maps, null);\r\n                    TextView textViewName = v.findViewById(R.id.place_name);\r\n                    TextView textViewAddress = v.findViewById(R.id.place_address);\r\n                    String[] parts = Objects.requireNonNull(marker.getTitle()).split(\":\");\r\n                    String namePlace = parts[0];\r\n                    textViewName.setText(namePlace);\r\n                    textViewAddress.setText(marker.getSnippet());\r\n                    return v;\r\n                }\r\n\r\n                @Nullable\r\n                @Override\r\n                public View getInfoWindow(@NonNull Marker marker) {\r\n                    return null;\r\n                }\r\n            });\r\n\r\n            geoCoder = new Geocoder(getContext(), Locale.getDefault());\r\n            setMarkers();\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        placesList = new ArrayList<com.example.eventiapp.model.Place>();\r\n        placeEventsList=new ArrayList<>(); //EVENTI DI UN SINGOLO LUOGO\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.fragment_maps, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        inflater = LayoutInflater.from(getContext());\r\n        SupportMapFragment mapFragment =\r\n                (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);\r\n        if (mapFragment != null) {\r\n            mapFragment.getMapAsync(callback);\r\n        }\r\n\r\n        progressBar = view.findViewById(R.id.progress_bar);\r\n        recyclerView = view.findViewById(R.id.recyclerview_events);\r\n\r\n        eventsAndPlacesViewModel.getPlaces().observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result != null) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n                List<com.example.eventiapp.model.Place> fetchedPlaces = new ArrayList<>(result);\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                        eventsAndPlacesViewModel.setTotalResults(fetchedPlaces.size());\r\n                        eventsAndPlacesViewModel.setFirstLoading(false);\r\n                        this.placesList.addAll(fetchedPlaces);\r\n                    } else {\r\n                        // Updates related to the favorite status of the places\r\n                        placesList.clear();\r\n                        placesList.addAll(fetchedPlaces);\r\n                    }\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(placesList.size());\r\n                    for (int i = 0; i < placesList.size(); i++) {\r\n                        if (placesList.get(i) == null) {\r\n                            placesList.remove(placesList.get(i));\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(view, errorMessagesUtil.\r\n                                getErrorMessage(\"ERRORE\"),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n        //BOTTOM SHEETS\r\n\r\n        bottomSheet = view.findViewById(R.id.bottom_sheet1);\r\n        tapactionlayout = view.findViewById(R.id.tap_action_layout);\r\n        mBottomSheetBehavior1 = BottomSheetBehavior.from(bottomSheet);\r\n        mBottomSheetBehavior1.setPeekHeight(120);\r\n        mBottomSheetBehavior1.setState(BottomSheetBehavior.STATE_COLLAPSED);\r\n\r\n        scrollViewImagesPlace = view.findViewById(R.id.scrollViewImagesPlace);\r\n        galleryPhotos = view.findViewById(R.id.galleryPhotos);\r\n        carImageView = view.findViewById(R.id.carImageView);\r\n        mapsImageView = view.findViewById(R.id.mapsImageView);\r\n        callImageView = view.findViewById(R.id.callImageView);\r\n        favoriteImageView = view.findViewById(R.id.favoriteImageView);\r\n\r\n\r\n        mBottomSheetBehavior1.setBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {\r\n            @Override\r\n            public void onStateChanged(@NonNull View bottomSheet, int newState) {\r\n                if (newState == BottomSheetBehavior.STATE_COLLAPSED) {\r\n                    tapactionlayout.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                if (newState == BottomSheetBehavior.STATE_EXPANDED) {\r\n                    tapactionlayout.setVisibility(View.GONE);\r\n                }\r\n\r\n                if (newState == BottomSheetBehavior.STATE_DRAGGING) {\r\n                    tapactionlayout.setVisibility(View.GONE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onSlide(@NonNull View bottomSheet, float slideOffset) {\r\n\r\n            }\r\n        });\r\n\r\n        tapactionlayout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (mBottomSheetBehavior1.getState() == BottomSheetBehavior.STATE_COLLAPSED) {\r\n                    mBottomSheetBehavior1.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void getEventsOfPlace(String id) {\r\n        //EVENTI PRESENTI NEL LUOGO\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(placeEventsList,\r\n                requireActivity().getApplication(),\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(requireView()\r\n                        ).navigate(R.id.action_mapsFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n\r\n        eventsAndPlacesViewModel.getPlaceEventsLiveData(id).observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result.isSuccess()) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n                placeEventsList.clear();\r\n\r\n                EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    this.placeEventsList.addAll(fetchedEvents);\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                            this.placeEventsList.size());\r\n                    progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(placeEventsList.size());\r\n\r\n                    int initialSize = placeEventsList.size();\r\n\r\n                    for (int i = 0; i < placeEventsList.size(); i++) {\r\n                        if (placeEventsList.get(i) == null) {\r\n                            placeEventsList.remove(placeEventsList.get(i));\r\n                        }\r\n                    }\r\n                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                            EVENTS_PAGE_SIZE_VALUE;\r\n                    for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                        placeEventsList.add(fetchedEvents.get(i));\r\n                    }\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, placeEventsList.size());\r\n                }\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(requireView(), errorMessagesUtil.\r\n                                getErrorMessage(((Result.Error) result).getMessage()),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n                progressBar.setVisibility(View.GONE);\r\n            }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getPlaceEventsLiveData(id).getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<Result> eventsListMutableLiveData = eventsAndPlacesViewModel.getPlaceEventsLiveData(id);\r\n\r\n                        if (eventsListMutableLiveData.getValue() != null &&\r\n                                eventsListMutableLiveData.getValue().isSuccess()) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            placeEventsList.add(null);\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(placeEventsList.size(),\r\n                                    placeEventsList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.getPlaceEventsLiveData(id);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (myGoogleMap != null) { //prevent crashing if the map doesn't exist yet (eg. on starting activity)\r\n            myGoogleMap.clear();\r\n\r\n            // add markers from database to the map\r\n            setMarkers();\r\n        }\r\n    }\r\n\r\n    private void setMarkers() {\r\n        for (com.example.eventiapp.model.Place p : placesList) {\r\n            marker = myGoogleMap.addMarker(new MarkerOptions().\r\n                    position(new LatLng(p.getCoordinates()[0], p.getCoordinates()[1])).\r\n                    title(p.getName() + \":\" + p.getId()).\r\n                    snippet(p.getAddress()));\r\n            myGoogleMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\r\n                @Override\r\n                public boolean onMarkerClick(@NonNull Marker marker) {\r\n                    tapactionlayout.setVisibility(View.VISIBLE);\r\n                    LatLng position = marker.getPosition();\r\n                    CameraPosition cameraPosition = new CameraPosition.Builder().target(position).zoom(20).build();\r\n                    myGoogleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));\r\n                    marker.showInfoWindow();\r\n\r\n                    String[] parts = Objects.requireNonNull(marker.getTitle()).split(\":\");\r\n                    String idPlace = parts[1];\r\n                    getEventsOfPlace(idPlace);\r\n\r\n                    //SETTA FOTO LUOGO\r\n\r\n                    eventsAndPlacesViewModel.getSinglePlace(idPlace).observe(getViewLifecycleOwner(), result -> {\r\n                        if(result!=null) {\r\n                            Place p = result;\r\n                            galleryPhotos.removeAllViews();\r\n                            PlaceDetailsSource.fetchPlacePhotos(p.getImages(), new PlaceDetailsSource.PlacePhotosListener() {\r\n                                @Override\r\n                                public void onPlacePhotosListener(Bitmap bitmap) {\r\n                                    scrollViewImagesPlace.setVisibility(View.VISIBLE);\r\n                                    if (bitmap != null) {\r\n                                        View viewPlacePhoto = inflater.inflate(R.layout.item_place_photo_maps, galleryPhotos, false);\r\n                                        ImageView imagePlace = viewPlacePhoto.findViewById(R.id.imagePlace);\r\n                                        imagePlace.setImageBitmap(bitmap);\r\n                                        galleryPhotos.addView(viewPlacePhoto);\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onError(String message) {\r\n                                    Log.i(\"ERROR\", message);\r\n                                }\r\n                            });\r\n\r\n\r\n                            carImageView.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    //NAVIGAZIONE\r\n                                    String uri = String.format(Locale.ENGLISH, \"google.navigation:q=%f,%f\", position.latitude, position.longitude);\r\n                                    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\r\n                                    startActivity(intent);\r\n                                }\r\n                            });\r\n\r\n                            mapsImageView.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    //APRI SU GOOGLE MAPS\r\n                                    String uri = String.format(Locale.ENGLISH, \"geo:%f,%f\", position.latitude, position.longitude);\r\n                                    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\r\n                                    startActivity(intent);\r\n                                }\r\n                            });\r\n\r\n                            Place finalP = p;\r\n                            callImageView.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    //CHIAMA POSTO\r\n\r\n                                    String number = finalP.getPhoneNumber();\r\n                                    if (number != null) {\r\n                                        Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse(\"tel:\" + number));\r\n                                        startActivity(intent);\r\n                                    } else {\r\n                                        Toast.makeText(requireContext(), \"NUMERO NON TROVATO\", Toast.LENGTH_LONG).show();\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n\r\n                            favoriteImageView.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    //AGGIUNGI POSTO AI FAVORITI DELL' UTENTE\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java	(date 1683625607582)
@@ -60,6 +60,8 @@
 
 public class MapsFragment extends Fragment {
 
+    private static final String TAG = MapsFragment.class.getSimpleName();
+
     private EventsAndPlacesViewModel eventsAndPlacesViewModel;
     private List<com.example.eventiapp.model.Place> placesList;
     private List<Events> placeEventsList;
@@ -80,6 +82,7 @@
 
     private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;
     private RecyclerView recyclerView;
+    private LinearLayoutManager layoutManager;
     private ProgressBar progressBar;
     private int totalItemCount; // Total number of events
     private int lastVisibleItem; // The position of the last visible event item
@@ -160,7 +163,7 @@
                     R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();
         }
         placesList = new ArrayList<com.example.eventiapp.model.Place>();
-        placeEventsList=new ArrayList<>(); //EVENTI DI UN SINGOLO LUOGO
+        placeEventsList = new ArrayList<>(); //EVENTI DI UN SINGOLO LUOGO
     }
 
     @Nullable
@@ -181,9 +184,39 @@
             mapFragment.getMapAsync(callback);
         }
 
+        layoutManager =
+                new LinearLayoutManager(requireContext(),
+                        LinearLayoutManager.HORIZONTAL, false);
+
+        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(placeEventsList,
+                requireActivity().getApplication(),
+                new EventsRecyclerViewAdapter.OnItemClickListener() {
+                    @Override
+                    public void onEventsItemClick(Events events) {
+                        //VAI AI DETTAGLI DELL'EVENTO
+                        Bundle bundle = new Bundle();
+                        bundle.putParcelable("event", events);
+                        Navigation.findNavController(requireView()
+                        ).navigate(R.id.action_mapsFragment_to_eventFragment, bundle);
+                    }
+
+                    @Override
+                    public void onExportButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onFavoriteButtonPressed(int position) {
+                        //SETTA EVENTO COME PREFERITO
+                    }
+                });
         progressBar = view.findViewById(R.id.progress_bar);
         recyclerView = view.findViewById(R.id.recyclerview_events);
 
+        recyclerView.setLayoutManager(layoutManager);
+        recyclerView.setAdapter(eventsRecyclerViewAdapter);
+
+
         eventsAndPlacesViewModel.getPlaces().observe(getViewLifecycleOwner(), result -> {
 
             if (result != null) {
@@ -273,41 +306,18 @@
 
     private void getEventsOfPlace(String id) {
         //EVENTI PRESENTI NEL LUOGO
-        LinearLayoutManager layoutManager =
-                new LinearLayoutManager(requireContext(),
-                        LinearLayoutManager.HORIZONTAL, false);
-
-        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(placeEventsList,
-                requireActivity().getApplication(),
-                new EventsRecyclerViewAdapter.OnItemClickListener() {
-                    @Override
-                    public void onEventsItemClick(Events events) {
-                        //VAI AI DETTAGLI DELL'EVENTO
-                        Bundle bundle = new Bundle();
-                        bundle.putParcelable("event", events);
-                        Navigation.findNavController(requireView()
-                        ).navigate(R.id.action_mapsFragment_to_eventFragment, bundle);
-                    }
-
-                    @Override
-                    public void onFavoriteButtonPressed(int position) {
-                        //SETTA EVENTO COME PREFERITO
-                    }
-                });
-        recyclerView.setLayoutManager(layoutManager);
-        recyclerView.setAdapter(eventsRecyclerViewAdapter);
-
 
         eventsAndPlacesViewModel.getPlaceEventsLiveData(id).observe(getViewLifecycleOwner(), result -> {
 
             if (result.isSuccess()) {
                 Log.i("SUCCESSO", "SUCCESSO");
-                placeEventsList.clear();
 
                 EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();
                 List<Events> fetchedEvents = eventsResponse.getEventsList();
 
                 if (!eventsAndPlacesViewModel.isLoading()) {
+                    eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, this.placeEventsList.size());
+                    this.placeEventsList.clear();
                     this.placeEventsList.addAll(fetchedEvents);
                     eventsRecyclerViewAdapter.notifyItemRangeInserted(0,
                             this.placeEventsList.size());
@@ -425,10 +435,9 @@
                     //SETTA FOTO LUOGO
 
                     eventsAndPlacesViewModel.getSinglePlace(idPlace).observe(getViewLifecycleOwner(), result -> {
-                        if(result!=null) {
-                            Place p = result;
+                        if (result != null) {
                             galleryPhotos.removeAllViews();
-                            PlaceDetailsSource.fetchPlacePhotos(p.getImages(), new PlaceDetailsSource.PlacePhotosListener() {
+                            PlaceDetailsSource.fetchPlacePhotos(result.getImages(), new PlaceDetailsSource.PlacePhotosListener() {
                                 @Override
                                 public void onPlacePhotosListener(Bitmap bitmap) {
                                     scrollViewImagesPlace.setVisibility(View.VISIBLE);
@@ -467,7 +476,7 @@
                                 }
                             });
 
-                            Place finalP = p;
+                            Place finalP = result;
                             callImageView.setOnClickListener(new View.OnClickListener() {
                                 @Override
                                 public void onClick(View v) {
Index: app/src/main/res/layout/fragment_search.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:background=\"#ffaa00\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ui.main.SearchFragment\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:id=\"@+id/layoutCategories\"\r\n        android:background=\"#ffaa00\"\r\n        android:layout_margin=\"10sp\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"70sp\">\r\n\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Explore\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:padding=\"10sp\"\r\n                android:textSize=\"40sp\">\r\n            </TextView>\r\n            <SearchView\r\n                android:id=\"@+id/searchView\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_alignParentRight=\"true\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:padding=\"15sp\" />\r\n\r\n        </RelativeLayout>\r\n\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:padding=\"10sp\"\r\n            android:text=\"Categories\"\r\n            android:textAllCaps=\"true\"\r\n            android:textSize=\"25sp\">\r\n\r\n        </TextView>\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:id=\"@+id/communityCV\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"20sp\"\r\n            app:cardBackgroundColor=\"#00000000\"\r\n            app:cardElevation=\"8sp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"150sp\"\r\n                android:background=\"#F94144\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"120sp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginLeft=\"20sp\"\r\n                    android:src=\"@drawable/community\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:padding=\"25sp\"\r\n                    android:text=\"COMMUNITY\"\r\n                    android:textSize=\"30sp\" />\r\n\r\n                <Button\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:layout_alignParentBottom=\"true\"\r\n                    android:background=\"#00000000\"\r\n                    android:padding=\"30sp\"\r\n                    android:text=\"Expand all\" />\r\n\r\n            </RelativeLayout>\r\n\r\n        </androidx.cardview.widget.CardView>\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:id=\"@+id/concertsCV\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"20sp\"\r\n            app:cardBackgroundColor=\"#00000000\"\r\n            app:cardElevation=\"8sp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"150sp\"\r\n                android:background=\"#E76161\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"120sp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginRight=\"20sp\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:src=\"@drawable/ic_baseline_music_note_24\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentLeft=\"true\"\r\n                    android:layout_marginLeft=\"1dp\"\r\n                    android:padding=\"25sp\"\r\n                    android:text=\"CONCERTS &amp; FESTIVALS\"\r\n                    android:textSize=\"30sp\" />\r\n\r\n                <Button\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentLeft=\"true\"\r\n                    android:layout_alignParentBottom=\"true\"\r\n                    android:background=\"#00000000\"\r\n                    android:padding=\"25sp\"\r\n                    android:text=\"Expand all\" />\r\n\r\n            </RelativeLayout>\r\n\r\n        </androidx.cardview.widget.CardView>\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:id=\"@+id/sportsCV\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"20sp\"\r\n            app:cardBackgroundColor=\"#00000000\"\r\n            app:cardElevation=\"8sp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"150sp\"\r\n                android:background=\"#F8961E\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"120sp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginLeft=\"20sp\"\r\n                    android:src=\"@drawable/ic_baseline_sports_basketball_24\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:padding=\"25sp\"\r\n                    android:text=\"SPORTS\"\r\n                    android:textSize=\"30sp\" />\r\n\r\n                <Button\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:layout_alignParentBottom=\"true\"\r\n                    android:background=\"#00000000\"\r\n                    android:padding=\"20sp\"\r\n                    android:text=\"Expand all\" />\r\n\r\n            </RelativeLayout>\r\n\r\n        </androidx.cardview.widget.CardView>\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:id=\"@+id/movieCV\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"20sp\"\r\n            app:cardBackgroundColor=\"#00000000\"\r\n            app:cardElevation=\"8sp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"150sp\"\r\n                android:background=\"#F9844A\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"120sp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginRight=\"20sp\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:src=\"@drawable/ic_baseline_movie_24\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentLeft=\"true\"\r\n                    android:padding=\"25sp\"\r\n                    android:text=\"MOVIES\"\r\n                    android:textSize=\"30sp\" />\r\n\r\n                <Button\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentLeft=\"true\"\r\n                    android:layout_alignParentBottom=\"true\"\r\n                    android:background=\"#00000000\"\r\n                    android:padding=\"20sp\"\r\n                    android:text=\"Expand all\" />\r\n\r\n            </RelativeLayout>\r\n\r\n        </androidx.cardview.widget.CardView>\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:id=\"@+id/guestCV\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"20sp\"\r\n            app:cardBackgroundColor=\"#00000000\"\r\n            app:cardElevation=\"8sp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"150sp\"\r\n                android:background=\"#F9C74F\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"120sp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginLeft=\"20sp\"\r\n                    android:src=\"@drawable/ic_baseline_person_24\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:padding=\"25sp\"\r\n                    android:text=\"GUEST \\nPROJECT\"\r\n                    android:textSize=\"30sp\" />\r\n\r\n                <Button\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:layout_alignParentBottom=\"true\"\r\n                    android:background=\"#00000000\"\r\n                    android:padding=\"20sp\"\r\n                    android:text=\"Expand all\" />\r\n\r\n            </RelativeLayout>\r\n\r\n        </androidx.cardview.widget.CardView>\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:id=\"@+id/publicCV\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"20sp\"\r\n            app:cardBackgroundColor=\"#00000000\"\r\n            app:cardElevation=\"8sp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"150sp\"\r\n                android:background=\"#90BE6D\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"120sp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginRight=\"20sp\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:src=\"@drawable/ic_baseline_public_24\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentLeft=\"true\"\r\n                    android:padding=\"25sp\"\r\n                    android:text=\"PUBLIC \\nPROGRAM\"\r\n                    android:textSize=\"30sp\" />\r\n\r\n                <Button\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentLeft=\"true\"\r\n                    android:layout_alignParentBottom=\"true\"\r\n                    android:background=\"#00000000\"\r\n                    android:padding=\"20sp\"\r\n                    android:text=\"Expand all\" />\r\n\r\n            </RelativeLayout>\r\n\r\n        </androidx.cardview.widget.CardView>\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:id=\"@+id/specialCV\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"20sp\"\r\n            app:cardBackgroundColor=\"#00000000\"\r\n            app:cardElevation=\"8sp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"150sp\"\r\n                android:background=\"#43AA8B\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"120sp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginLeft=\"20sp\"\r\n                    android:src=\"@drawable/ic_baseline_star_rate_24\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:padding=\"25sp\"\r\n                    android:text=\"SPECIAL \\nPROJECT\"\r\n                    android:textSize=\"30sp\" />\r\n\r\n                <Button\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    android:layout_alignParentBottom=\"true\"\r\n                    android:background=\"#00000000\"\r\n                    android:padding=\"20sp\"\r\n                    android:text=\"Expand all\" />\r\n\r\n            </RelativeLayout>\r\n\r\n        </androidx.cardview.widget.CardView>\r\n\r\n\r\n    </LinearLayout>\r\n\r\n</ScrollView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_search.xml b/app/src/main/res/layout/fragment_search.xml
--- a/app/src/main/res/layout/fragment_search.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/layout/fragment_search.xml	(date 1683362205424)
@@ -3,37 +3,43 @@
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
-    android:background="#ffaa00"
     android:layout_height="match_parent"
+    android:background="#ffaa00"
     tools:context=".ui.main.SearchFragment">
 
     <LinearLayout
+        android:id="@+id/layoutCategories"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:id="@+id/layoutCategories"
+        android:layout_margin="10sp"
         android:background="#ffaa00"
-        android:layout_margin="10sp"
         android:orientation="vertical">
 
         <RelativeLayout
             android:layout_width="match_parent"
-            android:layout_height="70sp">
+            android:layout_height="150sp">
+
+            <com.google.android.material.search.SearchBar
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content" />
+
+            <com.google.android.material.search.SearchView
+                android:id="@+id/searchView"
+                android:hint="Search"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:padding="15sp"
+                android:visibility="gone" />
 
             <TextView
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:text="Explore"
+                android:layout_below="@id/searchView"
+                android:layout_alignParentBottom="true"
                 android:layout_centerVertical="true"
                 android:padding="10sp"
-                android:textSize="40sp">
-            </TextView>
-            <SearchView
-                android:id="@+id/searchView"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_alignParentRight="true"
-                android:layout_centerVertical="true"
-                android:padding="15sp" />
+                android:text="Explore"
+                android:textSize="40sp" />
 
         </RelativeLayout>
 
@@ -49,6 +55,7 @@
 
         <androidx.cardview.widget.CardView
             android:id="@+id/communityCV"
+            style="?attr/materialCardViewFilledStyle"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_margin="20sp"
@@ -103,8 +110,8 @@
                 <ImageView
                     android:layout_width="120sp"
                     android:layout_height="match_parent"
-                    android:layout_marginRight="20sp"
                     android:layout_alignParentRight="true"
+                    android:layout_marginRight="20sp"
                     android:src="@drawable/ic_baseline_music_note_24" />
 
                 <TextView
@@ -185,8 +192,8 @@
                 <ImageView
                     android:layout_width="120sp"
                     android:layout_height="match_parent"
-                    android:layout_marginRight="20sp"
                     android:layout_alignParentRight="true"
+                    android:layout_marginRight="20sp"
                     android:src="@drawable/ic_baseline_movie_24" />
 
                 <TextView
@@ -266,8 +273,8 @@
                 <ImageView
                     android:layout_width="120sp"
                     android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
                     android:layout_marginRight="20sp"
-                    android:layout_alignParentRight="true"
                     android:src="@drawable/ic_baseline_public_24" />
 
                 <TextView
Index: app/src/main/java/com/example/eventiapp/source/places/PlacesLocalDataSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.places;\r\n\r\nimport static com.example.eventiapp.util.Constants.ENCRYPTED_DATA_FILE_NAME;\r\nimport static com.example.eventiapp.util.Constants.ENCRYPTED_SHARED_PREFERENCES_FILE_NAME;\r\nimport static com.example.eventiapp.util.Constants.SHARED_PREFERENCES_FILE_NAME;\r\n\r\nimport android.util.Log;\r\n\r\nimport com.example.eventiapp.database.PlaceDao;\r\nimport com.example.eventiapp.database.RoomDatabase;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.util.DataEncryptionUtil;\r\nimport com.example.eventiapp.util.SharedPreferencesUtil;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PlacesLocalDataSource extends BasePlacesLocalDataSource {\r\n\r\n    private final PlaceDao placeDao;\r\n    private final SharedPreferencesUtil sharedPreferences;\r\n    private final DataEncryptionUtil dataEncryptionUtil;\r\n\r\n    public PlacesLocalDataSource(RoomDatabase roomDatabase, SharedPreferencesUtil sharedPreferences, DataEncryptionUtil dataEncryptionUtil) {\r\n        this.placeDao = roomDatabase.placeDao();\r\n        this.sharedPreferences = sharedPreferences;\r\n        this.dataEncryptionUtil = dataEncryptionUtil;\r\n    }\r\n\r\n    @Override\r\n    public void getPlaces() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<Place> placeList = new ArrayList<>(placeDao.getAll());\r\n            placeCallback.onSuccessFromLocalP(placeList);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getFavoritePlaces() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<Place> favoritePlaces = placeDao.getFavoritePlaces();\r\n            placeCallback.onPlacesFavoriteStatusChanged(favoritePlaces);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getSinglePlace(String id) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            Place place = placeDao.getPlace(id);\r\n            placeCallback.onSingleEvent(place);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void updatePlaces(Place place) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            if (place != null) {\r\n                int rowUpdatedCounter = placeDao.updateSingleFavoritePlace(place);\r\n                if (rowUpdatedCounter == 1) {\r\n                    Place updatedPlace = placeDao.getPlace(place.getId());\r\n                    placeCallback.onPlacesFavoriteStatusChanged(updatedPlace, placeDao.getFavoritePlaces());\r\n                } else {\r\n                    placeCallback.onFailureFromLocalP(new Exception(\"ERRORE\"));\r\n                }\r\n            } else {\r\n                List<Place> allPlaces = placeDao.getAll();\r\n                for (Place p : allPlaces) {\r\n                    p.setSynchronized(false);\r\n                    placeDao.updateSingleFavoritePlace(p);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void deleteFavoritePlaces() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<Place> favoritePlaces = placeDao.getFavoritePlaces();\r\n            for (Place p : favoritePlaces) {\r\n                p.setFavorite(false);\r\n            }\r\n            int updatedRowsNumber = placeDao.updateListFavoritePlace(favoritePlaces);\r\n            if (updatedRowsNumber == favoritePlaces.size()) {\r\n                placeCallback.onDeleteFavoritePlacesSuccess(favoritePlaces);\r\n            } else {\r\n                placeCallback.onFailureFromLocalP(new Exception(\"ERRORE\"));\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void insertPlaces(List<Place> placeList) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            if (placeList != null) {\r\n                List<Place> allPlaces = placeDao.getAll();\r\n\r\n                for (Place place : allPlaces) {\r\n                    if (placeList.contains(place)) {\r\n                        place.setSynchronized(true);\r\n                        placeList.set(placeList.indexOf(place), place);\r\n                    }\r\n                }\r\n\r\n                placeDao.insertPlacesList(placeList);\r\n                placeCallback.onSuccessFromLocalP(placeList);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void deleteAll() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            int placesCounter = placeDao.getAll().size();\r\n            int deletedPlaces = placeDao.deleteAll();\r\n\r\n            Log.i(\"POSTI CANCELLATI:\", String.valueOf(placesCounter));\r\n            if (placesCounter == deletedPlaces) {\r\n                sharedPreferences.deleteAll(SHARED_PREFERENCES_FILE_NAME);\r\n                dataEncryptionUtil.deleteAll(ENCRYPTED_SHARED_PREFERENCES_FILE_NAME, ENCRYPTED_DATA_FILE_NAME);\r\n                placeCallback.onSuccessDeletionP();\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/places/PlacesLocalDataSource.java b/app/src/main/java/com/example/eventiapp/source/places/PlacesLocalDataSource.java
--- a/app/src/main/java/com/example/eventiapp/source/places/PlacesLocalDataSource.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/source/places/PlacesLocalDataSource.java	(date 1683622511167)
@@ -49,7 +49,15 @@
     public void getSinglePlace(String id) {
         RoomDatabase.databaseWriteExecutor.execute(() -> {
             Place place = placeDao.getPlace(id);
-            placeCallback.onSingleEvent(place);
+            placeCallback.onSinglePlace(place);
+        });
+    }
+
+    @Override
+    public void getSinglePlaceByName(String name) {
+        RoomDatabase.databaseWriteExecutor.execute(() -> {
+            Place place = placeDao.getPlaceByName(name);
+            placeCallback.onSinglePlace(place);
         });
     }
 
Index: app/src/main/java/com/example/eventiapp/source/places/PlaceCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.places;\r\n\r\nimport com.example.eventiapp.model.Place;\r\n\r\nimport java.util.List;\r\n\r\npublic interface PlaceCallback {\r\n    void onSuccessFromLocalP(List<Place> placeList);\r\n    void onFailureFromLocalP(Exception exception);\r\n    void onSingleEvent(Place place);\r\n    void onPlacesFavoriteStatusChanged(Place place, List<Place> favoritePlaces);\r\n    void onPlacesFavoriteStatusChanged(List<Place> placeList);\r\n    void onDeleteFavoritePlacesSuccess(List<Place> favoritePlaces);\r\n    void onSuccessSynchronizationP();\r\n    void onSuccessDeletionP();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/places/PlaceCallback.java b/app/src/main/java/com/example/eventiapp/source/places/PlaceCallback.java
--- a/app/src/main/java/com/example/eventiapp/source/places/PlaceCallback.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/source/places/PlaceCallback.java	(date 1683622463543)
@@ -7,7 +7,7 @@
 public interface PlaceCallback {
     void onSuccessFromLocalP(List<Place> placeList);
     void onFailureFromLocalP(Exception exception);
-    void onSingleEvent(Place place);
+    void onSinglePlace(Place place);
     void onPlacesFavoriteStatusChanged(Place place, List<Place> favoritePlaces);
     void onPlacesFavoriteStatusChanged(List<Place> placeList);
     void onDeleteFavoritePlacesSuccess(List<Place> favoritePlaces);
Index: app/src/main/java/com/example/eventiapp/repository/places/PlacesRepositoryWithLiveData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.repository.places;\r\n\r\nimport android.util.Log;\r\n\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.source.places.BasePlacesLocalDataSource;\r\nimport com.example.eventiapp.source.places.PlaceCallback;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class PlacesRepositoryWithLiveData implements IPlacesRepositoryWithLiveData, PlaceCallback { //NON SERVE\r\n\r\n    private static final String TAG = PlacesRepositoryWithLiveData.class.getSimpleName();\r\n\r\n    private final MutableLiveData<List<Place>> allPlacesMutableLiveData;\r\n    private final MutableLiveData<List<Place>> favoritePlacesMutableLiveData;\r\n    private final MutableLiveData<Place> singlePlaceMutableLiveData;\r\n    private BasePlacesLocalDataSource placesLocalDataSource;\r\n\r\n    public PlacesRepositoryWithLiveData(BasePlacesLocalDataSource placesLocalDataSource) {\r\n        allPlacesMutableLiveData = new MutableLiveData<>();\r\n        favoritePlacesMutableLiveData = new MutableLiveData<>();\r\n        singlePlaceMutableLiveData = new MutableLiveData<>();\r\n        this.placesLocalDataSource = placesLocalDataSource;\r\n        this.placesLocalDataSource.setPlacesCallback(this);\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<Place>> fetchPlaces() {\r\n        placesLocalDataSource.getPlaces();\r\n        return allPlacesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<Place>> getFavoritePlaces(boolean isFirstLoading) {\r\n        if (isFirstLoading) {\r\n            //PRENDE I BACKUP\r\n        } else {\r\n            placesLocalDataSource.getFavoritePlaces();\r\n        }\r\n        return favoritePlacesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Place> getSinglePlace(String id) {\r\n        placesLocalDataSource.getSinglePlace(id);\r\n        return singlePlaceMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromLocalP(List<Place> placeList) {\r\n        if (allPlacesMutableLiveData.getValue() != null) {\r\n            allPlacesMutableLiveData.postValue(placeList);\r\n        } else {\r\n            allPlacesMutableLiveData.postValue(Collections.emptyList());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onFailureFromLocalP(Exception exception) {\r\n        exception.getMessage();\r\n    }\r\n\r\n    @Override\r\n    public void onSingleEvent(Place place) {\r\n        singlePlaceMutableLiveData.postValue(place);\r\n    }\r\n\r\n    @Override\r\n    public void onPlacesFavoriteStatusChanged(Place place, List<Place> favoritePlaces) {\r\n        List<Place> allPlaces = allPlacesMutableLiveData.getValue();\r\n        if (allPlaces != null) {\r\n            List<Place> oldAllPlaces = allPlaces;\r\n            if (oldAllPlaces.contains(place)) {\r\n                oldAllPlaces.set(oldAllPlaces.indexOf(place), place);\r\n                allPlacesMutableLiveData.postValue(allPlaces);\r\n            }\r\n        }\r\n        favoritePlacesMutableLiveData.postValue(favoritePlaces);\r\n    }\r\n\r\n    @Override\r\n    public void onPlacesFavoriteStatusChanged(List<Place> placeList) {\r\n        List<Place> notSynchronizedPlacesList = new ArrayList<>();\r\n\r\n        for (Place p : placeList) {\r\n            if (!p.isSynchronized()) {\r\n                notSynchronizedPlacesList.add(p);\r\n            }\r\n        }\r\n\r\n        if (!notSynchronizedPlacesList.isEmpty()) {\r\n            //BACKUP\r\n        }\r\n\r\n        favoritePlacesMutableLiveData.postValue(placeList);\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteFavoritePlacesSuccess(List<Place> favoritePlaces) {\r\n        List<Place> allPlaces = allPlacesMutableLiveData.getValue();\r\n\r\n        if (allPlaces != null) {\r\n            List<Place> oldAllPlaces = allPlaces;\r\n            for (Place p : favoritePlaces) {\r\n                if (oldAllPlaces.contains(p)) {\r\n                    oldAllPlaces.set(oldAllPlaces.indexOf(p), p);\r\n                }\r\n            }\r\n            allPlacesMutableLiveData.postValue(allPlaces);\r\n        }\r\n\r\n        if (favoritePlacesMutableLiveData.getValue() != null) {\r\n            favoritePlaces.clear();\r\n            favoritePlacesMutableLiveData.postValue(favoritePlaces);\r\n        }\r\n\r\n        //backupDataSource.deleteAllFavoriteNews();\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessSynchronizationP() {\r\n        Log.d(TAG, \"Places synchronized from remote\");\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessDeletionP() {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/repository/places/PlacesRepositoryWithLiveData.java b/app/src/main/java/com/example/eventiapp/repository/places/PlacesRepositoryWithLiveData.java
--- a/app/src/main/java/com/example/eventiapp/repository/places/PlacesRepositoryWithLiveData.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/repository/places/PlacesRepositoryWithLiveData.java	(date 1683622511179)
@@ -66,10 +66,11 @@
     }
 
     @Override
-    public void onSingleEvent(Place place) {
+    public void onSinglePlace(Place place) {
         singlePlaceMutableLiveData.postValue(place);
     }
 
+
     @Override
     public void onPlacesFavoriteStatusChanged(Place place, List<Place> favoritePlaces) {
         List<Place> allPlaces = allPlacesMutableLiveData.getValue();
Index: app/src/main/java/com/example/eventiapp/source/places/BasePlacesLocalDataSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.places;\r\n\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.source.events.EventsCallback;\r\n\r\nimport java.util.List;\r\n\r\npublic abstract class BasePlacesLocalDataSource {\r\n    protected PlaceCallback placeCallback;\r\n\r\n    public void setPlacesCallback(PlaceCallback placeCallback) {\r\n        this.placeCallback = placeCallback;\r\n    }\r\n\r\n    public abstract void getPlaces();\r\n\r\n    public abstract void getFavoritePlaces();\r\n\r\n    public abstract void getSinglePlace(String id);\r\n\r\n    public abstract void updatePlaces(Place place);\r\n\r\n    public abstract void deleteFavoritePlaces();\r\n\r\n    public abstract void insertPlaces(List<Place> placeList);\r\n\r\n    public abstract void deleteAll();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/places/BasePlacesLocalDataSource.java b/app/src/main/java/com/example/eventiapp/source/places/BasePlacesLocalDataSource.java
--- a/app/src/main/java/com/example/eventiapp/source/places/BasePlacesLocalDataSource.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/source/places/BasePlacesLocalDataSource.java	(date 1683622463450)
@@ -18,6 +18,8 @@
 
     public abstract void getSinglePlace(String id);
 
+    public abstract void getSinglePlaceByName(String name);
+
     public abstract void updatePlaces(Place place);
 
     public abstract void deleteFavoritePlaces();
Index: app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.adapter;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_VIEW_TYPE;\r\nimport static com.example.eventiapp.util.Constants.LOADING_VIEW_TYPE;\r\n\r\nimport android.app.Application;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.content.res.AppCompatResources;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.util.DateTimeUtil;\r\n\r\nimport java.util.List;\r\n\r\npublic class EventsRecyclerViewAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\r\n\r\n    public interface OnItemClickListener {\r\n        void onEventsItemClick(Events events);\r\n\r\n        void onFavoriteButtonPressed(int position);\r\n    }\r\n\r\n    private final List<Events> eventsList;\r\n    private final Application application;\r\n    private final OnItemClickListener onItemClickListener;\r\n\r\n    public EventsRecyclerViewAdapter(List<Events> eventsList, Application application,\r\n                                     OnItemClickListener onItemClickListener) {\r\n        this.eventsList = eventsList;\r\n        this.application = application;\r\n        this.onItemClickListener = onItemClickListener;\r\n    }\r\n\r\n\r\n    @Override\r\n    public int getItemViewType(int position) {\r\n        if (eventsList.get(position) == null) {\r\n            return LOADING_VIEW_TYPE;\r\n        } else {\r\n            return EVENTS_VIEW_TYPE;\r\n        }\r\n    }\r\n\r\n\r\n    @NonNull\r\n    @Override\r\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = null;\r\n\r\n        if (viewType == EVENTS_VIEW_TYPE) {\r\n            view = LayoutInflater.from(parent.getContext()).\r\n                    inflate(R.layout.events_list_item, parent, false);\r\n            return new EventsViewHolder(view);\r\n        } else {\r\n            view = LayoutInflater.from(parent.getContext()).\r\n                    inflate(R.layout.events_loading_item, parent, false);\r\n            return new LoadingEventsViewHolder(view);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n        if (holder instanceof EventsViewHolder) {\r\n            ((EventsViewHolder) holder).bind(eventsList.get(position));\r\n        } else if (holder instanceof LoadingEventsViewHolder) {\r\n            ((LoadingEventsViewHolder) holder).activate();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (eventsList != null) {\r\n            return eventsList.size();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public class EventsViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\r\n\r\n        private TextView textViewTitle;\r\n        private TextView textViewDate;\r\n        private TextView textViewCategory;\r\n        private ImageView imageViewFavoriteEvent;\r\n\r\n        public EventsViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            textViewTitle = itemView.findViewById(R.id.textview_title);\r\n            textViewDate = itemView.findViewById(R.id.textview_date);\r\n            textViewCategory = itemView.findViewById(R.id.textview_category);\r\n            imageViewFavoriteEvent = itemView.findViewById(R.id.imageview_favorite_event);\r\n            itemView.setOnClickListener(this);\r\n            //imageViewFavoriteEvent.setOnClickListener(this);\r\n        }\r\n\r\n        public void bind(Events events) {\r\n            textViewTitle.setText(events.getTitle());\r\n            //EVENTI UCI ED EVENTI PIRELLI HANGAR NON HANNO FINE DATA\r\n            if (events.getEnd() != null) {\r\n                String fromTO = DateTimeUtil.getDate(events.getStart()) + \" - \" + DateTimeUtil.getDate(events.getStart());\r\n                textViewDate.setText(fromTO);\r\n            } else {\r\n                textViewDate.setText(events.getStart());\r\n            }\r\n            textViewCategory.setText(events.getCategory());\r\n            //setImageViewFavoriteEvent(eventsList.get(getAdapterPosition()).isFavorite());\r\n        }\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (v.getId() == R.id.imageview_favorite_event) {\r\n                //setImageViewFavoriteEvent(!eventsList.get(getAdapterPosition()).isFavorite());\r\n                onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());\r\n            } else {\r\n                onItemClickListener.onEventsItemClick(eventsList.get(getAdapterPosition()));\r\n            }\r\n        }\r\n\r\n        private void setImageViewFavoriteEvent(boolean isFavorite) {\r\n            if (isFavorite) {\r\n                imageViewFavoriteEvent.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_24));\r\n            } else {\r\n                imageViewFavoriteEvent.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_border_24));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public static class LoadingEventsViewHolder extends RecyclerView.ViewHolder {\r\n        private final ProgressBar progressBar;\r\n\r\n        LoadingEventsViewHolder(View view) {\r\n            super(view);\r\n            progressBar = view.findViewById(R.id.progressbar_loading_event);\r\n        }\r\n\r\n        public void activate() {\r\n            progressBar.setIndeterminate(true);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java b/app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java
--- a/app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java	(date 1683620594239)
@@ -18,6 +18,7 @@
 import com.example.eventiapp.R;
 import com.example.eventiapp.model.Events;
 import com.example.eventiapp.util.DateTimeUtil;
+import com.google.android.material.button.MaterialButton;
 
 import java.util.List;
 
@@ -26,6 +27,8 @@
     public interface OnItemClickListener {
         void onEventsItemClick(Events events);
 
+        void onExportButtonPressed(Events events);
+
         void onFavoriteButtonPressed(int position);
     }
 
@@ -90,6 +93,7 @@
         private TextView textViewDate;
         private TextView textViewCategory;
         private ImageView imageViewFavoriteEvent;
+        private MaterialButton exportButton;
 
         public EventsViewHolder(@NonNull View itemView) {
             super(itemView);
@@ -97,7 +101,9 @@
             textViewDate = itemView.findViewById(R.id.textview_date);
             textViewCategory = itemView.findViewById(R.id.textview_category);
             imageViewFavoriteEvent = itemView.findViewById(R.id.imageview_favorite_event);
+            exportButton = itemView.findViewById(R.id.buttonExport);
             itemView.setOnClickListener(this);
+            exportButton.setOnClickListener(this);
             //imageViewFavoriteEvent.setOnClickListener(this);
         }
 
@@ -119,6 +125,8 @@
             if (v.getId() == R.id.imageview_favorite_event) {
                 //setImageViewFavoriteEvent(!eventsList.get(getAdapterPosition()).isFavorite());
                 onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());
+            } else if (v.getId() == R.id.buttonExport) {
+                onItemClickListener.onExportButtonPressed(eventsList.get(getAdapterPosition()));
             } else {
                 onItemClickListener.onEventsItemClick(eventsList.get(getAdapterPosition()));
             }
Index: app/src/main/java/com/example/eventiapp/ui/main/PlaceFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\nimport static com.example.eventiapp.util.Constants.EVENTS_VIEW_TYPE;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.Lifecycle;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavBackStackEntry;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.source.google.PlaceDetailsSource;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.MapView;\r\nimport com.google.android.gms.maps.MapsInitializer;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.model.CameraPosition;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\n\r\npublic class PlaceFragment extends Fragment {\r\n\r\n    private com.example.eventiapp.databinding.FragmentSinglePlaceBinding fragmentSinglePlaceBinding;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    private LayoutInflater inflater;\r\n\r\n    MapView mMapView;\r\n    private GoogleMap googleMap;\r\n\r\n    private List<Events> eventsList;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    public PlaceFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static PlaceFragment newInstance() {\r\n        return new PlaceFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        eventsAndPlacesViewModel =new ViewModelProvider(requireActivity()).get(EventsAndPlacesViewModel.class);\r\n        eventsList = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentSinglePlaceBinding = com.example.eventiapp.databinding.FragmentSinglePlaceBinding.inflate(inflater, container, false);\r\n        return fragmentSinglePlaceBinding.getRoot();\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.TIRAMISU)\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        inflater = LayoutInflater.from(getContext());\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                if (menuItem.getItemId() == android.R.id.home) {\r\n                    Navigation.findNavController(requireView()).navigateUp();\r\n                }\r\n                return false;\r\n            }\r\n        }, getViewLifecycleOwner(), Lifecycle.State.RESUMED);\r\n\r\n        Place place = getArguments().getParcelable(\"place\", Place.class);\r\n\r\n        PlaceDetailsSource.fetchPlacePhotos(place.getImages(), new PlaceDetailsSource.PlacePhotosListener() {\r\n            @Override\r\n            public void onPlacePhotosListener(Bitmap bitmap) {\r\n                fragmentSinglePlaceBinding.scrollViewImagesPlace.setVisibility(View.VISIBLE);\r\n                if (bitmap != null) {\r\n                    View viewPlacePhoto = inflater.inflate(R.layout.item_place_photo_maps, fragmentSinglePlaceBinding.galleryPhotos, false);\r\n                    ImageView imagePlace = viewPlacePhoto.findViewById(R.id.imagePlace);\r\n                    imagePlace.setMaxHeight(300);\r\n                    imagePlace.setMaxWidth(300);\r\n                    imagePlace.setImageBitmap(bitmap);\r\n                    fragmentSinglePlaceBinding.galleryPhotos.addView(viewPlacePhoto);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(String message) {\r\n                Log.i(\"ERROR\", message);\r\n            }\r\n        });\r\n\r\n        fragmentSinglePlaceBinding.placeName.setText(place.getName());\r\n        fragmentSinglePlaceBinding.placeType.setText(place.getType());\r\n        fragmentSinglePlaceBinding.placeAddress.setText(place.getAddress());\r\n        fragmentSinglePlaceBinding.placePhoneNumber.setText(place.getPhoneNumber());\r\n\r\n        //GOOGLE MAPS\r\n        mMapView=view.findViewById(R.id.mapView);\r\n        mMapView.onCreate(savedInstanceState);\r\n        mMapView.onResume();\r\n\r\n        try {\r\n            MapsInitializer.initialize(getActivity().getApplicationContext());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        mMapView.getMapAsync(new OnMapReadyCallback() {\r\n            @Override\r\n            public void onMapReady(GoogleMap mMap) {\r\n                googleMap = mMap;\r\n\r\n                // For dropping a marker at a point on the Map\r\n                double[] location = place.getCoordinates();\r\n                LatLng latLng=new LatLng(location[0], location[1]);\r\n                googleMap.addMarker(new MarkerOptions().position(latLng).title(place.getName()).snippet(place.getAddress()));\r\n                googleMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\r\n                    @Override\r\n                    public boolean onMarkerClick(@NonNull Marker marker) {\r\n                        LatLng position = marker.getPosition();\r\n                        googleMap.moveCamera(CameraUpdateFactory.newLatLng(position));\r\n                        googleMap.getMaxZoomLevel();\r\n                        marker.showInfoWindow();\r\n\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                googleMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {\r\n                    @Override\r\n                    public void onMapClick(@NonNull LatLng latLng) {\r\n                        String uri = String.format(Locale.ENGLISH, \"geo:%f,%f\", latLng.latitude, latLng.longitude);\r\n                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\r\n                        startActivity(intent);\r\n                    }\r\n                });\r\n\r\n                // For zooming automatically to the location of the marker\r\n                CameraPosition cameraPosition = new CameraPosition.Builder().target(latLng).zoom(15).build();\r\n                googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));\r\n            }\r\n        });\r\n\r\n\r\n\r\n        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_events);\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(),\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(view).navigate(R.id.action_placeFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        String lastUpdate = \"0\";\r\n        String id=place.getId();\r\n        fragmentSinglePlaceBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n        eventsAndPlacesViewModel.getPlaceEventsLiveData(id).observe(getViewLifecycleOwner(), result -> {\r\n          if(result!=null) {\r\n              if (result.isSuccess()) {\r\n                  Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n                  eventsList.clear();\r\n                  EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                  List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n                  if (!eventsAndPlacesViewModel.isLoading()) {\r\n                      if(eventsAndPlacesViewModel.isFirstLoading()) {\r\n                          eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());\r\n                          eventsAndPlacesViewModel.setFirstLoading(false);\r\n                          this.eventsList.addAll(fetchedEvents);\r\n                          eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                                  this.eventsList.size());\r\n                      }else{\r\n                          eventsList.clear();\r\n                          eventsList.addAll(fetchedEvents);\r\n                          eventsRecyclerViewAdapter.notifyItemChanged(0,fetchedEvents.size());\r\n                      }\r\n                      fragmentSinglePlaceBinding.progressBar.setVisibility(View.GONE);\r\n                      fragmentSinglePlaceBinding.numberEventsButton.setVisibility(View.VISIBLE);\r\n                      fragmentSinglePlaceBinding.numberEventsButton.setText(Integer.toString(eventsList.size()));\r\n\r\n                  } else {\r\n                      eventsAndPlacesViewModel.setLoading(false);\r\n                      eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                      int initialSize = eventsList.size();\r\n\r\n                      for (int i = 0; i < eventsList.size(); i++) {\r\n                          if (eventsList.get(i) == null) {\r\n                              eventsList.remove(eventsList.get(i));\r\n                          }\r\n                      }\r\n                      int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                              EVENTS_PAGE_SIZE_VALUE;\r\n                      for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                          eventsList.add(fetchedEvents.get(i));\r\n                      }\r\n                      eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n                  }\r\n              } else {\r\n                  Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                  ErrorMessageUtil errorMessagesUtil =\r\n                          new ErrorMessageUtil(requireActivity().getApplication());\r\n                  Snackbar.make(view, errorMessagesUtil.\r\n                                  getErrorMessage(((Result.Error) result).getMessage()),\r\n                          Snackbar.LENGTH_SHORT).show();\r\n                  fragmentSinglePlaceBinding.progressBar.setVisibility(View.GONE);\r\n              }\r\n          }else{\r\n              //NON CI SONO EVENTI IN QUEL LOCALE\r\n          }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getPlaceEventsLiveData(id).getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<Result> eventsListMutableLiveData = eventsAndPlacesViewModel.getPlaceEventsLiveData(id);\r\n\r\n                        if (eventsListMutableLiveData.getValue() != null &&\r\n                                eventsListMutableLiveData.getValue().isSuccess()) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            eventsList.add(null);\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(eventsList.size(),\r\n                                    eventsList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.getPlaceEventsLiveData(id);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        NavBackStackEntry navBackStackEntry = Navigation.\r\n                findNavController(view).getPreviousBackStackEntry();\r\n\r\n        if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.homeFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.homeFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.myEventsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.myEventsFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.mapsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.mapsFragment).setChecked(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n        mMapView.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentSinglePlaceBinding = null;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        mMapView.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        mMapView.onPause();\r\n    }\r\n\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/PlaceFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/PlaceFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/PlaceFragment.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/PlaceFragment.java	(date 1683626120150)
@@ -91,7 +91,7 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        eventsAndPlacesViewModel =new ViewModelProvider(requireActivity()).get(EventsAndPlacesViewModel.class);
+        eventsAndPlacesViewModel = new ViewModelProvider(requireActivity()).get(EventsAndPlacesViewModel.class);
         eventsList = new ArrayList<>();
     }
 
@@ -149,7 +149,7 @@
         fragmentSinglePlaceBinding.placePhoneNumber.setText(place.getPhoneNumber());
 
         //GOOGLE MAPS
-        mMapView=view.findViewById(R.id.mapView);
+        mMapView = view.findViewById(R.id.mapView);
         mMapView.onCreate(savedInstanceState);
         mMapView.onResume();
 
@@ -166,7 +166,7 @@
 
                 // For dropping a marker at a point on the Map
                 double[] location = place.getCoordinates();
-                LatLng latLng=new LatLng(location[0], location[1]);
+                LatLng latLng = new LatLng(location[0], location[1]);
                 googleMap.addMarker(new MarkerOptions().position(latLng).title(place.getName()).snippet(place.getAddress()));
                 googleMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {
                     @Override
@@ -196,7 +196,6 @@
         });
 
 
-
         RecyclerView recyclerView = view.findViewById(R.id.recyclerview_events);
         LinearLayoutManager layoutManager =
                 new LinearLayoutManager(requireContext(),
@@ -213,6 +212,11 @@
                         Navigation.findNavController(view).navigate(R.id.action_placeFragment_to_eventFragment, bundle);
                     }
 
+                    @Override
+                    public void onExportButtonPressed(Events events) {
+
+                    }
+
 
                     @Override
                     public void onFavoriteButtonPressed(int position) {
@@ -223,65 +227,58 @@
         recyclerView.setAdapter(eventsRecyclerViewAdapter);
 
         String lastUpdate = "0";
-        String id=place.getId();
+        String id = place.getId();
         fragmentSinglePlaceBinding.progressBar.setVisibility(View.VISIBLE);
 
         eventsAndPlacesViewModel.getPlaceEventsLiveData(id).observe(getViewLifecycleOwner(), result -> {
-          if(result!=null) {
-              if (result.isSuccess()) {
-                  Log.i("SUCCESSO", "SUCCESSO");
+            if (result != null) {
+                if (result.isSuccess()) {
+                    Log.i("SUCCESSO", "SUCCESSO");
 
-                  eventsList.clear();
-                  EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();
-                  List<Events> fetchedEvents = eventsResponse.getEventsList();
+                    eventsList.clear();
+                    EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();
+                    List<Events> fetchedEvents = eventsResponse.getEventsList();
 
-                  if (!eventsAndPlacesViewModel.isLoading()) {
-                      if(eventsAndPlacesViewModel.isFirstLoading()) {
-                          eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());
-                          eventsAndPlacesViewModel.setFirstLoading(false);
-                          this.eventsList.addAll(fetchedEvents);
-                          eventsRecyclerViewAdapter.notifyItemRangeInserted(0,
-                                  this.eventsList.size());
-                      }else{
-                          eventsList.clear();
-                          eventsList.addAll(fetchedEvents);
-                          eventsRecyclerViewAdapter.notifyItemChanged(0,fetchedEvents.size());
-                      }
-                      fragmentSinglePlaceBinding.progressBar.setVisibility(View.GONE);
-                      fragmentSinglePlaceBinding.numberEventsButton.setVisibility(View.VISIBLE);
-                      fragmentSinglePlaceBinding.numberEventsButton.setText(Integer.toString(eventsList.size()));
+                    if (!eventsAndPlacesViewModel.isLoading()) {
+                        eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, this.eventsList.size());
+                        this.eventsList.clear();
+                        this.eventsList.addAll(fetchedEvents);
+                        eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());
+                        fragmentSinglePlaceBinding.progressBar.setVisibility(View.GONE);
+                        fragmentSinglePlaceBinding.numberEventsButton.setVisibility(View.VISIBLE);
+                        fragmentSinglePlaceBinding.numberEventsButton.setText(Integer.toString(eventsList.size()));
 
-                  } else {
-                      eventsAndPlacesViewModel.setLoading(false);
-                      eventsAndPlacesViewModel.setCurrentResults(eventsList.size());
+                    } else {
+                        eventsAndPlacesViewModel.setLoading(false);
+                        eventsAndPlacesViewModel.setCurrentResults(eventsList.size());
 
-                      int initialSize = eventsList.size();
+                        int initialSize = eventsList.size();
 
-                      for (int i = 0; i < eventsList.size(); i++) {
-                          if (eventsList.get(i) == null) {
-                              eventsList.remove(eventsList.get(i));
-                          }
-                      }
-                      int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -
-                              EVENTS_PAGE_SIZE_VALUE;
-                      for (int i = startIndex; i < fetchedEvents.size(); i++) {
-                          eventsList.add(fetchedEvents.get(i));
-                      }
-                      eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());
-                  }
-              } else {
-                  Log.i("FALLITO", "FALLITO");
+                        for (int i = 0; i < eventsList.size(); i++) {
+                            if (eventsList.get(i) == null) {
+                                eventsList.remove(eventsList.get(i));
+                            }
+                        }
+                        int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -
+                                EVENTS_PAGE_SIZE_VALUE;
+                        for (int i = startIndex; i < fetchedEvents.size(); i++) {
+                            eventsList.add(fetchedEvents.get(i));
+                        }
+                        eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());
+                    }
+                } else {
+                    Log.i("FALLITO", "FALLITO");
 
-                  ErrorMessageUtil errorMessagesUtil =
-                          new ErrorMessageUtil(requireActivity().getApplication());
-                  Snackbar.make(view, errorMessagesUtil.
-                                  getErrorMessage(((Result.Error) result).getMessage()),
-                          Snackbar.LENGTH_SHORT).show();
-                  fragmentSinglePlaceBinding.progressBar.setVisibility(View.GONE);
-              }
-          }else{
-              //NON CI SONO EVENTI IN QUEL LOCALE
-          }
+                    ErrorMessageUtil errorMessagesUtil =
+                            new ErrorMessageUtil(requireActivity().getApplication());
+                    Snackbar.make(view, errorMessagesUtil.
+                                    getErrorMessage(((Result.Error) result).getMessage()),
+                            Snackbar.LENGTH_SHORT).show();
+                    fragmentSinglePlaceBinding.progressBar.setVisibility(View.GONE);
+                }
+            } else {
+                //NON CI SONO EVENTI IN QUEL LOCALE
+            }
         });
 
         recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
@@ -328,18 +325,25 @@
                 findNavController(view).getPreviousBackStackEntry();
 
         if (navBackStackEntry != null &&
-                navBackStackEntry.getDestination().getId() == R.id.homeFragment) {
+                navBackStackEntry.getDestination().
+
+                        getId() == R.id.homeFragment) {
             ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).
                     getMenu().findItem(R.id.homeFragment).setChecked(true);
         } else if (navBackStackEntry != null &&
-                navBackStackEntry.getDestination().getId() == R.id.myEventsFragment) {
+                navBackStackEntry.getDestination().
+
+                        getId() == R.id.myEventsFragment) {
             ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).
                     getMenu().findItem(R.id.myEventsFragment).setChecked(true);
         } else if (navBackStackEntry != null &&
-                navBackStackEntry.getDestination().getId() == R.id.mapsFragment) {
+                navBackStackEntry.getDestination().
+
+                        getId() == R.id.mapsFragment) {
             ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).
                     getMenu().findItem(R.id.mapsFragment).setChecked(true);
         }
+
     }
 
     @Override
@@ -369,7 +373,6 @@
     }
 
 
-
     private boolean isConnected() {
         ConnectivityManager cm =
                 (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
Index: app/src/main/java/com/example/eventiapp/source/events/EventsCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.events;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\n\r\nimport java.util.List;\r\n\r\npublic interface EventsCallback {\r\n    void onSuccessFromRemote(EventsApiResponse eventsApiResponse, long lastUpdate);\r\n    void onFailureFromRemote(Exception exception);\r\n    void onSuccessFromLocal(EventsApiResponse eventsApiResponse);\r\n    void onFailureFromLocal(Exception exception);\r\n    void onEventsCategory(List<Events> events);\r\n    void onEventsPlace(List <Events> events);\r\n    void onSingleEvent(Events event);\r\n    void onEventsDates(List<String> dates);\r\n    void onMoviesHours(String[] hours);\r\n    void onEventsFavoriteStatusChanged(Events events, List<Events> favoriteEvents);\r\n    void onEventsFavoriteStatusChanged(List<Events> events);\r\n    void onDeleteFavoriteEventsSuccess(List<Events> favoriteEvents);\r\n    void onCount(int count);\r\n    void onSuccessFromCloudReading(List<Events> eventsList);\r\n    void onSuccessFromCloudWriting(Events events);\r\n    void onFailureFromCloud(Exception exception);\r\n    void onSuccessSynchronization();\r\n    void onSuccessDeletion();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/events/EventsCallback.java b/app/src/main/java/com/example/eventiapp/source/events/EventsCallback.java
--- a/app/src/main/java/com/example/eventiapp/source/events/EventsCallback.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/source/events/EventsCallback.java	(date 1683538557931)
@@ -7,21 +7,48 @@
 
 public interface EventsCallback {
     void onSuccessFromRemote(EventsApiResponse eventsApiResponse, long lastUpdate);
+
     void onFailureFromRemote(Exception exception);
+
     void onSuccessFromLocal(EventsApiResponse eventsApiResponse);
+
     void onFailureFromLocal(Exception exception);
+
     void onEventsCategory(List<Events> events);
-    void onEventsPlace(List <Events> events);
+
+    void onEventsPlace(List<Events> events);
+
     void onSingleEvent(Events event);
+
+    void onEventsInADate(List<Events> events);
+
     void onEventsDates(List<String> dates);
+
     void onMoviesHours(String[] hours);
+
     void onEventsFavoriteStatusChanged(Events events, List<Events> favoriteEvents);
+
     void onEventsFavoriteStatusChanged(List<Events> events);
+
     void onDeleteFavoriteEventsSuccess(List<Events> favoriteEvents);
+
     void onCount(int count);
+
+    void onAllCategories(List<String> categories);
+
+    void onCategoriesEvents(List<Events> events);
+
+    void onEventsBetweenDates(List<Events> events);
+
+    void onCategoryEventsBetweenDates(List<Events> events);
+
     void onSuccessFromCloudReading(List<Events> eventsList);
+
     void onSuccessFromCloudWriting(Events events);
+
     void onFailureFromCloud(Exception exception);
+
     void onSuccessSynchronization();
+
     void onSuccessDeletion();
 }
Index: app/src/main/res/layout/events_list_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\r\n<com.google.android.material.card.MaterialCardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:id=\"@+id/card\"\r\n    style=\"?attr/materialCardViewElevatedStyle\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_margin=\"8dp\"\r\n    android:checkable=\"true\"\r\n    android:clickable=\"true\"\r\n    android:focusable=\"true\"\r\n    app:cardElevation=\"5dp\"\r\n    app:shapeAppearance=\"?attr/shapeAppearanceMediumComponent\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\"\r\n            android:padding=\"16dp\">\r\n\r\n            <!-- Title, secondary and supporting text -->\r\n            <TextView\r\n                android:id=\"@+id/textview_title\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"TITLE\"\r\n                android:textAppearance=\"?attr/textAppearanceTitleMedium\"\r\n                android:textSize=\"30sp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/textview_category\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"16dp\"\r\n                android:text=\"CATEGORY\"\r\n                android:textAppearance=\"?attr/textAppearanceBodyMedium\"\r\n                android:textColor=\"?android:attr/textColorSecondary\"\r\n                android:textSize=\"25sp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/textview_date\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"8dp\"\r\n                android:text=\"DATE\"\r\n                android:textAppearance=\"?attr/textAppearanceBodyMedium\"\r\n                android:textColor=\"?android:attr/textColorSecondary\"\r\n                android:textSize=\"20sp\" />\r\n\r\n\r\n        </LinearLayout>\r\n\r\n        <!-- Buttons -->\r\n        <LinearLayout\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginLeft=\"60sp\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <com.google.android.material.button.MaterialButton\r\n                style=\"?attr/materialButtonStyle\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"AGGIUNGI AI \\nPREFERITI\" />\r\n\r\n            <com.google.android.material.button.MaterialButton\r\n                style=\"?attr/materialIconButtonStyle\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginLeft=\"10sp\"\r\n                android:text=\"ESPORTA SU \\nCALENDARIO\" />\r\n        </LinearLayout>\r\n\r\n\r\n        <ImageView\r\n            android:id=\"@+id/imageview_favorite_event\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginEnd=\"8dp\"\r\n            android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n            android:contentDescription=\"@string/content_description_fav_addition\"\r\n            android:focusable=\"true\"\r\n            android:padding=\"12dp\"\r\n            android:src=\"@drawable/ic_baseline_favorite_border_24\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/textview_date\" />\r\n\r\n    </LinearLayout>\r\n</com.google.android.material.card.MaterialCardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/events_list_item.xml b/app/src/main/res/layout/events_list_item.xml
--- a/app/src/main/res/layout/events_list_item.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/layout/events_list_item.xml	(date 1683619833988)
@@ -66,12 +66,14 @@
 
             <com.google.android.material.button.MaterialButton
                 style="?attr/materialButtonStyle"
+                android:id="@+id/buttonFavorite"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:text="AGGIUNGI AI \nPREFERITI" />
 
             <com.google.android.material.button.MaterialButton
                 style="?attr/materialIconButtonStyle"
+                android:id="@+id/buttonExport"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:layout_marginLeft="10sp"
Index: app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\n\r\nimport android.content.Context;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.PlacesRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentPlacesBinding;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class AllPlacesFragment extends Fragment {\r\n\r\n\r\n    private static final String TAG = HomeFragment.class.getSimpleName();\r\n\r\n    private FragmentPlacesBinding fragmentPlacesBinding;\r\n\r\n    private List<Place> placesList;\r\n    private PlacesRecyclerViewAdapter placesRecyclerViewAdapter;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of places\r\n    private int lastVisibleItem; // The position of the last visible place item\r\n    private int visibleItemCount; // Number or total visible place items\r\n\r\n    // Based on this value, the process of loading more places is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n\r\n    public AllPlacesFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static AllPlacesFragment newInstance() {\r\n        return new AllPlacesFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        IRepositoryWithLiveData repositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (repositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(repositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        placesList = new ArrayList<>();\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentPlacesBinding = FragmentPlacesBinding.inflate(inflater, container, false);\r\n        return fragmentPlacesBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        String country = \"IT\"; //POI VERRA PRESA DALLE SHAREDPREFERENCES\r\n        String location = \"45.51851, 9.2075123\"; //BICOCCA\r\n        double radius = 4.2;\r\n        String sort = \"start\";\r\n        String date = AllEventsFragment.currentDate();\r\n        int limit = 5000;\r\n\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_places);\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        placesRecyclerViewAdapter = new PlacesRecyclerViewAdapter(placesList,\r\n                requireActivity().getApplication(),\r\n                new PlacesRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onPlacesItemClick(Place place) {\r\n                        //VAI AI DETTAGLI DEL POSTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"place\", place);\r\n                        Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_placeFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n\r\n                    }\r\n                });\r\n                recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(placesRecyclerViewAdapter);\r\n\r\n        String lastUpdate = \"0\";\r\n\r\n        fragmentPlacesBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n\r\n        eventsAndPlacesViewModel.getPlaces().observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result!=null) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n                List<Place> fetchedPlaces = new ArrayList<>(result);\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                        eventsAndPlacesViewModel.setTotalResults(fetchedPlaces.size());\r\n                        eventsAndPlacesViewModel.setFirstLoading(false);\r\n                        this.placesList.addAll(fetchedPlaces);\r\n                        placesRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                                this.placesList.size());\r\n                    } else {\r\n                        // Updates related to the favorite status of the places\r\n                        placesList.clear();\r\n                        placesList.addAll(fetchedPlaces);\r\n                        placesRecyclerViewAdapter.notifyItemChanged(0, fetchedPlaces.size());\r\n                    }\r\n                    fragmentPlacesBinding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(placesList.size());\r\n\r\n                    int initialSize = placesList.size();\r\n\r\n                    for (int i = 0; i < placesList.size(); i++) {\r\n                        if (placesList.get(i) == null) {\r\n                            placesList.remove(placesList.get(i));\r\n                        }\r\n                    }\r\n                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                            EVENTS_PAGE_SIZE_VALUE;\r\n                    for (int i = startIndex; i < fetchedPlaces.size(); i++) {\r\n                        placesList.add(fetchedPlaces.get(i));\r\n                    }\r\n                    placesRecyclerViewAdapter.notifyItemRangeInserted(initialSize, placesList.size());\r\n                }\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(view, errorMessagesUtil.\r\n                                getErrorMessage(\"ERRORE\"),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n                fragmentPlacesBinding.progressBar.setVisibility(View.GONE);\r\n            }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getPlacesResponseLiveData().getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<List<Place>> placeListMutableLiveData = eventsAndPlacesViewModel.getPlacesResponseLiveData();\r\n\r\n                        if (placeListMutableLiveData.getValue() != null) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            placesList.add(null);\r\n                            placesRecyclerViewAdapter.notifyItemRangeInserted(placesList.size(),\r\n                                    placesList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.fetchPlaces();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentPlacesBinding = null;\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java	(date 1683625898977)
@@ -160,8 +160,9 @@
                                 this.placesList.size());
                     } else {
                         // Updates related to the favorite status of the places
-                        placesList.clear();
-                        placesList.addAll(fetchedPlaces);
+                        placesRecyclerViewAdapter.notifyItemRangeRemoved(0, this.placesList.size());
+                        this.placesList.clear();
+                        this.placesList.addAll(fetchedPlaces);
                         placesRecyclerViewAdapter.notifyItemChanged(0, fetchedPlaces.size());
                     }
                     fragmentPlacesBinding.progressBar.setVisibility(View.GONE);
Index: app/src/main/java/com/example/eventiapp/database/PlaceDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.database;\r\n\r\nimport androidx.room.Dao;\r\nimport androidx.room.Delete;\r\nimport androidx.room.Insert;\r\nimport androidx.room.OnConflictStrategy;\r\nimport androidx.room.Query;\r\nimport androidx.room.Update;\r\n\r\n\r\nimport com.example.eventiapp.model.Place;\r\n\r\nimport java.util.List;\r\n\r\n@Dao\r\npublic interface PlaceDao {\r\n    @Query(\"SELECT * FROM place ORDER BY name ASC\")\r\n    List<Place> getAll();\r\n\r\n    @Query(\"SELECT * FROM place WHERE id = :id\")\r\n    Place getPlace(String id);\r\n\r\n    @Query(\"SELECT * FROM place WHERE is_favorite = 1 ORDER BY name ASC\")\r\n    List<Place> getFavoritePlaces();\r\n\r\n    @Query(\"SELECT COUNT(*) FROM place\")\r\n    int count();\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    void insertPlacesList(List<Place> placeList);\r\n\r\n    @Insert\r\n    void insertAll(Place... places);\r\n\r\n    @Update\r\n    int updateSingleFavoritePlace(Place place);\r\n\r\n    @Update\r\n    int updateListFavoritePlace(List<Place> places);\r\n\r\n    @Delete\r\n    void delete(Place place);\r\n\r\n    @Delete\r\n    void deleteAllWithoutQuery(Place... places);\r\n\r\n    @Query(\"DELETE FROM place\")\r\n    int deleteAll();\r\n\r\n    @Query(\"DELETE FROM place WHERE is_favorite=0\")\r\n    void deleteNotFavoritePlaces();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/database/PlaceDao.java b/app/src/main/java/com/example/eventiapp/database/PlaceDao.java
--- a/app/src/main/java/com/example/eventiapp/database/PlaceDao.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/database/PlaceDao.java	(date 1683622463422)
@@ -20,6 +20,9 @@
     @Query("SELECT * FROM place WHERE id = :id")
     Place getPlace(String id);
 
+    @Query("SELECT * FROM place WHERE name = :name")
+    Place getPlaceByName(String name);
+
     @Query("SELECT * FROM place WHERE is_favorite = 1 ORDER BY name ASC")
     List<Place> getFavoritePlaces();
 
Index: app/src/main/java/com/example/eventiapp/ui/main/MyEventsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentMyEventsBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * A simple {@link Fragment} subclass.\r\n * Use the {@link MyEventsFragment#newInstance} factory method to\r\n * create an instance of this fragment.\r\n */\r\npublic class MyEventsFragment extends Fragment {\r\n\r\n    private static final String TAG = CategoryFragment.class.getSimpleName();\r\n\r\n    private FragmentMyEventsBinding fragmentMyEventsBinding;\r\n\r\n    private List<Events> eventsList;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    public MyEventsFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static MyEventsFragment newInstance() {\r\n        return new MyEventsFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_my_events, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        eventsAndPlacesViewModel.deleteEvents();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/MyEventsFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/MyEventsFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/MyEventsFragment.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/MyEventsFragment.java	(date 1683105210937)
@@ -22,14 +22,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
-/**
- * A simple {@link Fragment} subclass.
- * Use the {@link MyEventsFragment#newInstance} factory method to
- * create an instance of this fragment.
- */
+
 public class MyEventsFragment extends Fragment {
 
-    private static final String TAG = CategoryFragment.class.getSimpleName();
+    private static final String TAG = MyEventsFragment.class.getSimpleName();
 
     private FragmentMyEventsBinding fragmentMyEventsBinding;
 
@@ -75,12 +71,10 @@
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
-        // Inflate the layout for this fragment
         return inflater.inflate(R.layout.fragment_my_events, container, false);
     }
 
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
-        eventsAndPlacesViewModel.deleteEvents();
     }
 }
Index: app/src/main/java/com/example/eventiapp/source/events/BaseEventsLocalDataSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.events;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\n\r\nimport java.util.List;\r\n\r\npublic abstract class BaseEventsLocalDataSource {\r\n\r\n    protected EventsCallback eventsCallback;\r\n\r\n    public void setEventsCallback(EventsCallback eventsCallback) {\r\n        this.eventsCallback = eventsCallback;\r\n    }\r\n\r\n    public abstract void getEvents();\r\n\r\n    public abstract void getFavoriteEvents();\r\n\r\n    public abstract void getCategoryEvents(String category);\r\n\r\n    public abstract void getSingleEvent(long id);\r\n\r\n    public abstract void getPlaceEvent(String id);\r\n\r\n    public abstract void getEventsDates(String name);\r\n\r\n    public abstract void getMoviesHours(String name);\r\n\r\n    public abstract void updateEvents(Events events);\r\n\r\n    public abstract void deleteFavoriteEvents();\r\n\r\n    public abstract void insertEvents(EventsApiResponse eventsApiResponse);\r\n\r\n    public abstract void insertEvents(List<Events> eventsList);\r\n\r\n    public abstract void getCount();\r\n\r\n    public abstract void deleteAll();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/events/BaseEventsLocalDataSource.java b/app/src/main/java/com/example/eventiapp/source/events/BaseEventsLocalDataSource.java
--- a/app/src/main/java/com/example/eventiapp/source/events/BaseEventsLocalDataSource.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/source/events/BaseEventsLocalDataSource.java	(date 1683546488676)
@@ -23,6 +23,16 @@
 
     public abstract void getPlaceEvent(String id);
 
+    public abstract void getEventsInADate(String date);
+
+    public abstract void getAllCategories();
+
+    public abstract void getCategoriesEvents(List<String> categories);
+
+    public abstract void getEventsBetweenDates(String startDate, String endDate);
+
+    public abstract void getCategoryEventsBetweenDates(String startDate, String endDate, List<String> categories);
+
     public abstract void getEventsDates(String name);
 
     public abstract void getMoviesHours(String name);
Index: app/src/main/java/com/example/eventiapp/database/RoomDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.database;\r\n\r\n\r\nimport android.content.Context;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.TypeConverters;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.util.Constants;\r\nimport com.example.eventiapp.util.Converters;\r\n\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\n@Database(entities = {Events.class, Place.class}, version = 30)\r\n@TypeConverters({Converters.class})\r\npublic abstract class RoomDatabase extends androidx.room.RoomDatabase {\r\n    public abstract EventsDao eventsDao();\r\n    public abstract PlaceDao placeDao();\r\n\r\n    private static volatile RoomDatabase INSTANCE;\r\n    private static final int NUMBER_OF_THREADS = Runtime.getRuntime().availableProcessors();\r\n    public static final ExecutorService databaseWriteExecutor =\r\n            Executors.newFixedThreadPool(NUMBER_OF_THREADS);\r\n\r\n    public static RoomDatabase getDatabase(final Context context) {\r\n        if (INSTANCE == null) {\r\n            synchronized (RoomDatabase.class) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),\r\n                            RoomDatabase.class, Constants.EVENTS_DATABASE_NAME).fallbackToDestructiveMigration().build();\r\n                }\r\n            }\r\n        }\r\n        return INSTANCE;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/database/RoomDatabase.java b/app/src/main/java/com/example/eventiapp/database/RoomDatabase.java
--- a/app/src/main/java/com/example/eventiapp/database/RoomDatabase.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/database/RoomDatabase.java	(date 1683622463402)
@@ -15,7 +15,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-@Database(entities = {Events.class, Place.class}, version = 30)
+@Database(entities = {Events.class, Place.class}, version = 32)
 @TypeConverters({Converters.class})
 public abstract class RoomDatabase extends androidx.room.RoomDatabase {
     public abstract EventsDao eventsDao();
Index: app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModel;\r\n\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\n\r\nimport java.util.List;\r\n\r\npublic class EventsAndPlacesViewModel extends ViewModel {\r\n\r\n    private static final String TAG = EventsAndPlacesViewModel.class.getSimpleName();\r\n\r\n    private final IRepositoryWithLiveData iRepositoryWithLiveData;\r\n    private int page;\r\n    private int currentResults;\r\n    private int totalResults;\r\n    private boolean isLoading;\r\n    private boolean firstLoading;\r\n    private MutableLiveData<Result> eventsListLiveData; //TUTTI GLI EVENTI\r\n    private MutableLiveData<Result> favoriteEventsListLiveData; //EVENTI FAVORITI\r\n    private MutableLiveData<Result> categoryEventsLiveData; //EVENTI APPARTENENTI AD UNA CATEGORIA SPECIFICA\r\n    private MutableLiveData<Result> placeEventsLiveData; //EVENTI CHE SI TENGONO IN UN LUOGO SPECIFICO\r\n    private MutableLiveData<Result> singleEventLiveData; //EVENTO SINGOLO\r\n\r\n    //PLACES\r\n    private MutableLiveData<List<Place>> placesListLiveData; //TUTTI I POSTI\r\n    private MutableLiveData<List<Place>> favoritePlacesListLiveData; //POSTI PREFERITI\r\n    private MutableLiveData<Place> singlePlaceLiveData; //POSTO SINGOLO\r\n\r\n    public EventsAndPlacesViewModel(IRepositoryWithLiveData iRepositoryWithLiveData) {\r\n        this.iRepositoryWithLiveData = iRepositoryWithLiveData;\r\n        this.page = 1;\r\n        this.totalResults = 0;\r\n        this.firstLoading = true;\r\n    }\r\n\r\n    public MutableLiveData<Result> getEvents(String country, String location, String date, String sort, int limit, long lastUpdate) {\r\n        if (eventsListLiveData == null) {\r\n            fetchEvents(country, location, date, sort, limit, lastUpdate);\r\n        }\r\n        return eventsListLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<Place>> getPlaces() {\r\n        if (placesListLiveData == null) {\r\n            fetchPlaces();\r\n        }\r\n        return placesListLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getFavoriteEventsLiveData(boolean isFirstLoading) {\r\n        if (favoriteEventsListLiveData == null) {\r\n            iRepositoryWithLiveData.getFavoriteEvents(isFirstLoading);\r\n        }\r\n        return favoriteEventsListLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<Place>> getFavoritePlacesLiveData(boolean isFirstLoading) {\r\n        if (favoritePlacesListLiveData == null) {\r\n            iRepositoryWithLiveData.getFavoritePlaces(isFirstLoading);\r\n        }\r\n        return favoritePlacesListLiveData;\r\n    }\r\n\r\n\r\n    public MutableLiveData<Result> getCategoryEventsLiveData(String category) {\r\n        if (categoryEventsLiveData == null) {\r\n            categoryEventsLiveData = iRepositoryWithLiveData.getCategoryEvents(category);\r\n        }\r\n        return categoryEventsLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getPlaceEventsLiveData(String id) {\r\n        if (placeEventsLiveData == null) {\r\n            return iRepositoryWithLiveData.getPlaceEvents(id);\r\n        }\r\n        return placeEventsLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getSingleEvent(long id) {\r\n        singleEventLiveData = iRepositoryWithLiveData.getSingleEvent(id);\r\n        return singleEventLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Place> getSinglePlace(String id) {\r\n        singlePlaceLiveData = iRepositoryWithLiveData.getSinglePlace(id);\r\n        return singlePlaceLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<String>> getEventsDates(String name) {\r\n        return iRepositoryWithLiveData.getEventsDates(name);\r\n    }\r\n\r\n    public MutableLiveData<String[]> getMoviesHours(String name) {\r\n        return iRepositoryWithLiveData.getMoviesHours(name);\r\n    }\r\n\r\n    public void deleteEvents() {\r\n        iRepositoryWithLiveData.deleteEvents();\r\n    }\r\n\r\n    public int getCount() {\r\n        return iRepositoryWithLiveData.getCount();\r\n    }\r\n\r\n\r\n    public void fetchEvents(String country, String location, String date, String sort, int limit) {\r\n        iRepositoryWithLiveData.fetchEvents(country, location, date, sort, limit);\r\n    }\r\n\r\n    public void fetchEvents(String country, String location, String date, String sort, int limit, long lastUpdate) {\r\n        eventsListLiveData = iRepositoryWithLiveData.fetchEvents(country, location, date, sort, limit, lastUpdate);\r\n    }\r\n\r\n    public void fetchPlaces() {\r\n        placesListLiveData = iRepositoryWithLiveData.fetchPlaces();\r\n    }\r\n\r\n    public int getPage() {\r\n        return page;\r\n    }\r\n\r\n    public void setPage(int page) {\r\n        this.page = page;\r\n    }\r\n\r\n    public int getTotalResults() {\r\n        return totalResults;\r\n    }\r\n\r\n    public void setTotalResults(int totalResults) {\r\n        this.totalResults = totalResults;\r\n    }\r\n\r\n    public int getCurrentResults() {\r\n        return currentResults;\r\n    }\r\n\r\n    public void setCurrentResults(int currentResults) {\r\n        this.currentResults = currentResults;\r\n    }\r\n\r\n    public boolean isLoading() {\r\n        return isLoading;\r\n    }\r\n\r\n    public void setLoading(boolean loading) {\r\n        isLoading = loading;\r\n    }\r\n\r\n    public boolean isFirstLoading() {\r\n        return firstLoading;\r\n    }\r\n\r\n    public void setFirstLoading(boolean firstLoading) {\r\n        this.firstLoading = firstLoading;\r\n    }\r\n\r\n    public MutableLiveData<Result> getEventsResponseLiveData() {\r\n        return eventsListLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<Place>> getPlacesResponseLiveData() {\r\n        return placesListLiveData;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java b/app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java	(date 1683622463383)
@@ -22,8 +22,13 @@
     private MutableLiveData<Result> eventsListLiveData; //TUTTI GLI EVENTI
     private MutableLiveData<Result> favoriteEventsListLiveData; //EVENTI FAVORITI
     private MutableLiveData<Result> categoryEventsLiveData; //EVENTI APPARTENENTI AD UNA CATEGORIA SPECIFICA
+    private MutableLiveData<Result> categoriesEventsLiveData; //EVENTI APPARTENENTI A PIU CATEGORIE
+    private MutableLiveData<Result> eventsInADateLiveData; //EVENTI CHE SI TENGONO IN UNA DATA SPECIFICA
+    private MutableLiveData<Result> eventsBetweenDatesLiveData; //EVENTI CHE SI TENGONO TRA DUE DATE
+    private MutableLiveData<Result> categoryEventsBetweenDatesLiveData; //EVENTI CHE SI TENGONO TRA DUE DATE CON CATEGORIE
     private MutableLiveData<Result> placeEventsLiveData; //EVENTI CHE SI TENGONO IN UN LUOGO SPECIFICO
     private MutableLiveData<Result> singleEventLiveData; //EVENTO SINGOLO
+    private MutableLiveData<List<String>> allCategoriesLiveData; //TUTTE LE CATEGORIE DI EVENTI
 
     //PLACES
     private MutableLiveData<List<Place>> placesListLiveData; //TUTTI I POSTI
@@ -67,12 +72,38 @@
 
 
     public MutableLiveData<Result> getCategoryEventsLiveData(String category) {
-        if (categoryEventsLiveData == null) {
-            categoryEventsLiveData = iRepositoryWithLiveData.getCategoryEvents(category);
-        }
+        categoryEventsLiveData = iRepositoryWithLiveData.getCategoryEvents(category);
         return categoryEventsLiveData;
     }
 
+    public MutableLiveData<Result> getEventsInADateLiveData(String date) {
+        if (eventsInADateLiveData == null) {
+            eventsInADateLiveData = iRepositoryWithLiveData.getEventsInADate(date);
+        }
+        return eventsInADateLiveData;
+    }
+
+    public MutableLiveData<Result> getEventsBetweenDatesLiveData(String firstDate, String endDate) {
+        if (eventsBetweenDatesLiveData == null) {
+            eventsBetweenDatesLiveData = iRepositoryWithLiveData.getEventsBetweenDates(firstDate, endDate);
+        }
+        return eventsBetweenDatesLiveData;
+    }
+
+    public MutableLiveData<Result> getCategoryEventsBetweenDatesLiveData(String firstDate, String endDate, List<String> categories) {
+        if (categoryEventsBetweenDatesLiveData == null) {
+            categoryEventsBetweenDatesLiveData = iRepositoryWithLiveData.getCategoryEventsBetweenDates(firstDate, endDate, categories);
+        }
+        return categoryEventsBetweenDatesLiveData;
+    }
+
+    public MutableLiveData<Result> getCategoriesEventsLiveData(List<String> categories) {
+        if (categoriesEventsLiveData == null) {
+            categoriesEventsLiveData = iRepositoryWithLiveData.getCategoriesEvents(categories);
+        }
+        return categoriesEventsLiveData;
+    }
+
     public MutableLiveData<Result> getPlaceEventsLiveData(String id) {
         if (placeEventsLiveData == null) {
             return iRepositoryWithLiveData.getPlaceEvents(id);
@@ -90,6 +121,11 @@
         return singlePlaceLiveData;
     }
 
+    public MutableLiveData<Place> getSinglePlaceByName(String name) {
+        singlePlaceLiveData = iRepositoryWithLiveData.getSinglePlaceByName(name);
+        return singlePlaceLiveData;
+    }
+
     public MutableLiveData<List<String>> getEventsDates(String name) {
         return iRepositoryWithLiveData.getEventsDates(name);
     }
@@ -106,6 +142,11 @@
         return iRepositoryWithLiveData.getCount();
     }
 
+    public MutableLiveData<List<String>> getAllCategories() {
+        allCategoriesLiveData = iRepositoryWithLiveData.getAllCategories();
+        return allCategoriesLiveData;
+    }
+
 
     public void fetchEvents(String country, String location, String date, String sort, int limit) {
         iRepositoryWithLiveData.fetchEvents(country, location, date, sort, limit);
Index: app/src/main/res/layout/fragment_all_events.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ui.main.AllEventsFragment\">\r\n\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/recyclerview_events\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_marginBottom=\"80dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/progress_bar\"\r\n        style=\"?android:attr/progressBarStyle\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:visibility=\"gone\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_all_events.xml b/app/src/main/res/layout/fragment_all_events.xml
--- a/app/src/main/res/layout/fragment_all_events.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/layout/fragment_all_events.xml	(date 1683547981827)
@@ -7,15 +7,57 @@
     tools:context=".ui.main.AllEventsFragment">
 
 
+    <com.google.android.material.textview.MaterialTextView
+        android:id="@+id/numberOfEvents0"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="16sp"
+        android:text="Number of events: "
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <com.google.android.material.textview.MaterialTextView
+        android:id="@+id/numberOfEvents"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="0"
+        app:layout_constraintStart_toEndOf="@id/numberOfEvents0"
+        app:layout_constraintTop_toTopOf="@id/numberOfEvents0"/>
+
+    <com.google.android.material.button.MaterialButton
+        android:id="@+id/filtersButton"
+        android:layout_width="55sp"
+        android:layout_height="50sp"
+        android:layout_marginStart="164sp"
+        android:layout_marginTop="2sp"
+        android:elevation="4sp"
+        app:icon="@drawable/ic_baseline_filter_alt_24"
+        app:layout_constraintStart_toEndOf="@id/numberOfEvents0"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <com.google.android.material.button.MaterialButton
+        android:id="@+id/sortingButton"
+        android:layout_width="55sp"
+        android:layout_height="50sp"
+        android:layout_marginTop="2sp"
+        app:icon="@drawable/ic_baseline_sort_24"
+        android:elevation="4sp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+
     <androidx.recyclerview.widget.RecyclerView
         android:id="@+id/recyclerview_events"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_marginBottom="80dp"
+        android:layout_marginTop="50sp"
+        android:elevation="5sp"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintHorizontal_bias="0.0"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="1.0" />
 
     <ProgressBar
         android:id="@+id/progress_bar"
@@ -27,4 +69,6 @@
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent" />
+
+
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.repository.events;\r\n\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\n\r\nimport java.util.List;\r\n\r\npublic interface IRepositoryWithLiveData {\r\n\r\n    MutableLiveData<Result> fetchEvents(String country, String location, String date, String sort, int limit, long lastUpdate);\r\n\r\n    void fetchEvents(String country, String location, String date, String sort, int limit);\r\n\r\n    MutableLiveData<Result> getFavoriteEvents(boolean isFirstLoading);\r\n\r\n    MutableLiveData<Result> getCategoryEvents(String category);\r\n\r\n    MutableLiveData<Result> getPlaceEvents(String id);\r\n\r\n    MutableLiveData<Result> getSingleEvent(long id);\r\n\r\n    MutableLiveData<List<String>> getEventsDates(String name);\r\n\r\n    MutableLiveData<String[]> getMoviesHours(String name);\r\n\r\n    MutableLiveData<List<Place>> fetchPlaces();\r\n\r\n    MutableLiveData<List<Place>> getFavoritePlaces(boolean isFirstLoading);\r\n\r\n    MutableLiveData<Place> getSinglePlace(String id);\r\n\r\n    void updateEvents(Events events);\r\n\r\n    int getCount();\r\n\r\n    void deleteEvents();\r\n\r\n    void deleteFavoriteEvents();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java b/app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java
--- a/app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java	(date 1683622463471)
@@ -22,6 +22,16 @@
 
     MutableLiveData<Result> getSingleEvent(long id);
 
+    MutableLiveData<Result> getEventsInADate(String date);
+
+    MutableLiveData<List<String>> getAllCategories();
+
+    MutableLiveData<Result> getCategoriesEvents(List<String> categories);
+
+    MutableLiveData<Result> getEventsBetweenDates(String firstDate, String endDate);
+
+    MutableLiveData<Result> getCategoryEventsBetweenDates(String firstDate, String endDate, List<String> categories);
+
     MutableLiveData<List<String>> getEventsDates(String name);
 
     MutableLiveData<String[]> getMoviesHours(String name);
@@ -32,6 +42,8 @@
 
     MutableLiveData<Place> getSinglePlace(String id);
 
+    MutableLiveData<Place> getSinglePlaceByName(String name);
+
     void updateEvents(Events events);
 
     int getCount();
Index: app/src/main/java/com/example/eventiapp/database/EventsDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.database;\r\n\r\nimport androidx.room.Dao;\r\nimport androidx.room.Delete;\r\nimport androidx.room.Insert;\r\nimport androidx.room.OnConflictStrategy;\r\nimport androidx.room.Query;\r\nimport androidx.room.Update;\r\n\r\nimport com.example.eventiapp.model.Events;\r\n\r\nimport java.util.List;\r\n\r\n@Dao\r\npublic interface EventsDao {\r\n    @Query(\"SELECT * FROM events ORDER BY startDate ASC\")\r\n    List<Events> getAll();\r\n\r\n    @Query(\"SELECT * FROM events WHERE id_db = :id\")\r\n    Events getEvents(long id);\r\n\r\n    @Query(\"SELECT * FROM events WHERE is_favorite = 1 ORDER BY startDate ASC\")\r\n    List<Events> getFavoriteEvents();\r\n\r\n    @Query(\"SELECT * FROM events WHERE category LIKE '%' || :category || '%' ORDER BY startDate ASC\")\r\n    List<Events> getCategoryEvents(String category);\r\n\r\n    @Query(\"SELECT * FROM events WHERE places LIKE '%' || :id_place || '%' ORDER BY startDate ASC\")\r\n    List<Events> getPlaceEvents(String id_place);\r\n\r\n    @Query(\"SELECT COUNT(*) FROM events\")\r\n    int count();\r\n\r\n    @Query(\"SELECT startDate FROM events WHERE title = :name\")\r\n    List<String> getEventsDates(String name);\r\n\r\n    @Query(\"SELECT hours FROM events WHERE title = :name\")\r\n    String[] getMoviesHours(String name);\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    List<Long> insertEventsList(List<Events> eventsList);\r\n\r\n    @Insert\r\n    void insertAll(Events... events);\r\n\r\n    @Update\r\n    int updateSingleFavoriteEvents(Events events);\r\n\r\n    @Update\r\n    int updateListFavoriteEvents(List<Events> events);\r\n\r\n    @Delete\r\n    void delete(Events events);\r\n\r\n    @Delete\r\n    void deleteAllWithoutQuery(Events... events);\r\n\r\n    @Query(\"DELETE FROM events\")\r\n    int deleteAll();\r\n\r\n    @Query(\"DELETE FROM events WHERE is_favorite=0\")\r\n    void deleteNotFavoriteEvents();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/database/EventsDao.java b/app/src/main/java/com/example/eventiapp/database/EventsDao.java
--- a/app/src/main/java/com/example/eventiapp/database/EventsDao.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/database/EventsDao.java	(date 1683546024749)
@@ -28,9 +28,24 @@
     @Query("SELECT * FROM events WHERE places LIKE '%' || :id_place || '%' ORDER BY startDate ASC")
     List<Events> getPlaceEvents(String id_place);
 
+    @Query("SELECT * FROM events WHERE startDate LIKE  '%' || :date || '%' ORDER BY startDate ASC")
+    List<Events> getEventsInADate(String date);
+
     @Query("SELECT COUNT(*) FROM events")
     int count();
 
+    @Query("SELECT DISTINCT category FROM events")
+    List<String> getAllCategories();
+
+    @Query("SELECT * FROM events WHERE category IN (:categories) ORDER BY startDate ASC")
+    List<Events> getCategoriesEvents(List<String> categories);
+
+    @Query("SELECT * FROM events WHERE strftime('%Y-%m-%d', date(startDate)) BETWEEN strftime('%Y-%m-%d', date(:startDate)) AND strftime('%Y-%m-%d', date(:endDate)) ORDER BY startDate ASC")
+    List<Events> getEventsBetweenDates(String startDate, String endDate);
+
+    @Query("SELECT * FROM events WHERE startDate BETWEEN :startDate AND :endDate AND category IN (:categories) ORDER BY startDate ASC")
+    List<Events> getCategoryEventsBetweenDates(String startDate, String endDate, List<String> categories);
+
     @Query("SELECT startDate FROM events WHERE title = :name")
     List<String> getEventsDates(String name);
 
Index: app/src/main/java/com/example/eventiapp/adapter/MyViewPagerAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/adapter/MyViewPagerAdapter.java b/app/src/main/java/com/example/eventiapp/adapter/EventsAndPlacesPagerAdapter.java
rename from app/src/main/java/com/example/eventiapp/adapter/MyViewPagerAdapter.java
rename to app/src/main/java/com/example/eventiapp/adapter/EventsAndPlacesPagerAdapter.java
--- a/app/src/main/java/com/example/eventiapp/adapter/MyViewPagerAdapter.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/adapter/EventsAndPlacesPagerAdapter.java	(date 1683105210957)
@@ -6,10 +6,11 @@
 
 import com.example.eventiapp.ui.main.AllEventsFragment;
 import com.example.eventiapp.ui.main.AllPlacesFragment;
+import com.example.eventiapp.ui.main.CalendarFragment;
 
-public class MyViewPagerAdapter extends FragmentStateAdapter {
+public class EventsAndPlacesPagerAdapter extends FragmentStateAdapter {
 
-    public MyViewPagerAdapter(@NonNull Fragment fragment) {
+    public EventsAndPlacesPagerAdapter(@NonNull Fragment fragment) {
         super(fragment);
     }
 
@@ -21,6 +22,8 @@
                 return new AllEventsFragment();
             case 1:
                 return new AllPlacesFragment();
+            case 2:
+                return new CalendarFragment();
             default:
                 return new AllEventsFragment();
         }
@@ -28,6 +31,6 @@
 
     @Override
     public int getItemCount() {
-        return 2;
+        return 3;
     }
 }
Index: app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.Lifecycle;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavBackStackEntry;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentEventBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.MapView;\r\nimport com.google.android.gms.maps.MapsInitializer;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.model.CameraPosition;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.button.MaterialButton;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class EventFragment extends Fragment {\r\n\r\n    private FragmentEventBinding fragmentEventBinding;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private List<Events> eventsList; //EVENTI SIMILI\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    MapView mMapView;\r\n    private GoogleMap googleMap;\r\n\r\n    public EventFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static EventFragment newInstance() {\r\n        return new EventFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentEventBinding = FragmentEventBinding.inflate(inflater, container, false);\r\n        return fragmentEventBinding.getRoot();\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.TIRAMISU)\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                if (menuItem.getItemId() == android.R.id.home) {\r\n                    Navigation.findNavController(requireView()).navigateUp();\r\n                }\r\n                return false;\r\n            }\r\n        }, getViewLifecycleOwner(), Lifecycle.State.RESUMED);\r\n\r\n        Events events = getArguments().getParcelable(\"event\", Events.class);\r\n\r\n        if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {\r\n            fragmentEventBinding.eventImage.setVisibility(View.VISIBLE);\r\n            Glide.with(this).load(events.getEventSource().getUrlPhoto()).into(fragmentEventBinding.eventImage);\r\n        }\r\n        fragmentEventBinding.eventTitle.setText(events.getTitle());\r\n        fragmentEventBinding.eventCategory.setText(events.getCategory());\r\n        //fragmentEventBinding.eventTimezone.setText(events.getTimezone());\r\n        fragmentEventBinding.eventDescription.setText(events.getDescription());\r\n        if (events.getEnd() != null) {\r\n            String date = \"FROM: \" + events.getStart() + \" TO: \" + events.getEnd() + \" (\" + events.getTimezone() + \")\";\r\n            fragmentEventBinding.eventDate.setText(date);\r\n        } else {\r\n            String date = events.getStart() + \" (\" + events.getTimezone() + \")\";\r\n            fragmentEventBinding.eventDate.setText(date);\r\n        }\r\n        if (!events.getPlaces().isEmpty()) {\r\n            fragmentEventBinding.eventLocation.setText((CharSequence) events.getPlaces().get(0).getAddress());\r\n        } else {\r\n            fragmentEventBinding.eventLocation.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!events.getCategory().equals(\"movies\")) { //PER ORA I MOVIES SON SOLO QUELLI DEL GIORNO CORRENTE\r\n            eventsAndPlacesViewModel.getEventsDates(events.getTitle()).observe(getViewLifecycleOwner(), result -> {\r\n                if (result.size() > 1) {\r\n                    showAllEventsDate(result);\r\n                }\r\n            });\r\n        } else { //MOSTRA ORARI FILM DEL GIORNO CORRENTE\r\n            //Log.i(\"NUMERO ROWS DB: \", String.valueOf(eventsAndPlacesViewModel.getCount()));\r\n            eventsAndPlacesViewModel.getMoviesHours(events.getTitle()).observe(getViewLifecycleOwner(), result -> {\r\n                if (result.length > 1) {\r\n                    showAllHoursMovie(result);\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        //EVENTI SIMILI ---------------------------------------------------------------------\r\n\r\n        sameCategoryEvents(events);\r\n\r\n        //PLACE\r\n\r\n        getPlace(events);\r\n\r\n        //GOOGLE MAPS ---------------------------------------------------------------------------------------------------\r\n\r\n        mMapView = requireView().findViewById(R.id.mapView);\r\n        mMapView.onCreate(savedInstanceState);\r\n        mMapView.onResume();\r\n        googleMaps(events);\r\n\r\n\r\n        NavBackStackEntry navBackStackEntry = Navigation.\r\n                findNavController(view).getPreviousBackStackEntry();\r\n\r\n        if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.homeFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.homeFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.myEventsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.myEventsFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.mapsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.mapsFragment).setChecked(true);\r\n        }\r\n    }\r\n\r\n    private void showAllEventsDate(List<String> dates) {\r\n        LinearLayout linearLayout = fragmentEventBinding.otherDatesLayout;\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT\r\n        );\r\n        params.setMarginEnd(20);\r\n        TextView textView = fragmentEventBinding.otherDatesTextView;\r\n        textView.setVisibility(View.VISIBLE);\r\n\r\n        for (String date : dates) {\r\n            MaterialButton button = new MaterialButton(requireContext());\r\n            button.setLayoutParams(params);\r\n            button.setTextSize(16);\r\n            button.setPadding(15, 15, 15, 15);\r\n            button.setCornerRadius(30);\r\n            button.setText(date);\r\n            button.setOnClickListener(v -> {\r\n                //VA ALLO STESSO EVENTO MA CON DATA DIVERSA\r\n            });\r\n            linearLayout.addView(button);\r\n        }\r\n    }\r\n\r\n    private void showAllHoursMovie(String[] hours) {\r\n        LinearLayout linearLayout = fragmentEventBinding.otherHoursLayout;\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT\r\n        );\r\n        params.setMarginEnd(20);\r\n        TextView textView = fragmentEventBinding.otherHoursTextView;\r\n        textView.setVisibility(View.VISIBLE);\r\n\r\n        for (String hour : hours) {\r\n            MaterialButton button = new MaterialButton(requireContext());\r\n            button.setLayoutParams(params);\r\n            button.setTextSize(16);\r\n            button.setPadding(15, 15, 15, 15);\r\n            button.setCornerRadius(30);\r\n            button.setText(hour);\r\n            button.setOnClickListener(v -> {\r\n                //IN TEORIA NON DOVREBBE FAR NIENTE\r\n            });\r\n            linearLayout.addView(button);\r\n        }\r\n    }\r\n\r\n    private void sameCategoryEvents(Events events){\r\n\r\n        RecyclerView recyclerView = fragmentEventBinding.recyclerviewEvents;\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(),\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(requireView()).navigate(R.id.action_eventFragment_self, bundle);\r\n                    }\r\n\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        fragmentEventBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n        eventsAndPlacesViewModel.getCategoryEventsLiveData(events.getCategory()).observe(getViewLifecycleOwner(), result -> {\r\n            if (result != null) {\r\n                if (result.isSuccess()) {\r\n                    Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n                    eventsList.clear();\r\n                    EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                    List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n                    fetchedEvents.remove(events); //RIMUOVI LO STESSO EVENTO\r\n\r\n                    if (fetchedEvents.size() > 0) {\r\n                        fragmentEventBinding.categoryEvents.setVisibility(View.VISIBLE);\r\n                        fragmentEventBinding.recyclerviewEvents.setVisibility(View.VISIBLE);\r\n                        if (!eventsAndPlacesViewModel.isLoading()) {\r\n                            if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                                eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());\r\n                                eventsAndPlacesViewModel.setFirstLoading(false);\r\n                                this.eventsList.addAll(fetchedEvents);\r\n                                eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                                        this.eventsList.size());\r\n                            } else {\r\n                                eventsList.clear();\r\n                                eventsList.addAll(fetchedEvents);\r\n                                eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());\r\n                            }\r\n                            fragmentEventBinding.progressBar.setVisibility(View.GONE);\r\n\r\n                        } else {\r\n                            eventsAndPlacesViewModel.setLoading(false);\r\n                            eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                            int initialSize = eventsList.size();\r\n\r\n                            for (int i = 0; i < eventsList.size(); i++) {\r\n                                if (eventsList.get(i) == null) {\r\n                                    eventsList.remove(eventsList.get(i));\r\n                                }\r\n                            }\r\n                            int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                                    EVENTS_PAGE_SIZE_VALUE;\r\n                            for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                                eventsList.add(fetchedEvents.get(i));\r\n                            }\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n                        }\r\n                    } else {\r\n                        fragmentEventBinding.progressBar.setVisibility(View.GONE);\r\n                    }\r\n                } else {\r\n                    Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                    ErrorMessageUtil errorMessagesUtil =\r\n                            new ErrorMessageUtil(requireActivity().getApplication());\r\n                    Snackbar.make(requireView(), errorMessagesUtil.\r\n                                    getErrorMessage(((Result.Error) result).getMessage()),\r\n                            Snackbar.LENGTH_SHORT).show();\r\n                    fragmentEventBinding.progressBar.setVisibility(View.GONE);\r\n                }\r\n\r\n            } else {\r\n                //NON CI SONO EVENTI IN QUEL LOCALE\r\n            }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getCategoryEventsLiveData(events.getCategory()).getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<Result> eventsListMutableLiveData = eventsAndPlacesViewModel.getCategoryEventsLiveData(events.getCategory());\r\n\r\n                        if (eventsListMutableLiveData.getValue() != null &&\r\n                                eventsListMutableLiveData.getValue().isSuccess()) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            eventsList.add(null);\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(eventsList.size(),\r\n                                    eventsList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.getCategoryEventsLiveData(events.getCategory());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getPlace(Events events){\r\n        eventsAndPlacesViewModel.getSinglePlace(events.getPlaces().get(0).getId()).observe(getViewLifecycleOwner(), result ->{\r\n            if(result!=null){\r\n                Log.i(\"PLACE\",result.toString());\r\n            }\r\n            else{\r\n                Log.i(\"RESULT \", \"NULL\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void googleMaps(Events events){\r\n        try {\r\n            MapsInitializer.initialize(getActivity().getApplicationContext());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        mMapView.getMapAsync(new OnMapReadyCallback() {\r\n            @Override\r\n            public void onMapReady(GoogleMap mMap) {\r\n                googleMap = mMap;\r\n\r\n                // For dropping a marker at a point on the Map\r\n                double[] location = events.getCoordinates();\r\n                LatLng latLng = new LatLng(location[0], location[1]);\r\n                Marker marker = googleMap.addMarker(new MarkerOptions().position(latLng).title(events.getPlaces().get(0).getName()));\r\n                googleMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\r\n                    @Override\r\n                    public boolean onMarkerClick(@NonNull Marker marker) {\r\n                        LatLng position = marker.getPosition();\r\n                        googleMap.moveCamera(CameraUpdateFactory.newLatLng(position));\r\n                        googleMap.getMaxZoomLevel();\r\n\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                googleMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {\r\n                    @Override\r\n                    public void onMapClick(@NonNull LatLng latLng) {\r\n                        String uri = String.format(Locale.ENGLISH, \"geo:%f,%f\", latLng.latitude, latLng.longitude);\r\n                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\r\n                        startActivity(intent);\r\n                    }\r\n                });\r\n\r\n                // For zooming automatically to the location of the marker\r\n                CameraPosition cameraPosition = new CameraPosition.Builder().target(latLng).zoom(15).build();\r\n                googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n        mMapView.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentEventBinding = null;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        mMapView.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        mMapView.onPause();\r\n    }\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java	(date 1683632369012)
@@ -4,6 +4,7 @@
 
 import android.content.Context;
 import android.content.Intent;
+import android.graphics.Bitmap;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.net.Uri;
@@ -39,8 +40,10 @@
 import com.example.eventiapp.model.Events;
 import com.example.eventiapp.model.EventsApiResponse;
 import com.example.eventiapp.model.EventsResponse;
+import com.example.eventiapp.model.Place;
 import com.example.eventiapp.model.Result;
 import com.example.eventiapp.repository.events.IRepositoryWithLiveData;
+import com.example.eventiapp.source.google.PlaceDetailsSource;
 import com.example.eventiapp.util.ErrorMessageUtil;
 import com.example.eventiapp.util.ServiceLocator;
 import com.google.android.gms.maps.CameraUpdateFactory;
@@ -52,6 +55,7 @@
 import com.google.android.gms.maps.model.LatLng;
 import com.google.android.gms.maps.model.Marker;
 import com.google.android.gms.maps.model.MarkerOptions;
+import com.google.android.libraries.places.api.model.PhotoMetadata;
 import com.google.android.material.bottomnavigation.BottomNavigationView;
 import com.google.android.material.button.MaterialButton;
 import com.google.android.material.snackbar.Snackbar;
@@ -62,6 +66,8 @@
 
 public class EventFragment extends Fragment {
 
+    private static final String TAG = EventFragment.class.getSimpleName();
+
     private FragmentEventBinding fragmentEventBinding;
     private EventsAndPlacesViewModel eventsAndPlacesViewModel;
     private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;
@@ -129,77 +135,167 @@
             }
         }, getViewLifecycleOwner(), Lifecycle.State.RESUMED);
 
+        mMapView = requireView().findViewById(R.id.mapView);
+        mMapView.onCreate(savedInstanceState);
+        mMapView.onResume();
+
         Events events = getArguments().getParcelable("event", Events.class);
 
-        if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {
-            fragmentEventBinding.eventImage.setVisibility(View.VISIBLE);
-            Glide.with(this).load(events.getEventSource().getUrlPhoto()).into(fragmentEventBinding.eventImage);
-        }
-        fragmentEventBinding.eventTitle.setText(events.getTitle());
-        fragmentEventBinding.eventCategory.setText(events.getCategory());
-        //fragmentEventBinding.eventTimezone.setText(events.getTimezone());
-        fragmentEventBinding.eventDescription.setText(events.getDescription());
-        if (events.getEnd() != null) {
-            String date = "FROM: " + events.getStart() + " TO: " + events.getEnd() + " (" + events.getTimezone() + ")";
-            fragmentEventBinding.eventDate.setText(date);
-        } else {
-            String date = events.getStart() + " (" + events.getTimezone() + ")";
-            fragmentEventBinding.eventDate.setText(date);
-        }
-        if (!events.getPlaces().isEmpty()) {
-            fragmentEventBinding.eventLocation.setText((CharSequence) events.getPlaces().get(0).getAddress());
-        } else {
-            fragmentEventBinding.eventLocation.setVisibility(View.GONE);
-        }
+        if (!events.getPlaces().isEmpty() && events.getPlaces().get(0).getName() != null) {
+            eventsAndPlacesViewModel.getSinglePlaceByName(events.getPlaces().get(0).getName()).observe(getViewLifecycleOwner(), result -> {
+                if (result != null) {
+
+                    if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {
+                        fragmentEventBinding.eventImage.setVisibility(View.VISIBLE);
+                        Glide.with(this).load(events.getEventSource().getUrlPhoto()).into(fragmentEventBinding.eventImage);
+                    } else {
+                        fragmentEventBinding.eventImage.setVisibility(View.VISIBLE);
+                        List<PhotoMetadata> list = new ArrayList<>();
+                        list.add(result.getImages().get(0));
+                        if (!list.contains(null)) {
+                            PlaceDetailsSource.fetchPlacePhotos(list, new PlaceDetailsSource.PlacePhotosListener() {
+                                @Override
+                                public void onPlacePhotosListener(Bitmap bitmap) {
+                                    if (bitmap != null) {
+                                        Glide.with(requireView()).load(bitmap).into(fragmentEventBinding.eventImage);
+                                    }
+                                }
+
+                                @Override
+                                public void onError(String message) {
+                                    Log.e(TAG, message);
+                                    fragmentEventBinding.eventImage.setVisibility(View.GONE);
+                                }
+                            });
+                        }
+                    }
+                    fragmentEventBinding.eventTitle.setText(events.getTitle());
+                    fragmentEventBinding.eventCategory.setText(events.getCategory());
+                    //fragmentEventBinding.eventTimezone.setText(events.getTimezone());
+                    if (events.getEventSource() != null) {
+                        fragmentEventBinding.sourceTV.setText(events.getEventSource().getUrl());
+                    } else {
+                        fragmentEventBinding.sourceTV.setVisibility(View.GONE);
+                    }
+
+                    fragmentEventBinding.eventDescription.setText(events.getDescription());
+                    if (events.getEnd() != null) {
+                        String date = "FROM: " + events.getStart() + " TO: " + events.getEnd() + " (" + events.getTimezone() + ")";
+                        fragmentEventBinding.eventDate.setText(date);
+                    } else {
+                        String date = events.getStart() + " (" + events.getTimezone() + ")";
+                        fragmentEventBinding.eventDate.setText(date);
+                    }
+
+                    String place = result.getName() + "\n" + result.getAddress();
+                    fragmentEventBinding.eventLocation.setText(place);
+
+                    if (result.getPhoneNumber() != null) {
+                        fragmentEventBinding.phoneNumber.setText(result.getPhoneNumber());
+                        fragmentEventBinding.phoneNumber.setOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + result.getPhoneNumber()));
+                                startActivity(intent);
+                            }
+                        });
+                    } else {
+                        fragmentEventBinding.phoneNumber.setVisibility(View.GONE);
+                    }
+
+                    if (!events.getCategory().equals("movies")) { //PER ORA I MOVIES SON SOLO QUELLI DEL GIORNO CORRENTE
+                        eventsAndPlacesViewModel.getEventsDates(events.getTitle()).observe(getViewLifecycleOwner(), result2 -> {
+                            if (result2.size() > 1) {
+                                showAllEventsDate(result2);
+                            }
+                        });
+                    } else { //MOSTRA ORARI FILM DEL GIORNO CORRENTE
+                        showAllHoursMovie(events.getHours());
+                    }
+
+                    //EVENTI SIMILI ---------------------------------------------------------------------
+
+                    sameCategoryEvents(events);
+
+
+                    //GOOGLE MAPS ---------------------------------------------------------------------------------------------------
+
+                    googleMaps(new LatLng(result.getCoordinates()[0], result.getCoordinates()[1]), result.getName());
+
+                }
+            });
+        } else { //L'evento non ha il nome del place in cui si tiene
+            fragmentEventBinding.eventTitle.setText(events.getTitle());
+            fragmentEventBinding.eventCategory.setText(events.getCategory());
+            //fragmentEventBinding.eventTimezone.setText(events.getTimezone());
+            if (events.getEventSource() != null) {
+                fragmentEventBinding.sourceTV.setText(events.getEventSource().getUrl());
+            } else {
+                fragmentEventBinding.sourceTV.setVisibility(View.GONE);
+            }
+
+            fragmentEventBinding.eventDescription.setText(events.getDescription());
+            if (events.getEnd() != null) {
+                String date = "FROM: " + events.getStart() + " TO: " + events.getEnd() + " (" + events.getTimezone() + ")";
+                fragmentEventBinding.eventDate.setText(date);
+            } else {
+                String date = events.getStart() + " (" + events.getTimezone() + ")";
+                fragmentEventBinding.eventDate.setText(date);
+            }
+
+
+            if (!events.getPlaces().isEmpty()) {
+                String place = (CharSequence) events.getPlaces().get(0).getName() + "\n" + (CharSequence) events.getPlaces().get(0).getAddress();
+                fragmentEventBinding.eventLocation.setText(place);
+            } else {
+                fragmentEventBinding.eventLocation.setVisibility(View.GONE);
+            }
 
-        if (!events.getCategory().equals("movies")) { //PER ORA I MOVIES SON SOLO QUELLI DEL GIORNO CORRENTE
-            eventsAndPlacesViewModel.getEventsDates(events.getTitle()).observe(getViewLifecycleOwner(), result -> {
-                if (result.size() > 1) {
-                    showAllEventsDate(result);
-                }
-            });
-        } else { //MOSTRA ORARI FILM DEL GIORNO CORRENTE
-            //Log.i("NUMERO ROWS DB: ", String.valueOf(eventsAndPlacesViewModel.getCount()));
-            eventsAndPlacesViewModel.getMoviesHours(events.getTitle()).observe(getViewLifecycleOwner(), result -> {
-                if (result.length > 1) {
-                    showAllHoursMovie(result);
-                }
-            });
-        }
-
+            fragmentEventBinding.phoneNumber.setVisibility(View.GONE);
+
+            if (!events.getCategory().equals("movies")) { //PER ORA I MOVIES SON SOLO QUELLI DEL GIORNO CORRENTE
+                eventsAndPlacesViewModel.getEventsDates(events.getTitle()).observe(getViewLifecycleOwner(), result2 -> {
+                    if (result2.size() > 1) {
+                        showAllEventsDate(result2);
+                    }
+                });
+            } else { //MOSTRA ORARI FILM DEL GIORNO CORRENTE
+                showAllHoursMovie(events.getHours());
+            }
 
-        //EVENTI SIMILI ---------------------------------------------------------------------
+            //EVENTI SIMILI ---------------------------------------------------------------------
 
-        sameCategoryEvents(events);
+            sameCategoryEvents(events);
 
-        //PLACE
-
-        getPlace(events);
 
-        //GOOGLE MAPS ---------------------------------------------------------------------------------------------------
+            //GOOGLE MAPS ---------------------------------------------------------------------------------------------------
 
-        mMapView = requireView().findViewById(R.id.mapView);
-        mMapView.onCreate(savedInstanceState);
-        mMapView.onResume();
-        googleMaps(events);
+            googleMaps(new LatLng(events.getCoordinates()[0], events.getCoordinates()[1]), null);
 
-
+        }
         NavBackStackEntry navBackStackEntry = Navigation.
                 findNavController(view).getPreviousBackStackEntry();
 
         if (navBackStackEntry != null &&
-                navBackStackEntry.getDestination().getId() == R.id.homeFragment) {
+                navBackStackEntry.getDestination().
+
+                        getId() == R.id.homeFragment) {
             ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).
                     getMenu().findItem(R.id.homeFragment).setChecked(true);
         } else if (navBackStackEntry != null &&
-                navBackStackEntry.getDestination().getId() == R.id.myEventsFragment) {
+                navBackStackEntry.getDestination().
+
+                        getId() == R.id.myEventsFragment) {
             ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).
                     getMenu().findItem(R.id.myEventsFragment).setChecked(true);
         } else if (navBackStackEntry != null &&
-                navBackStackEntry.getDestination().getId() == R.id.mapsFragment) {
+                navBackStackEntry.getDestination().
+
+                        getId() == R.id.mapsFragment) {
             ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).
                     getMenu().findItem(R.id.mapsFragment).setChecked(true);
         }
+
     }
 
     private void showAllEventsDate(List<String> dates) {
@@ -250,7 +346,7 @@
         }
     }
 
-    private void sameCategoryEvents(Events events){
+    private void sameCategoryEvents(Events events) {
 
         RecyclerView recyclerView = fragmentEventBinding.recyclerviewEvents;
         LinearLayoutManager layoutManager =
@@ -268,6 +364,11 @@
                         Navigation.findNavController(requireView()).navigate(R.id.action_eventFragment_self, bundle);
                     }
 
+                    @Override
+                    public void onExportButtonPressed(Events events) {
+
+                    }
+
 
                     @Override
                     public void onFavoriteButtonPressed(int position) {
@@ -292,17 +393,10 @@
                         fragmentEventBinding.categoryEvents.setVisibility(View.VISIBLE);
                         fragmentEventBinding.recyclerviewEvents.setVisibility(View.VISIBLE);
                         if (!eventsAndPlacesViewModel.isLoading()) {
-                            if (eventsAndPlacesViewModel.isFirstLoading()) {
-                                eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());
-                                eventsAndPlacesViewModel.setFirstLoading(false);
-                                this.eventsList.addAll(fetchedEvents);
-                                eventsRecyclerViewAdapter.notifyItemRangeInserted(0,
-                                        this.eventsList.size());
-                            } else {
-                                eventsList.clear();
-                                eventsList.addAll(fetchedEvents);
-                                eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());
-                            }
+                            eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, this.eventsList.size());
+                            this.eventsList.clear();
+                            this.eventsList.addAll(fetchedEvents);
+                            eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());
                             fragmentEventBinding.progressBar.setVisibility(View.GONE);
 
                         } else {
@@ -382,18 +476,8 @@
         });
     }
 
-    private void getPlace(Events events){
-        eventsAndPlacesViewModel.getSinglePlace(events.getPlaces().get(0).getId()).observe(getViewLifecycleOwner(), result ->{
-            if(result!=null){
-                Log.i("PLACE",result.toString());
-            }
-            else{
-                Log.i("RESULT ", "NULL");
-            }
-        });
-    }
 
-    private void googleMaps(Events events){
+    private void googleMaps(LatLng latLng, String placeName) {
         try {
             MapsInitializer.initialize(getActivity().getApplicationContext());
         } catch (Exception e) {
@@ -404,11 +488,7 @@
             @Override
             public void onMapReady(GoogleMap mMap) {
                 googleMap = mMap;
-
-                // For dropping a marker at a point on the Map
-                double[] location = events.getCoordinates();
-                LatLng latLng = new LatLng(location[0], location[1]);
-                Marker marker = googleMap.addMarker(new MarkerOptions().position(latLng).title(events.getPlaces().get(0).getName()));
+                Marker marker = googleMap.addMarker(new MarkerOptions().position(latLng).title(placeName));
                 googleMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {
                     @Override
                     public boolean onMarkerClick(@NonNull Marker marker) {
@@ -437,7 +517,6 @@
     }
 
 
-
     @Override
     public void onDestroy() {
         super.onDestroy();
Index: app/src/main/res/values/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n    <!-- Base application theme. -->\r\n    <style name=\"Theme.EVENTIAPP\" parent=\"Theme.MaterialComponents.DayNight.DarkActionBar\">\r\n        <!-- Primary brand color. -->\r\n        <item name=\"colorPrimary\">@color/purple_500</item>\r\n        <item name=\"colorPrimaryVariant\">@color/purple_700</item>\r\n        <item name=\"colorOnPrimary\">@color/white</item>\r\n        <!-- Secondary brand color. -->\r\n        <item name=\"colorSecondary\">@color/teal_200</item>\r\n        <item name=\"colorSecondaryVariant\">@color/teal_700</item>\r\n        <item name=\"colorOnSecondary\">@color/black</item>\r\n        <!-- Status bar color. -->\r\n        <item name=\"android:statusBarColor\">?attr/colorPrimaryVariant</item>\r\n        <!-- Customize your theme here. -->\r\n    </style>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
--- a/app/src/main/res/values/themes.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/values/themes.xml	(date 1683276391906)
@@ -1,7 +1,8 @@
 <resources xmlns:tools="http://schemas.android.com/tools">
     <!-- Base application theme. -->
-    <style name="Theme.EVENTIAPP" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
+    <style name="Theme.EVENTIAPP" parent="Theme.Material3.Light.NoActionBar">
         <!-- Primary brand color. -->
+
         <item name="colorPrimary">@color/purple_500</item>
         <item name="colorPrimaryVariant">@color/purple_700</item>
         <item name="colorOnPrimary">@color/white</item>
Index: app/src/main/res/layout/fragment_event.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.core.widget.NestedScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:fillViewport=\"true\"\r\n    app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        android:padding=\"16dp\">\r\n\r\n        <ImageView\r\n            android:id=\"@+id/event_image\"\r\n            android:layout_width=\"match_parent\"\r\n            android:visibility=\"gone\"\r\n            android:layout_height=\"352dp\"\r\n            android:scaleType=\"centerCrop\"\r\n            android:src=\"@drawable/ic_my_events\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/event_title\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:paddingTop=\"16dp\"\r\n            android:paddingBottom=\"8dp\"\r\n            android:text=\"Titolo dell'evento\"\r\n            android:textSize=\"24sp\"\r\n            android:textStyle=\"bold\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/event_category\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:paddingBottom=\"8dp\"\r\n            android:text=\"Categoria dell'evento\"\r\n            android:textSize=\"16sp\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/event_date\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"Data dell'evento\"\r\n            android:textSize=\"18sp\"\r\n            android:textStyle=\"bold\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/event_labels\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"Labels dell'evento\"\r\n            android:textSize=\"16sp\" />\r\n\r\n        <com.google.android.material.button.MaterialButton\r\n            android:id=\"@+id/event_favorites_button\"\r\n            style=\"@style/Widget.MaterialComponents.Button.TextButton\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Aggiungi ai preferiti\"\r\n            app:icon=\"@drawable/ic_baseline_favorite_24\" />\r\n\r\n        <com.google.android.material.button.MaterialButton\r\n            android:id=\"@+id/event_calendar_button\"\r\n            style=\"@style/Widget.MaterialComponents.Button.TextButton\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Aggiungi al calendario\"\r\n            app:icon=\"@drawable/ic_baseline_edit_calendar_24\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/event_description\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:paddingTop=\"16dp\"\r\n            android:paddingBottom=\"16dp\"\r\n            android:text=\"Descrizione dell'evento\"\r\n            android:textSize=\"16sp\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:gravity=\"center_vertical\"\r\n            android:orientation=\"vertical\"\r\n            android:paddingBottom=\"8dp\">\r\n\r\n\r\n            <TextView\r\n                android:id=\"@+id/event_location\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"Location\"\r\n                android:textSize=\"18sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n        </LinearLayout>\r\n\r\n\r\n        <com.google.android.material.textview.MaterialTextView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:id=\"@+id/otherDatesTextView\"\r\n            android:visibility=\"gone\"\r\n            android:text=\"Altre date dell'evento\" />\r\n\r\n        <HorizontalScrollView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"10dp\"\r\n            android:layout_marginEnd=\"10dp\"\r\n            android:layout_marginBottom=\"5dp\"\r\n            android:scrollbars=\"horizontal\">\r\n            <LinearLayout\r\n                android:id=\"@+id/otherDatesLayout\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"horizontal\" />\r\n        </HorizontalScrollView>\r\n\r\n        <com.google.android.material.textview.MaterialTextView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:id=\"@+id/otherHoursTextView\"\r\n            android:visibility=\"gone\"\r\n            android:text=\"Orari del film\" />\r\n\r\n        <HorizontalScrollView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"10dp\"\r\n            android:layout_marginEnd=\"10dp\"\r\n            android:layout_marginBottom=\"5dp\"\r\n            android:scrollbars=\"horizontal\">\r\n            <LinearLayout\r\n                android:id=\"@+id/otherHoursLayout\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"horizontal\" />\r\n        </HorizontalScrollView>\r\n\r\n\r\n        <TextView\r\n            android:id=\"@+id/category_events\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:visibility=\"gone\"\r\n            android:text=\"Eventi simili\"\r\n            android:textSize=\"18sp\"\r\n            android:textStyle=\"bold\"\r\n            android:paddingTop=\"16dp\"\r\n            android:paddingBottom=\"8dp\"/>\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/recyclerview_events\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"horizontal\"\r\n            android:scrollbars=\"none\"\r\n            android:visibility=\"gone\"\r\n            app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@id/place_events\" />\r\n\r\n        <ProgressBar\r\n            android:id=\"@+id/progress_bar\"\r\n            style=\"?android:attr/progressBarStyle\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:visibility=\"gone\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n\r\n        <com.google.android.gms.maps.MapView\r\n            android:id=\"@+id/mapView\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"300dp\"\r\n            android:layout_marginTop=\"16dp\"/>\r\n\r\n    </LinearLayout>\r\n</androidx.core.widget.NestedScrollView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_event.xml b/app/src/main/res/layout/fragment_event.xml
--- a/app/src/main/res/layout/fragment_event.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/layout/fragment_event.xml	(date 1683624446091)
@@ -47,21 +47,13 @@
             android:textSize="18sp"
             android:textStyle="bold" />
 
-        <TextView
-            android:id="@+id/event_labels"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="Labels dell'evento"
-            android:textSize="16sp" />
-
         <com.google.android.material.button.MaterialButton
             android:id="@+id/event_favorites_button"
             style="@style/Widget.MaterialComponents.Button.TextButton"
             android:layout_gravity="center"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="Aggiungi ai preferiti"
+            android:text="Add to favorite"
             app:icon="@drawable/ic_baseline_favorite_24" />
 
         <com.google.android.material.button.MaterialButton
@@ -70,7 +62,7 @@
             android:layout_width="wrap_content"
             android:layout_gravity="center"
             android:layout_height="wrap_content"
-            android:text="Aggiungi al calendario"
+            android:text="Add to calendar"
             app:icon="@drawable/ic_baseline_edit_calendar_24" />
 
         <TextView
@@ -82,6 +74,15 @@
             android:text="Descrizione dell'evento"
             android:textSize="16sp" />
 
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:id="@+id/sourceTV"
+            android:autoLink="web"
+            android:linksClickable="true"
+            android:text="source">
+        </TextView>
+
         <LinearLayout
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
@@ -99,6 +100,14 @@
                 android:textSize="18sp"
                 android:textStyle="bold" />
 
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:id="@+id/phoneNumber"
+                android:text="PHONE NUMBER"
+                android:textSize="15sp">
+            </TextView>
+
         </LinearLayout>
 
 
@@ -107,7 +116,7 @@
             android:layout_height="match_parent"
             android:id="@+id/otherDatesTextView"
             android:visibility="gone"
-            android:text="Altre date dell'evento" />
+            android:text="Other dates of the event" />
 
         <HorizontalScrollView
             android:layout_width="match_parent"
@@ -128,7 +137,7 @@
             android:layout_height="match_parent"
             android:id="@+id/otherHoursTextView"
             android:visibility="gone"
-            android:text="Orari del film" />
+            android:text="Movie times" />
 
         <HorizontalScrollView
             android:layout_width="match_parent"
@@ -150,7 +159,7 @@
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:visibility="gone"
-            android:text="Eventi simili"
+            android:text="Similar events"
             android:textSize="18sp"
             android:textStyle="bold"
             android:paddingTop="16dp"
@@ -184,8 +193,8 @@
         <com.google.android.gms.maps.MapView
             android:id="@+id/mapView"
             android:layout_width="match_parent"
-            android:layout_height="300dp"
-            android:layout_marginTop="16dp"/>
+            android:layout_height="300sp"
+            android:layout_marginTop="16sp"/>
 
     </LinearLayout>
 </androidx.core.widget.NestedScrollView>
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">EVENTI APP</string>\r\n    <string name=\"home\">HOME</string>\r\n    <string name=\"map\">MAP</string>\r\n    <string name=\"events\">MY EVENTS</string>\r\n    <string name=\"search\">SEARCH</string>\r\n\r\n    <string name=\"content_description_fav_addition\">Add the news to the favorite list</string>\r\n\r\n    <string name=\"error_retrieving_events\">Error in retrieving the events</string>\r\n    <string name=\"api_key_error\">API Key not valid or maximum number of requests reached</string>\r\n    <string name=\"unexpected_error\">Unexpected error</string>\r\n\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/values/strings.xml	(date 1683550359424)
@@ -10,6 +10,15 @@
     <string name="error_retrieving_events">Error in retrieving the events</string>
     <string name="api_key_error">API Key not valid or maximum number of requests reached</string>
     <string name="unexpected_error">Unexpected error</string>
+    <string name="cancel_text">Cancel</string>
+
+
+    <string-array name="sorting_parameters">
+        <item>Earliest date</item>
+        <item>Latest date</item>
+        <item>Alphabet (A-Z)</item>
+        <item>Alphabet (Z-A)</item>
+    </string-array>
 
 
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/eventiapp/source/events/EventsLocalDataSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.events;\r\n\r\n\r\nimport static com.example.eventiapp.util.Constants.ENCRYPTED_DATA_FILE_NAME;\r\nimport static com.example.eventiapp.util.Constants.ENCRYPTED_SHARED_PREFERENCES_FILE_NAME;\r\nimport static com.example.eventiapp.util.Constants.LAST_UPDATE;\r\nimport static com.example.eventiapp.util.Constants.SHARED_PREFERENCES_FILE_NAME;\r\n\r\nimport android.util.Log;\r\n\r\nimport com.example.eventiapp.database.EventsDao;\r\nimport com.example.eventiapp.database.RoomDatabase;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.util.DataEncryptionUtil;\r\nimport com.example.eventiapp.util.SharedPreferencesUtil;\r\n\r\nimport java.util.List;\r\n\r\npublic class EventsLocalDataSource extends BaseEventsLocalDataSource {\r\n\r\n    private final EventsDao eventsDao;\r\n    private final SharedPreferencesUtil sharedPreferences;\r\n    private final DataEncryptionUtil dataEncryptionUtil;\r\n\r\n    public EventsLocalDataSource(RoomDatabase roomDatabase, SharedPreferencesUtil sharedPreferences, DataEncryptionUtil dataEncryptionUtil) {\r\n        this.eventsDao = roomDatabase.eventsDao();\r\n        this.sharedPreferences = sharedPreferences;\r\n        this.dataEncryptionUtil = dataEncryptionUtil;\r\n    }\r\n\r\n    @Override\r\n    public void getEvents() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            EventsApiResponse eventsApiResponse = new EventsApiResponse();\r\n            eventsApiResponse.setEventsList(eventsDao.getAll());\r\n            eventsCallback.onSuccessFromLocal(eventsApiResponse);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getFavoriteEvents() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<Events> favoriteEvents = eventsDao.getFavoriteEvents();\r\n            eventsCallback.onEventsFavoriteStatusChanged(favoriteEvents);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getCategoryEvents(String category) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<Events> categoryEvents = eventsDao.getCategoryEvents(category);\r\n            eventsCallback.onEventsCategory(categoryEvents);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getSingleEvent(long id) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n          Events event =eventsDao.getEvents(id);\r\n          eventsCallback.onSingleEvent(event);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getPlaceEvent(String id) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<Events> events=eventsDao.getPlaceEvents(id);\r\n            eventsCallback.onEventsPlace(events);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getEventsDates(String name) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<String> dates=eventsDao.getEventsDates(name);\r\n            eventsCallback.onEventsDates(dates);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getMoviesHours(String name) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            String[] hours=eventsDao.getMoviesHours(name);\r\n            eventsCallback.onMoviesHours(hours);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void updateEvents(Events events) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            if (events != null) {\r\n                int rowUpdatedCounter = eventsDao.updateSingleFavoriteEvents(events);\r\n                if (rowUpdatedCounter == 1) {\r\n                    Events updatedEvents = eventsDao.getEvents(events.getId_db());\r\n                    eventsCallback.onEventsFavoriteStatusChanged(updatedEvents, eventsDao.getFavoriteEvents());\r\n                } else {\r\n                    eventsCallback.onFailureFromLocal(new Exception(\"ERRORE\"));\r\n                }\r\n            } else {\r\n                List<Events> allEvents = eventsDao.getAll();\r\n                for (Events e : allEvents) {\r\n                    e.setSynchronized(false);\r\n                    eventsDao.updateSingleFavoriteEvents(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void deleteFavoriteEvents() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<Events> favoriteEvents = eventsDao.getFavoriteEvents();\r\n            for (Events events : favoriteEvents) {\r\n                events.setFavorite(false);\r\n            }\r\n            int updatedRowsNumber = eventsDao.updateListFavoriteEvents(favoriteEvents);\r\n            if (updatedRowsNumber == favoriteEvents.size()) {\r\n                eventsCallback.onDeleteFavoriteEventsSuccess(favoriteEvents);\r\n            } else {\r\n                eventsCallback.onFailureFromLocal(new Exception(\"ERRORE\"));\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void insertEvents(EventsApiResponse eventsApiResponse) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            List<Events> allEvents = eventsDao.getAll();\r\n            List<Events> eventsList = eventsApiResponse.getEventsList();\r\n\r\n            if (eventsList != null) {\r\n                for (Events events : allEvents) {\r\n                    if (eventsList.contains(events)) {\r\n                        eventsList.set(eventsList.indexOf(events), events);\r\n                    }\r\n                }\r\n                List<Long> insertedEventsIds = eventsDao.insertEventsList(eventsList);\r\n                for (int i = 0; i < eventsList.size(); i++) {\r\n                    eventsList.get(i).setId_db(insertedEventsIds.get(i));\r\n                }\r\n\r\n                sharedPreferences.writeStringData(SHARED_PREFERENCES_FILE_NAME,\r\n                        LAST_UPDATE, String.valueOf(System.currentTimeMillis()));\r\n\r\n                eventsCallback.onSuccessFromLocal(eventsApiResponse);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void insertEvents(List<Events> eventsList) {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            if (eventsList != null) {\r\n                List<Events> allEvents = eventsDao.getAll();\r\n\r\n                for (Events events : allEvents) {\r\n                    if (eventsList.contains(events)) {\r\n                        events.setSynchronized(true);\r\n                        eventsList.set(eventsList.indexOf(events), events);\r\n                    }\r\n                }\r\n\r\n                List<Long> insertedEventsIds = eventsDao.insertEventsList(eventsList);\r\n                for (int i = 0; i < eventsList.size(); i++) {\r\n                    eventsList.get(i).setId_db(insertedEventsIds.get(i));\r\n                }\r\n\r\n                EventsApiResponse eventsApiResponse = new EventsApiResponse();\r\n                eventsApiResponse.setEventsList(eventsList);\r\n                eventsCallback.onSuccessSynchronization();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void getCount() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            int count=eventsDao.count();\r\n            eventsCallback.onCount(count);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void deleteAll() {\r\n        RoomDatabase.databaseWriteExecutor.execute(() -> {\r\n            int eventsCounter = eventsDao.getAll().size();\r\n            int deletedEvents = eventsDao.deleteAll();\r\n\r\n            Log.i(\"ELEMENTI CANCELLATI:\", String.valueOf(eventsCounter));\r\n            if (eventsCounter == deletedEvents) {\r\n                sharedPreferences.deleteAll(SHARED_PREFERENCES_FILE_NAME);\r\n                dataEncryptionUtil.deleteAll(ENCRYPTED_SHARED_PREFERENCES_FILE_NAME, ENCRYPTED_DATA_FILE_NAME);\r\n                eventsCallback.onSuccessDeletion();\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/events/EventsLocalDataSource.java b/app/src/main/java/com/example/eventiapp/source/events/EventsLocalDataSource.java
--- a/app/src/main/java/com/example/eventiapp/source/events/EventsLocalDataSource.java	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/java/com/example/eventiapp/source/events/EventsLocalDataSource.java	(date 1683546488650)
@@ -57,23 +57,63 @@
     @Override
     public void getSingleEvent(long id) {
         RoomDatabase.databaseWriteExecutor.execute(() -> {
-          Events event =eventsDao.getEvents(id);
-          eventsCallback.onSingleEvent(event);
+            Events event = eventsDao.getEvents(id);
+            eventsCallback.onSingleEvent(event);
         });
     }
 
     @Override
     public void getPlaceEvent(String id) {
         RoomDatabase.databaseWriteExecutor.execute(() -> {
-            List<Events> events=eventsDao.getPlaceEvents(id);
+            List<Events> events = eventsDao.getPlaceEvents(id);
             eventsCallback.onEventsPlace(events);
         });
     }
 
+    @Override
+    public void getEventsInADate(String date) {
+        RoomDatabase.databaseWriteExecutor.execute(() -> {
+            List<Events> events = eventsDao.getEventsInADate(date);
+            eventsCallback.onEventsInADate(events);
+        });
+    }
+
+    @Override
+    public void getAllCategories() {
+        RoomDatabase.databaseWriteExecutor.execute(() -> {
+            List<String> categories = eventsDao.getAllCategories();
+            eventsCallback.onAllCategories(categories);
+        });
+    }
+
+    @Override
+    public void getCategoriesEvents(List<String> categories) {
+        RoomDatabase.databaseWriteExecutor.execute(() -> {
+            List<Events> events = eventsDao.getCategoriesEvents(categories);
+            eventsCallback.onCategoriesEvents(events);
+        });
+    }
+
+    @Override
+    public void getEventsBetweenDates(String startDate, String endDate) {
+        RoomDatabase.databaseWriteExecutor.execute(() -> {
+            List<Events> events = eventsDao.getEventsBetweenDates(startDate, endDate);
+            eventsCallback.onEventsBetweenDates(events);
+        });
+    }
+
+    @Override
+    public void getCategoryEventsBetweenDates(String startDate, String endDate, List<String> categories) {
+        RoomDatabase.databaseWriteExecutor.execute(() -> {
+            List<Events> events = eventsDao.getCategoryEventsBetweenDates(startDate, endDate, categories);
+            eventsCallback.onCategoryEventsBetweenDates(events);
+        });
+    }
+
     @Override
     public void getEventsDates(String name) {
         RoomDatabase.databaseWriteExecutor.execute(() -> {
-            List<String> dates=eventsDao.getEventsDates(name);
+            List<String> dates = eventsDao.getEventsDates(name);
             eventsCallback.onEventsDates(dates);
         });
     }
@@ -81,7 +121,7 @@
     @Override
     public void getMoviesHours(String name) {
         RoomDatabase.databaseWriteExecutor.execute(() -> {
-            String[] hours=eventsDao.getMoviesHours(name);
+            String[] hours = eventsDao.getMoviesHours(name);
             eventsCallback.onMoviesHours(hours);
         });
     }
@@ -176,7 +216,7 @@
     @Override
     public void getCount() {
         RoomDatabase.databaseWriteExecutor.execute(() -> {
-            int count=eventsDao.count();
+            int count = eventsDao.count();
             eventsCallback.onCount(count);
         });
     }
Index: app/src/main/res/layout/fragment_places.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ui.main.AllEventsFragment\">\r\n\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/recyclerview_places\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_marginBottom=\"80dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/progress_bar\"\r\n        style=\"?android:attr/progressBarStyle\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:visibility=\"gone\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_places.xml b/app/src/main/res/layout/fragment_places.xml
--- a/app/src/main/res/layout/fragment_places.xml	(revision d9a58c9bba42aff3c3baac30ee47592bdffe2900)
+++ b/app/src/main/res/layout/fragment_places.xml	(date 1683548191347)
@@ -11,7 +11,6 @@
         android:id="@+id/recyclerview_places"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_marginBottom="80dp"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
