Index: app/src/main/java/com/example/eventiapp/util/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.util;\r\n\r\npublic class Constants {\r\n\r\n    // Constants for EventsApi (https://api.predicthq.com)\r\n    public static final String EVENTS_API_BASE_URL = \"https://api.predicthq.com/v1/\";\r\n    public static final String EVENTS_ENDPOINT = \"events\";\r\n    public static final String PLACES_ENDPOINT = \"places\";\r\n    public static final String CLIENT_ID = \"Client-ID\";\r\n    public static final String EVENTS_COUNTRY = \"country\";\r\n    public static final String EVENTS_CATEGORY = \"category\";\r\n    public static final String EVENTS_LIMIT = \"limit\";\r\n    public static final String EVENTS_START = \"start.gte\";\r\n    public static final String EVENTS_WITHIN = \"within\";\r\n    public static final String EVENTS_SORT = \"sort\";\r\n    public static final String EVENTS_END = \"end.lte\";\r\n    public static final String CLIENT_ID_VALUE = \"JY2hDOGTKiMtHH_VdBulMoKQai3uJq49AazyMAfJDDuzOqiJN4uq6A\";\r\n    public static final String TOKEN_API = \"Authorization\";\r\n    public static final String CONTENT_TYPE = \"Accept\";\r\n    public static final String CONTENT_TYPE_VALUE = \"application/json\";\r\n\r\n    //API FOURSQUARE\r\n    public static final String FOURSQUARE_API_BASE_URL = \"https://api.foursquare.com/v3/places/match\";\r\n    public static final String FOURSQUARE_ENDPOINT = \"events\";\r\n    public static final String FOURSQUARE_NAME=\"name\";\r\n    public static final String FOURSQUARE_ADDRESS=\"address\";\r\n    public static final String FOURSQUARE_CITY=\"city\";\r\n    public static final String FOURSQUARE_CC=\"cc\";\r\n\r\n\r\n    public static final String LAST_UPDATE = \"last_update\";\r\n    public static final int FRESH_TIMEOUT = 60 * 60 * 1000; // 1 hour in milliseconds\r\n    public static final int EVENTS_PAGE_SIZE_VALUE = 10;\r\n\r\n    public static final String RETROFIT_ERROR = \"retrofit_error\";\r\n    public static final String API_KEY_ERROR = \"api_key_error\";\r\n\r\n    public static final String FIREBASE_REALTIME_DATABASE = \"https://accessfb-562e9-default-rtdb.europe-west1.firebasedatabase.app\";\r\n    public static final String FIREBASE_USERS_COLLECTION = \"users\";\r\n    public static final String FIREBASE_FAVORITE_EVENTS_COLLECTION = \"favorite_events\";\r\n\r\n    public static final int REQUEST_CODE = 123;\r\n\r\n\r\n    public static final String UNEXPECTED_ERROR = \"unexpected_error\";\r\n    public static final String INVALID_USER_ERROR = \"invalidUserError\";\r\n    public static final String INVALID_CREDENTIALS_ERROR = \"invalidCredentials\";\r\n    public static final String USER_COLLISION_ERROR = \"userCollisionError\";\r\n    public static final String WEAK_PASSWORD_ERROR = \"passwordIsWeak\";\r\n\r\n\r\n    public static final int MINIMUM_PASSWORD_LENGTH = 6;\r\n\r\n    // Constants for Room database\r\n    public static final String EVENTS_DATABASE_NAME = \"EVENTS_DB\";\r\n\r\n    //SHARED PREFERENCES\r\n    public static final String SHARED_PREFERENCES_FILE_NAME = \"preferences\";\r\n    public static final String SHARED_PREFERENCES_FIRST_LOADING = \"first_loading\";\r\n    public static final String SHARED_PREFERENCES_LANGUAGE=\"IT\";\r\n\r\n    // Constants for EncryptedSharedPreferences\r\n    public static final String ENCRYPTED_SHARED_PREFERENCES_FILE_NAME = \"encrypted_preferences\";\r\n\r\n    // Constants for encrypted files\r\n    public static final String ENCRYPTED_DATA_FILE_NAME = \"encrypted_file.txt\";\r\n\r\n    //RECYCLER VIEW ADAPTER\r\n    public static final int MAX_ITEMS = 10;\r\n    public static final int EVENTS_VIEW_TYPE = 0;\r\n    public static final int LOADING_VIEW_TYPE = 1;\r\n    public static final int PLACES_VIEW_TYPE = 2;\r\n    public static final int EVENTS2_VIEW_TYPE = 3;\r\n    public static final int PLACES2_VIEW_TYPE = 4;\r\n\r\n\r\n    // Constants for EncryptedSharedPreferences\r\n    public static final String EMAIL_ADDRESS = \"email_address\";\r\n    public static final String PASSWORD = \"password\";\r\n    public static final String ID_TOKEN = \"google_token\";\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/util/Constants.java b/app/src/main/java/com/example/eventiapp/util/Constants.java
--- a/app/src/main/java/com/example/eventiapp/util/Constants.java	
+++ b/app/src/main/java/com/example/eventiapp/util/Constants.java	
@@ -22,10 +22,10 @@
     //API FOURSQUARE
     public static final String FOURSQUARE_API_BASE_URL = "https://api.foursquare.com/v3/places/match";
     public static final String FOURSQUARE_ENDPOINT = "events";
-    public static final String FOURSQUARE_NAME="name";
-    public static final String FOURSQUARE_ADDRESS="address";
-    public static final String FOURSQUARE_CITY="city";
-    public static final String FOURSQUARE_CC="cc";
+    public static final String FOURSQUARE_NAME = "name";
+    public static final String FOURSQUARE_ADDRESS = "address";
+    public static final String FOURSQUARE_CITY = "city";
+    public static final String FOURSQUARE_CC = "cc";
 
 
     public static final String LAST_UPDATE = "last_update";
@@ -57,7 +57,7 @@
     //SHARED PREFERENCES
     public static final String SHARED_PREFERENCES_FILE_NAME = "preferences";
     public static final String SHARED_PREFERENCES_FIRST_LOADING = "first_loading";
-    public static final String SHARED_PREFERENCES_LANGUAGE="IT";
+    public static final String SHARED_PREFERENCES_LANGUAGE = "IT";
 
     // Constants for EncryptedSharedPreferences
     public static final String ENCRYPTED_SHARED_PREFERENCES_FILE_NAME = "encrypted_preferences";
@@ -72,6 +72,11 @@
     public static final int PLACES_VIEW_TYPE = 2;
     public static final int EVENTS2_VIEW_TYPE = 3;
     public static final int PLACES2_VIEW_TYPE = 4;
+    public static final int EVENTS3_VIEW_TYPE = 5;
+    public static final int PLACES3_VIEW_TYPE = 6;
+
+    //IMAGE
+    public static final int REQUEST_CODE_PICK_IMAGE = 1000;
 
 
     // Constants for EncryptedSharedPreferences
Index: app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.adapter;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS2_VIEW_TYPE;\r\nimport static com.example.eventiapp.util.Constants.EVENTS_VIEW_TYPE;\r\nimport static com.example.eventiapp.util.Constants.LOADING_VIEW_TYPE;\r\nimport static com.example.eventiapp.util.Constants.MAX_ITEMS;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Application;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.content.res.AppCompatResources;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.util.DateUtils;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class EventsRecyclerViewAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\r\n\r\n    private final int typeOfView;\r\n\r\n    public interface OnItemClickListener {\r\n        void onEventsItemClick(Events events);\r\n\r\n        void onExportButtonPressed(Events events);\r\n\r\n        void onShareButtonPressed(Events events);\r\n\r\n        void onFavoriteButtonPressed(int position);\r\n    }\r\n\r\n    private final List<Events> eventsList;\r\n    private final Application application;\r\n    private final OnItemClickListener onItemClickListener;\r\n\r\n    public EventsRecyclerViewAdapter(List<Events> eventsList, Application application, int typeOfView,\r\n                                     OnItemClickListener onItemClickListener) {\r\n        this.eventsList = eventsList;\r\n        this.application = application;\r\n        this.onItemClickListener = onItemClickListener;\r\n        this.typeOfView = typeOfView;\r\n    }\r\n\r\n\r\n    @Override\r\n    public int getItemViewType(int position) {\r\n        if (typeOfView == 0) {\r\n            if (eventsList.get(position) == null) {\r\n                return LOADING_VIEW_TYPE;\r\n            } else {\r\n                return EVENTS_VIEW_TYPE;\r\n            }\r\n        } else if (typeOfView == 3) { //EVENTS 2\r\n            if (eventsList.get(position) == null) {\r\n                return LOADING_VIEW_TYPE;\r\n            } else {\r\n                return EVENTS2_VIEW_TYPE;\r\n            }\r\n        }\r\n        return EVENTS_VIEW_TYPE;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view;\r\n\r\n        if (viewType == EVENTS_VIEW_TYPE) {\r\n            view = LayoutInflater.from(parent.getContext()).\r\n                    inflate(R.layout.events_list_item, parent, false);\r\n            return new EventsViewHolder(view);\r\n        } else if (viewType == EVENTS2_VIEW_TYPE) {\r\n            view = LayoutInflater.from(parent.getContext()).\r\n                    inflate(R.layout.events2_list_item, parent, false);\r\n            return new Events2ViewHolder(view);\r\n        } else {\r\n            view = LayoutInflater.from(parent.getContext()).\r\n                    inflate(R.layout.events_loading_item, parent, false);\r\n            return new LoadingEventsViewHolder(view);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n        if (holder instanceof EventsViewHolder) {\r\n            ((EventsViewHolder) holder).bind(eventsList.get(position));\r\n        } else if (holder instanceof LoadingEventsViewHolder) {\r\n            ((LoadingEventsViewHolder) holder).activate();\r\n        } else if (holder instanceof Events2ViewHolder) {\r\n            ((Events2ViewHolder) holder).bind(eventsList.get(position));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (eventsList != null && typeOfView == 0) { //EVENTS\r\n            return eventsList.size();\r\n        } else if (eventsList != null && typeOfView == 3) { //EVENTS2\r\n            return Math.min(eventsList.size(), MAX_ITEMS);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public class EventsViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\r\n\r\n        private final TextView textViewTitle;\r\n        private final TextView textViewDate;\r\n        private final TextView textViewCategory;\r\n        private final TextView textViewPlace;\r\n        private final TextView textViewAttendance;\r\n        private final TextView textViewNumberAttendance;\r\n        private final ImageView imageViewEvent;\r\n        private final ImageView imageViewFavoriteEvent;\r\n\r\n        public EventsViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            textViewTitle = itemView.findViewById(R.id.titleTextView);\r\n            textViewDate = itemView.findViewById(R.id.dateTextView);\r\n            textViewCategory = itemView.findViewById(R.id.categoryTextView);\r\n            textViewPlace = itemView.findViewById(R.id.placeTextView);\r\n            textViewAttendance = itemView.findViewById(R.id.attendanceTextView);\r\n            textViewNumberAttendance = itemView.findViewById(R.id.numberAttendanceTextView);\r\n            imageViewEvent = itemView.findViewById(R.id.imageViewEvent);\r\n            imageViewFavoriteEvent = itemView.findViewById(R.id.imageViewFavorite);\r\n            ImageView imageViewShare = itemView.findViewById(R.id.imageViewShare);\r\n            ImageView imageViewExport = itemView.findViewById(R.id.imageViewExport);\r\n            itemView.setOnClickListener(this);\r\n            imageViewShare.setOnClickListener(this);\r\n            imageViewFavoriteEvent.setOnClickListener(this);\r\n            imageViewExport.setOnClickListener(this);\r\n        }\r\n\r\n        @SuppressLint(\"SimpleDateFormat\")\r\n        public void bind(Events events) {\r\n            textViewTitle.setText(events.getTitle());\r\n            //EVENTS UCI ED EVENTS PIRELLI HANGAR NON HANNO FINE DATA\r\n            SimpleDateFormat outputFormat;\r\n            if(events.getEventSource()==null) {  //QUESTI EVENTI HANNO ANCHE L'ORARIO\r\n                outputFormat = new SimpleDateFormat(\"dd MMM yyyy, HH:mm\");\r\n            }else{\r\n                outputFormat = new SimpleDateFormat(\"dd MMM yyyy\");\r\n            }\r\n            if (events.getEnd() != null && !Objects.equals(events.getStart(), events.getEnd())) {\r\n                String dateStart = events.getStart();\r\n                String dateEnd = events.getEnd();\r\n                Date date1 = DateUtils.parseDateToShow(dateStart, \"EN\");\r\n                Date date2 = DateUtils.parseDateToShow(dateEnd, \"EN\");\r\n                String formattedDate = outputFormat.format(Objects.requireNonNull(date1)) + \" - \" + outputFormat.format(Objects.requireNonNull(date2));\r\n                textViewDate.setText(formattedDate);\r\n                textViewDate.setTextSize(13);\r\n            } else if (events.getStart() != null) {\r\n                String date = events.getStart();\r\n                Date date1 = DateUtils.parseDateToShow(date, \"EN\");\r\n                String formattedDate = outputFormat.format(Objects.requireNonNull(date1));\r\n                textViewDate.setText(formattedDate);\r\n            } else {\r\n                textViewDate.setVisibility(View.GONE);\r\n            }\r\n            textViewCategory.setText(events.getCategory());\r\n            if (events.getPlaces() != null && !events.getPlaces().isEmpty()) {\r\n                textViewPlace.setText(events.getPlaces().get(0).getName());\r\n            } else {\r\n                textViewPlace.setVisibility(View.GONE);\r\n            }\r\n            if (events.getAttendance() != 0) {\r\n                textViewNumberAttendance.setText(String.valueOf(events.getAttendance()));\r\n            } else {\r\n                textViewNumberAttendance.setVisibility(View.GONE);\r\n                textViewAttendance.setVisibility(View.GONE);\r\n            }\r\n            if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {\r\n                Glide.with(itemView).load(events.getEventSource().getUrlPhoto()).into(imageViewEvent);\r\n            } else {\r\n                imageViewEvent.setVisibility(View.GONE);\r\n            }\r\n            setImageViewFavoriteEvent(eventsList.get(getAdapterPosition()).isFavorite());\r\n        }\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (v.getId() == R.id.imageViewFavorite) {\r\n                setImageViewFavoriteEvent(!eventsList.get(getAdapterPosition()).isFavorite());\r\n                onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());\r\n            } else if (v.getId() == R.id.imageViewShare) {\r\n                onItemClickListener.onShareButtonPressed(eventsList.get(getAdapterPosition()));\r\n            } else if (v.getId() == R.id.imageViewExport) {\r\n                onItemClickListener.onExportButtonPressed(eventsList.get(getAdapterPosition()));\r\n            } else {\r\n                onItemClickListener.onEventsItemClick(eventsList.get(getAdapterPosition()));\r\n            }\r\n        }\r\n\r\n        private void setImageViewFavoriteEvent(boolean isFavorite) {\r\n            if (isFavorite) {\r\n                imageViewFavoriteEvent.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_24));\r\n            } else {\r\n                imageViewFavoriteEvent.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_border_24));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class Events2ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\r\n\r\n        private final TextView textViewTitle;\r\n        private final TextView textViewCategory;\r\n        private final TextView textViewPlace;\r\n        private final TextView textViewDate;\r\n        private final TextView textViewAttendance;\r\n        private final TextView textViewNumberAttendance;\r\n        private final ImageView imageViewEvent;\r\n        private final ImageView imageViewFavoriteEvent;\r\n\r\n        public Events2ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            textViewTitle = itemView.findViewById(R.id.titleTextView);\r\n            textViewDate = itemView.findViewById(R.id.dateTextView);\r\n            textViewCategory = itemView.findViewById(R.id.categoryTextView);\r\n            textViewPlace = itemView.findViewById(R.id.placeTextView);\r\n            textViewAttendance = itemView.findViewById(R.id.attendanceTextView);\r\n            textViewNumberAttendance = itemView.findViewById(R.id.numberAttendanceTextView);\r\n            imageViewEvent = itemView.findViewById(R.id.imageViewEvent);\r\n            imageViewFavoriteEvent = itemView.findViewById(R.id.imageViewFavorite);\r\n            ImageView imageViewShareEvent = itemView.findViewById(R.id.imageViewShare);\r\n            itemView.setOnClickListener(this);\r\n            imageViewFavoriteEvent.setOnClickListener(this);\r\n            imageViewShareEvent.setOnClickListener(this);\r\n        }\r\n\r\n        @SuppressLint(\"SimpleDateFormat\")\r\n        public void bind(Events events) {\r\n            textViewTitle.setText(events.getTitle());\r\n            textViewCategory.setText(events.getCategory());\r\n            SimpleDateFormat outputFormat;\r\n            if(events.getEventSource()==null) {  //QUESTI EVENTI HANNO ANCHE L'ORARIO\r\n                outputFormat = new SimpleDateFormat(\"dd MMM yyyy, HH:mm\");\r\n            }else{\r\n                outputFormat = new SimpleDateFormat(\"dd MMM yyyy\");\r\n            }\r\n            if (events.getStart() != null) {\r\n                String date = events.getStart();\r\n                Date date1 = DateUtils.parseDateToShow(date, \"EN\");\r\n                String formattedDate = outputFormat.format(Objects.requireNonNull(date1));\r\n                textViewDate.setText(formattedDate);\r\n            } else {\r\n                textViewDate.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (events.getPlaces() != null && !events.getPlaces().isEmpty()) {\r\n                textViewPlace.setText(events.getPlaces().get(0).getName());\r\n            } else {\r\n                textViewPlace.setVisibility(View.GONE);\r\n            }\r\n            if (events.getAttendance() != 0) {\r\n                textViewNumberAttendance.setText(String.valueOf(events.getAttendance()));\r\n            } else {\r\n                textViewNumberAttendance.setVisibility(View.GONE);\r\n                textViewAttendance.setVisibility(View.GONE);\r\n            }\r\n            if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {\r\n                Glide.with(itemView).load(events.getEventSource().getUrlPhoto()).into(imageViewEvent);\r\n            } else {\r\n                imageViewEvent.setVisibility(View.GONE);\r\n            }\r\n            setImageViewFavoriteEvent(eventsList.get(getAdapterPosition()).isFavorite());\r\n        }\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (v.getId() == R.id.imageViewFavorite) {\r\n                setImageViewFavoriteEvent(!eventsList.get(getAdapterPosition()).isFavorite());\r\n                onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());\r\n            } else if (v.getId() == R.id.imageViewShare) {\r\n                onItemClickListener.onShareButtonPressed(eventsList.get(getAdapterPosition()));\r\n            } else {\r\n                onItemClickListener.onEventsItemClick(eventsList.get(getAdapterPosition()));\r\n            }\r\n        }\r\n\r\n        private void setImageViewFavoriteEvent(boolean isFavorite) {\r\n            if (isFavorite) {\r\n                imageViewFavoriteEvent.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_24));\r\n            } else {\r\n                imageViewFavoriteEvent.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_border_24));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public static class LoadingEventsViewHolder extends RecyclerView.ViewHolder {\r\n        private final ProgressBar progressBar;\r\n\r\n        LoadingEventsViewHolder(View view) {\r\n            super(view);\r\n            progressBar = view.findViewById(R.id.progressbar_loading_event);\r\n        }\r\n\r\n        public void activate() {\r\n            progressBar.setIndeterminate(true);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java b/app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java
--- a/app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java	
+++ b/app/src/main/java/com/example/eventiapp/adapter/EventsRecyclerViewAdapter.java	
@@ -1,6 +1,7 @@
 package com.example.eventiapp.adapter;
 
 import static com.example.eventiapp.util.Constants.EVENTS2_VIEW_TYPE;
+import static com.example.eventiapp.util.Constants.EVENTS3_VIEW_TYPE;
 import static com.example.eventiapp.util.Constants.EVENTS_VIEW_TYPE;
 import static com.example.eventiapp.util.Constants.LOADING_VIEW_TYPE;
 import static com.example.eventiapp.util.Constants.MAX_ITEMS;
@@ -40,6 +41,10 @@
         void onShareButtonPressed(Events events);
 
         void onFavoriteButtonPressed(int position);
+
+        void onModeEventButtonPressed(Events events);
+
+        void onDeleteEventButtonPressed(Events events);
     }
 
     private final List<Events> eventsList;
@@ -69,7 +74,12 @@
             } else {
                 return EVENTS2_VIEW_TYPE;
             }
-        }
+        } else if (typeOfView == 5) //EVENT 3{
+            if (eventsList.get(position) == null) {
+                return LOADING_VIEW_TYPE;
+            } else {
+                return EVENTS3_VIEW_TYPE;
+            }
         return EVENTS_VIEW_TYPE;
     }
 
@@ -86,6 +96,10 @@
             view = LayoutInflater.from(parent.getContext()).
                     inflate(R.layout.events2_list_item, parent, false);
             return new Events2ViewHolder(view);
+        } else if (viewType == EVENTS3_VIEW_TYPE) {
+            view = LayoutInflater.from(parent.getContext()).
+                    inflate(R.layout.event3_list_item, parent, false);
+            return new Events3ViewHolder(view);
         } else {
             view = LayoutInflater.from(parent.getContext()).
                     inflate(R.layout.events_loading_item, parent, false);
@@ -101,12 +115,14 @@
             ((LoadingEventsViewHolder) holder).activate();
         } else if (holder instanceof Events2ViewHolder) {
             ((Events2ViewHolder) holder).bind(eventsList.get(position));
+        } else if (holder instanceof Events3ViewHolder) {
+            ((Events3ViewHolder) holder).bind(eventsList.get(position));
         }
     }
 
     @Override
     public int getItemCount() {
-        if (eventsList != null && typeOfView == 0) { //EVENTS
+        if (eventsList != null && (typeOfView == 0 || typeOfView == 5)) { //EVENTS 1 e EVENTS 3
             return eventsList.size();
         } else if (eventsList != null && typeOfView == 3) { //EVENTS2
             return Math.min(eventsList.size(), MAX_ITEMS);
@@ -148,9 +164,9 @@
             textViewTitle.setText(events.getTitle());
             //EVENTS UCI ED EVENTS PIRELLI HANGAR NON HANNO FINE DATA
             SimpleDateFormat outputFormat;
-            if(events.getEventSource()==null) {  //QUESTI EVENTI HANNO ANCHE L'ORARIO
+            if (events.getEventSource() == null) {  //QUESTI EVENTI HANNO ANCHE L'ORARIO
                 outputFormat = new SimpleDateFormat("dd MMM yyyy, HH:mm");
-            }else{
+            } else {
                 outputFormat = new SimpleDateFormat("dd MMM yyyy");
             }
             if (events.getEnd() != null && !Objects.equals(events.getStart(), events.getEnd())) {
@@ -169,6 +185,7 @@
             } else {
                 textViewDate.setVisibility(View.GONE);
             }
+
             textViewCategory.setText(events.getCategory());
             if (events.getPlaces() != null && !events.getPlaces().isEmpty()) {
                 textViewPlace.setText(events.getPlaces().get(0).getName());
@@ -248,12 +265,120 @@
         public void bind(Events events) {
             textViewTitle.setText(events.getTitle());
             textViewCategory.setText(events.getCategory());
+
             SimpleDateFormat outputFormat;
-            if(events.getEventSource()==null) {  //QUESTI EVENTI HANNO ANCHE L'ORARIO
+            if (events.getEventSource() == null) {  //QUESTI EVENTI HANNO ANCHE L'ORARIO
                 outputFormat = new SimpleDateFormat("dd MMM yyyy, HH:mm");
-            }else{
+            } else {
                 outputFormat = new SimpleDateFormat("dd MMM yyyy");
             }
+            if (events.getEnd() != null && !Objects.equals(events.getStart(), events.getEnd())) {
+                String dateStart = events.getStart();
+                String dateEnd = events.getEnd();
+                Date date1 = DateUtils.parseDateToShow(dateStart, "EN");
+                Date date2 = DateUtils.parseDateToShow(dateEnd, "EN");
+                String formattedDate = outputFormat.format(Objects.requireNonNull(date1)) + " - " + outputFormat.format(Objects.requireNonNull(date2));
+                textViewDate.setText(formattedDate);
+                textViewDate.setTextSize(13);
+            } else if (events.getStart() != null) {
+                String date = events.getStart();
+                Date date1 = DateUtils.parseDateToShow(date, "EN");
+                String formattedDate = outputFormat.format(Objects.requireNonNull(date1));
+                textViewDate.setText(formattedDate);
+            } else {
+                textViewDate.setVisibility(View.GONE);
+            }
+
+            if (events.getPlaces() != null && !events.getPlaces().isEmpty()) {
+                textViewPlace.setText(events.getPlaces().get(0).getName());
+            } else {
+                textViewPlace.setVisibility(View.GONE);
+            }
+            if (events.getAttendance() != 0) {
+                textViewNumberAttendance.setText(String.valueOf(events.getAttendance()));
+            } else {
+                textViewNumberAttendance.setVisibility(View.GONE);
+                textViewAttendance.setVisibility(View.GONE);
+            }
+            if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {
+                Glide.with(itemView).load(events.getEventSource().getUrlPhoto()).into(imageViewEvent);
+            } else {
+                imageViewEvent.setVisibility(View.GONE);
+            }
+            setImageViewFavoriteEvent(eventsList.get(getAdapterPosition()).isFavorite());
+        }
+
+        @Override
+        public void onClick(View v) {
+            if (v.getId() == R.id.imageViewFavorite) {
+                setImageViewFavoriteEvent(!eventsList.get(getAdapterPosition()).isFavorite());
+                onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());
+            } else if (v.getId() == R.id.imageViewShare) {
+                onItemClickListener.onShareButtonPressed(eventsList.get(getAdapterPosition()));
+            } else {
+                onItemClickListener.onEventsItemClick(eventsList.get(getAdapterPosition()));
+            }
+        }
+
+        private void setImageViewFavoriteEvent(boolean isFavorite) {
+            if (isFavorite) {
+                imageViewFavoriteEvent.setImageDrawable(
+                        AppCompatResources.getDrawable(application,
+                                R.drawable.ic_baseline_favorite_24));
+            } else {
+                imageViewFavoriteEvent.setImageDrawable(
+                        AppCompatResources.getDrawable(application,
+                                R.drawable.ic_baseline_favorite_border_24));
+            }
+        }
+    }
+
+
+    //MY EVENTS
+
+    public class Events3ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
+
+        private final TextView textViewTitle;
+        private final TextView textViewCategory;
+        private final TextView textViewPlace;
+        private final TextView textViewDate;
+        private final TextView textViewAttendance;
+        private final TextView textViewNumberAttendance;
+        private final ImageView imageViewEvent;
+        private final ImageView imageViewFavoriteEvent;
+        private final ImageView imageViewModeEvent;
+        private final ImageView imageViewDeleteEvent;
+
+        public Events3ViewHolder(@NonNull View itemView) {
+            super(itemView);
+            textViewTitle = itemView.findViewById(R.id.titleTextView);
+            textViewDate = itemView.findViewById(R.id.dateTextView);
+            textViewCategory = itemView.findViewById(R.id.categoryTextView);
+            textViewPlace = itemView.findViewById(R.id.placeTextView);
+            textViewAttendance = itemView.findViewById(R.id.attendanceTextView);
+            textViewNumberAttendance = itemView.findViewById(R.id.numberAttendanceTextView);
+            imageViewEvent = itemView.findViewById(R.id.imageViewEvent);
+            imageViewFavoriteEvent = itemView.findViewById(R.id.imageViewFavorite);
+            imageViewModeEvent = itemView.findViewById(R.id.imageViewMode);
+            imageViewDeleteEvent = itemView.findViewById(R.id.imageViewDelete);
+            ImageView imageViewShareEvent = itemView.findViewById(R.id.imageViewShare);
+            itemView.setOnClickListener(this);
+            imageViewFavoriteEvent.setOnClickListener(this);
+            imageViewShareEvent.setOnClickListener(this);
+            imageViewModeEvent.setOnClickListener(this);
+            imageViewDeleteEvent.setOnClickListener(this);
+        }
+
+        @SuppressLint("SimpleDateFormat")
+        public void bind(Events events) {
+            textViewTitle.setText(events.getTitle());
+            textViewCategory.setText(events.getCategory());
+            SimpleDateFormat outputFormat;
+            if (events.getEventSource() == null) {  //QUESTI EVENTI HANNO ANCHE L'ORARIO
+                outputFormat = new SimpleDateFormat("dd MMM yyyy, HH:mm");
+            } else {
+                outputFormat = new SimpleDateFormat("dd MMM yyyy");
+            }
             if (events.getStart() != null) {
                 String date = events.getStart();
                 Date date1 = DateUtils.parseDateToShow(date, "EN");
@@ -289,6 +414,10 @@
                 onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());
             } else if (v.getId() == R.id.imageViewShare) {
                 onItemClickListener.onShareButtonPressed(eventsList.get(getAdapterPosition()));
+            } else if (v.getId() == R.id.imageViewMode) {
+                onItemClickListener.onModeEventButtonPressed(eventsList.get(getAdapterPosition()));
+            } else if (v.getId() == R.id.imageViewDelete) {
+                onItemClickListener.onDeleteEventButtonPressed(eventsList.get(getAdapterPosition()));
             } else {
                 onItemClickListener.onEventsItemClick(eventsList.get(getAdapterPosition()));
             }
Index: app/src/main/java/com/example/eventiapp/ui/main/SearchFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\n\r\nimport android.content.ContentValues;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.viewpager2.widget.ViewPager2;\r\n\r\nimport android.provider.CalendarContract;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsAndPlacesPagerAdapter;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.adapter.PlacesRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentAllEventsBinding;\r\nimport com.example.eventiapp.databinding.FragmentContainerEventsPlacesCalendarBinding;\r\nimport com.example.eventiapp.databinding.FragmentSearchBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.example.eventiapp.util.ShareUtils;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\n\r\npublic class SearchFragment extends Fragment {\r\n\r\n    private FragmentSearchBinding fragmentSearchBinding;\r\n\r\n    private List<Events> eventsList;\r\n    private List<Place> placeList;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private PlacesRecyclerViewAdapter placesRecyclerViewAdapter;\r\n\r\n\r\n    public SearchFragment() {\r\n    }\r\n\r\n    TabLayout tabLayout;\r\n    ViewPager2 viewPager2;\r\n    EventsAndPlacesPagerAdapter eventsAndPlacesPagerAdapter;\r\n    private LinearLayoutManager layoutManagerEvents;\r\n    private LinearLayoutManager layoutManagerPlaces;\r\n\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n        placeList = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentSearchBinding = FragmentSearchBinding.inflate(inflater, container, false);\r\n        return fragmentSearchBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        Bundle bundle = null;\r\n        String isPlace = null;\r\n        if (getArguments() != null) {\r\n            String sort = getArguments().getString(\"sort\");\r\n            bundle = new Bundle();\r\n            bundle.putString(\"sort\", sort);\r\n            isPlace = getArguments().getString(\"place\");\r\n        }\r\n\r\n        tabLayout = fragmentSearchBinding.tabLayout;\r\n        viewPager2 = fragmentSearchBinding.viewPager;\r\n        eventsAndPlacesPagerAdapter = new EventsAndPlacesPagerAdapter(this);\r\n        eventsAndPlacesPagerAdapter.setBundle(bundle);\r\n        viewPager2.setAdapter(eventsAndPlacesPagerAdapter);\r\n\r\n        if (isPlace != null) {  //HA SCELTO SEE ALL VENUES\r\n            viewPager2.setCurrentItem(1); //IMPOSTA TAB ALL PLACES\r\n        }\r\n\r\n        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                viewPager2.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n\r\n        viewPager2.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {\r\n            @Override\r\n            public void onPageSelected(int position) {\r\n                super.onPageSelected(position);\r\n                tabLayout.getTabAt(position).select();\r\n            }\r\n        });\r\n\r\n        //SEARCH\r\n\r\n\r\n        layoutManagerEvents =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        layoutManagerPlaces =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        //EVENTS\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(), 0,\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(view).navigate(R.id.action_searchFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onExportButtonPressed(Events events) {\r\n                        ShareUtils.addToCalendar(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Events events) {\r\n                        ShareUtils.shareEvent(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        fragmentSearchBinding.recyclerViewEvents.setLayoutManager(layoutManagerEvents);\r\n        fragmentSearchBinding.recyclerViewEvents.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n\r\n        //PLACES\r\n\r\n        placesRecyclerViewAdapter = new PlacesRecyclerViewAdapter(placeList,\r\n                requireActivity().getApplication(), 2, new PlacesRecyclerViewAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onPlacesItemClick(Place place) {\r\n                Bundle bundle = new Bundle();\r\n                bundle.putParcelable(\"place\", place);\r\n                Navigation.findNavController(view).navigate(R.id.action_searchFragment_to_placeFragment, bundle);\r\n            }\r\n\r\n            @Override\r\n            public void onShareButtonPressed(Place place) {\r\n                ShareUtils.sharePlace(requireContext(), place);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFavoriteButtonPressed(int position) {\r\n\r\n            }\r\n        });\r\n        fragmentSearchBinding.recyclerViewPlaces.setLayoutManager(layoutManagerPlaces);\r\n        fragmentSearchBinding.recyclerViewPlaces.setAdapter(placesRecyclerViewAdapter);\r\n\r\n\r\n        fragmentSearchBinding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String query) {\r\n                if (!query.equals(\"\")) {\r\n                    fragmentSearchBinding.tabLayout.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.viewPager.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.scrollView.setVisibility(View.VISIBLE);\r\n\r\n                    eventsAndPlacesViewModel.getEventsFromSearchLiveData(query).observe(getViewLifecycleOwner(), result -> {\r\n                        showEvents(result);\r\n                    });\r\n\r\n                    eventsAndPlacesViewModel.getPlacesFromSearchLiveData(query).observe(getViewLifecycleOwner(), result -> {\r\n                        showPlaces(result);\r\n                    });\r\n                } else {\r\n                    fragmentSearchBinding.scrollView.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.recyclerViewEvents.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.textViewEvents.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.recyclerViewPlaces.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.textViewPlaces.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.tabLayout.setVisibility(View.VISIBLE);\r\n                    fragmentSearchBinding.viewPager.setVisibility(View.VISIBLE);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String newText) {\r\n                if (!newText.equals(\"\")) {\r\n                    fragmentSearchBinding.tabLayout.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.viewPager.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.scrollView.setVisibility(View.VISIBLE);\r\n\r\n                    eventsAndPlacesViewModel.getEventsFromSearchLiveData(newText).observe(getViewLifecycleOwner(), result -> {\r\n                        showEvents(result);\r\n                    });\r\n                    eventsAndPlacesViewModel.getPlacesFromSearchLiveData(newText).observe(getViewLifecycleOwner(), result -> {\r\n                        showPlaces(result);\r\n                    });\r\n                } else {\r\n                    fragmentSearchBinding.scrollView.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.recyclerViewEvents.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.textViewEvents.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.recyclerViewPlaces.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.textViewPlaces.setVisibility(View.GONE);\r\n                    fragmentSearchBinding.tabLayout.setVisibility(View.VISIBLE);\r\n                    fragmentSearchBinding.viewPager.setVisibility(View.VISIBLE);\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    private void showEvents(Result result) {\r\n        if (result.isSuccess()) {\r\n\r\n            EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n            List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n            if (!eventsAndPlacesViewModel.isLoading()) {\r\n                eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, this.eventsList.size());\r\n                this.eventsList.clear();\r\n                this.eventsList.addAll(fetchedEvents);\r\n                eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                        this.eventsList.size());\r\n                fragmentSearchBinding.progressBarEvents.setVisibility(View.GONE);\r\n            } else {\r\n                eventsAndPlacesViewModel.setLoading(false);\r\n                eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                int initialSize = eventsList.size();\r\n\r\n                for (int i = 0; i < eventsList.size(); i++) {\r\n                    if (eventsList.get(i) == null) {\r\n                        eventsList.remove(eventsList.get(i));\r\n                    }\r\n                }\r\n                int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                        EVENTS_PAGE_SIZE_VALUE;\r\n                for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                    eventsList.add(fetchedEvents.get(i));\r\n                }\r\n                eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n            }\r\n            if (eventsList.size() > 0) {\r\n                fragmentSearchBinding.textViewEvents.setVisibility(View.VISIBLE);\r\n                fragmentSearchBinding.recyclerViewEvents.setVisibility(View.VISIBLE);\r\n            } else {\r\n                fragmentSearchBinding.recyclerViewEvents.setVisibility(View.GONE);\r\n                fragmentSearchBinding.textViewEvents.setVisibility(View.GONE);\r\n            }\r\n            //fragmentSearchBinding.numberOfEvents.setText(String.valueOf(eventsList.size()));\r\n\r\n        } else {\r\n            Log.i(\"FALLITO\", \"FALLITO ALL EVENTS\");\r\n\r\n            ErrorMessageUtil errorMessagesUtil =\r\n                    new ErrorMessageUtil(requireActivity().getApplication());\r\n            Snackbar.make(requireView(), errorMessagesUtil.\r\n                            getErrorMessage(((Result.Error) result).getMessage()),\r\n                    Snackbar.LENGTH_SHORT).show();\r\n            fragmentSearchBinding.progressBarEvents.setVisibility(View.GONE);\r\n        }\r\n    }\r\n\r\n    private void showPlaces(List<Place> placesList) {\r\n        if (placesList != null) {\r\n            Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n            List<Place> fetchedPlaces = new ArrayList<>(placesList);\r\n\r\n            if (!eventsAndPlacesViewModel.isLoading()) {\r\n                if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                    eventsAndPlacesViewModel.setTotalResults(fetchedPlaces.size());\r\n                    eventsAndPlacesViewModel.setFirstLoading(false);\r\n                    this.placeList.addAll(fetchedPlaces);\r\n                    placesRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                            this.placeList.size());\r\n                } else {\r\n                    // Updates related to the favorite status of the places\r\n                    placesRecyclerViewAdapter.notifyItemRangeRemoved(0, this.placeList.size());\r\n                    this.placeList.clear();\r\n                    this.placeList.addAll(fetchedPlaces);\r\n                    placesRecyclerViewAdapter.notifyItemChanged(0, fetchedPlaces.size());\r\n                }\r\n                fragmentSearchBinding.progressBarPlaces.setVisibility(View.GONE);\r\n            } else {\r\n                eventsAndPlacesViewModel.setLoading(false);\r\n                eventsAndPlacesViewModel.setCurrentResults(placesList.size());\r\n\r\n                int initialSize = placesList.size();\r\n\r\n                for (int i = 0; i < placesList.size(); i++) {\r\n                    if (placesList.get(i) == null) {\r\n                        placesList.remove(placesList.get(i));\r\n                    }\r\n                }\r\n                int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                        EVENTS_PAGE_SIZE_VALUE;\r\n                for (int i = startIndex; i < fetchedPlaces.size(); i++) {\r\n                    placesList.add(fetchedPlaces.get(i));\r\n                }\r\n                placesRecyclerViewAdapter.notifyItemRangeInserted(initialSize, placesList.size());\r\n            }\r\n\r\n            if (placesList.size() > 0) {\r\n                fragmentSearchBinding.textViewPlaces.setVisibility(View.VISIBLE);\r\n                fragmentSearchBinding.recyclerViewPlaces.setVisibility(View.VISIBLE);\r\n            } else {\r\n                fragmentSearchBinding.textViewPlaces.setVisibility(View.GONE);\r\n                fragmentSearchBinding.recyclerViewPlaces.setVisibility(View.GONE);\r\n            }\r\n        } else {\r\n            Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n            ErrorMessageUtil errorMessagesUtil =\r\n                    new ErrorMessageUtil(requireActivity().getApplication());\r\n            Snackbar.make(requireView(), errorMessagesUtil.\r\n                            getErrorMessage(\"ERRORE\"),\r\n                    Snackbar.LENGTH_SHORT).show();\r\n            fragmentSearchBinding.progressBarPlaces.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/SearchFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/SearchFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/SearchFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/SearchFragment.java	
@@ -183,6 +183,16 @@
                     public void onFavoriteButtonPressed(int position) {
                         //SETTA EVENTO COME PREFERITO
                     }
+
+                    @Override
+                    public void onModeEventButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onDeleteEventButtonPressed(Events events) {
+
+                    }
                 });
         fragmentSearchBinding.recyclerViewEvents.setLayoutManager(layoutManagerEvents);
         fragmentSearchBinding.recyclerViewEvents.setAdapter(eventsRecyclerViewAdapter);
@@ -208,6 +218,16 @@
             @Override
             public void onFavoriteButtonPressed(int position) {
 
+            }
+
+            @Override
+            public void onModePlaceButtonPressed(Place place) {
+
+            }
+
+            @Override
+            public void onDeletePlaceButtonPressed(Place place) {
+
             }
         });
         fragmentSearchBinding.recyclerViewPlaces.setLayoutManager(layoutManagerPlaces);
Index: app/src/main/java/com/example/eventiapp/model/Place.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.model;\r\n\r\nimport android.os.Parcel;\r\nimport android.os.Parcelable;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.room.ColumnInfo;\r\nimport androidx.room.Entity;\r\nimport androidx.room.Ignore;\r\nimport androidx.room.PrimaryKey;\r\nimport com.example.eventiapp.util.StringUtils;\r\nimport com.google.android.libraries.places.api.model.PhotoMetadata;\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\n@Entity\r\npublic class Place implements Serializable, Parcelable {\r\n\r\n    @PrimaryKey\r\n    @NonNull\r\n    @SerializedName(\"entity_id\")\r\n    private String id;\r\n    private String name;\r\n    private String type;\r\n    @SerializedName(\"formatted_address\")\r\n    private String address;\r\n    private String idGoogle;\r\n    private double[] coordinates;\r\n    private String phoneNumber;\r\n    private List<PhotoMetadata> images;\r\n    @ColumnInfo(name = \"is_favorite\")\r\n    private boolean isFavorite;\r\n    @ColumnInfo(name = \"is_synchronized\")\r\n    private boolean isSynchronized;\r\n\r\n\r\n    @Ignore\r\n    public Place() {\r\n    }\r\n\r\n    @Ignore\r\n    public Place(@NonNull String id, String name, String type, String address, double[] coordinates) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.address = address;\r\n        this.coordinates = coordinates;\r\n        this.isFavorite = false;\r\n        this.isSynchronized = false;\r\n    }\r\n\r\n    public Place(@NonNull String id, String name, String type, String address, String idGoogle, double[] coordinates, String phoneNumber, List<PhotoMetadata> images) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.address = address;\r\n        this.idGoogle = idGoogle;\r\n        this.coordinates = coordinates;\r\n        this.phoneNumber = phoneNumber;\r\n        this.images = images;\r\n        this.isFavorite = false;\r\n        this.isSynchronized = false;\r\n    }\r\n\r\n\r\n    protected Place(Parcel in) {\r\n        id = in.readString();\r\n        name = in.readString();\r\n        type = in.readString();\r\n        address = in.readString();\r\n        idGoogle = in.readString();\r\n        coordinates = in.createDoubleArray();\r\n        phoneNumber = in.readString();\r\n        isFavorite = in.readByte() != 0;\r\n        isSynchronized = in.readByte() != 0;\r\n    }\r\n\r\n    public static final Creator<Place> CREATOR = new Creator<Place>() {\r\n        @Override\r\n        public Place createFromParcel(Parcel in) {\r\n            return new Place(in);\r\n        }\r\n\r\n        @Override\r\n        public Place[] newArray(int size) {\r\n            return new Place[size];\r\n        }\r\n    };\r\n\r\n    @NonNull\r\n    public String getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(String id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = StringUtils.capitalizeFirstLetter(name);\r\n    }\r\n\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    public void setType(String type) {\r\n        this.type = type;\r\n    }\r\n\r\n    public String getAddress() {\r\n        return address;\r\n    }\r\n\r\n    public void setAddress(String address) {\r\n        this.address = address;\r\n    }\r\n\r\n    public String getIdGoogle() {\r\n        return idGoogle;\r\n    }\r\n\r\n    public void setIdGoogle(String idGoogle) {\r\n        this.idGoogle = idGoogle;\r\n    }\r\n\r\n    public double[] getCoordinates() {\r\n        return coordinates;\r\n    }\r\n\r\n    public void setCoordinates(double[] coordinates) {\r\n        this.coordinates = coordinates;\r\n    }\r\n\r\n    public boolean isFavorite() {\r\n        return isFavorite;\r\n    }\r\n\r\n    public void setFavorite(boolean favorite) {\r\n        isFavorite = favorite;\r\n    }\r\n\r\n    public boolean isSynchronized() {\r\n        return isSynchronized;\r\n    }\r\n\r\n    public void setSynchronized(boolean aSynchronized) {\r\n        isSynchronized = aSynchronized;\r\n    }\r\n\r\n    public String getPhoneNumber() {\r\n        return phoneNumber;\r\n    }\r\n\r\n    public void setPhoneNumber(String phoneNumber) {\r\n        this.phoneNumber = phoneNumber;\r\n    }\r\n\r\n    public List<PhotoMetadata> getImages() {\r\n        return images;\r\n    }\r\n\r\n    public void setImages(List<PhotoMetadata> images) {\r\n        this.images = images;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        Place place = (Place) o;\r\n        return isFavorite == place.isFavorite && isSynchronized == place.isSynchronized && id.equals(place.id) && Objects.equals(name, place.name) && Objects.equals(type, place.type) && Objects.equals(address, place.address) && Objects.equals(idGoogle, place.idGoogle) && Arrays.equals(coordinates, place.coordinates) && Objects.equals(phoneNumber, place.phoneNumber) && Objects.equals(images, place.images);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result = Objects.hash(id, name, type, address, idGoogle, phoneNumber, images, isFavorite, isSynchronized);\r\n        result = 31 * result + Arrays.hashCode(coordinates);\r\n        return result;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public String toString() {\r\n        return \"Place{\" +\r\n                \"id='\" + id + '\\'' +\r\n                \", name='\" + name + '\\'' +\r\n                \", type='\" + type + '\\'' +\r\n                \", address='\" + address + '\\'' +\r\n                \", idGoogle='\" + idGoogle + '\\'' +\r\n                \", coordinates=\" + Arrays.toString(coordinates) +\r\n                \", phoneNumber='\" + phoneNumber + '\\'' +\r\n                \", images=\" + images +\r\n                \", isFavorite=\" + isFavorite +\r\n                \", isSynchronized=\" + isSynchronized +\r\n                '}';\r\n    }\r\n\r\n    @Override\r\n    public int describeContents() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public void writeToParcel(@NonNull Parcel dest, int flags) {\r\n        dest.writeString(id);\r\n        dest.writeString(name);\r\n        dest.writeString(type);\r\n        dest.writeString(address);\r\n        dest.writeString(idGoogle);\r\n        dest.writeDoubleArray(coordinates);\r\n        dest.writeString(phoneNumber);\r\n        dest.writeTypedList(images);\r\n        dest.writeByte((byte) (isFavorite ? 1 : 0));\r\n        dest.writeByte((byte) (isSynchronized ? 1 : 0));\r\n    }\r\n\r\n    public static class SortByAlphabetAZ implements java.util.Comparator<Place> {\r\n        public int compare(Place a, Place b) {\r\n            return a.getName().compareTo(b.getName());\r\n        }\r\n    }\r\n\r\n    public static class SortByAlphabetZA implements java.util.Comparator<Place> {\r\n        public int compare(Place a, Place b) {\r\n            return -a.getName().compareTo(b.getName());\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/model/Place.java b/app/src/main/java/com/example/eventiapp/model/Place.java
--- a/app/src/main/java/com/example/eventiapp/model/Place.java	
+++ b/app/src/main/java/com/example/eventiapp/model/Place.java	
@@ -54,6 +54,16 @@
         this.isSynchronized = false;
     }
 
+    @Ignore
+    public Place(@NonNull String id, String name, String type, String address) {
+        this.id = id;
+        this.name = name;
+        this.type = type;
+        this.address = address;
+        this.isFavorite = false;
+        this.isSynchronized = false;
+    }
+
     public Place(@NonNull String id, String name, String type, String address, String idGoogle, double[] coordinates, String phoneNumber, List<PhotoMetadata> images) {
         this.id = id;
         this.name = name;
@@ -178,14 +188,12 @@
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         Place place = (Place) o;
-        return isFavorite == place.isFavorite && isSynchronized == place.isSynchronized && id.equals(place.id) && Objects.equals(name, place.name) && Objects.equals(type, place.type) && Objects.equals(address, place.address) && Objects.equals(idGoogle, place.idGoogle) && Arrays.equals(coordinates, place.coordinates) && Objects.equals(phoneNumber, place.phoneNumber) && Objects.equals(images, place.images);
+        return Objects.equals(name, place.name) && Objects.equals(address, place.address) && Objects.equals(idGoogle, place.idGoogle) && Objects.equals(phoneNumber, place.phoneNumber) && Objects.equals(images, place.images);
     }
 
     @Override
     public int hashCode() {
-        int result = Objects.hash(id, name, type, address, idGoogle, phoneNumber, images, isFavorite, isSynchronized);
-        result = 31 * result + Arrays.hashCode(coordinates);
-        return result;
+        return Objects.hash(name, address, idGoogle, phoneNumber, images);
     }
 
     @NonNull
Index: app/src/main/java/com/example/eventiapp/database/RoomDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.database;\r\n\r\n\r\nimport android.content.Context;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.TypeConverters;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.util.Constants;\r\nimport com.example.eventiapp.util.Converters;\r\n\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\n@Database(entities = {Events.class, Place.class}, version = 37)\r\n@TypeConverters({Converters.class})\r\npublic abstract class RoomDatabase extends androidx.room.RoomDatabase {\r\n    public abstract EventsDao eventsDao();\r\n    public abstract PlaceDao placeDao();\r\n\r\n    private static volatile RoomDatabase INSTANCE;\r\n    private static final int NUMBER_OF_THREADS = Runtime.getRuntime().availableProcessors();\r\n    public static final ExecutorService databaseWriteExecutor =\r\n            Executors.newFixedThreadPool(NUMBER_OF_THREADS);\r\n\r\n    public static RoomDatabase getDatabase(final Context context) {\r\n        if (INSTANCE == null) {\r\n            synchronized (RoomDatabase.class) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),\r\n                            RoomDatabase.class, Constants.EVENTS_DATABASE_NAME).fallbackToDestructiveMigration().build();\r\n                }\r\n            }\r\n        }\r\n        return INSTANCE;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/database/RoomDatabase.java b/app/src/main/java/com/example/eventiapp/database/RoomDatabase.java
--- a/app/src/main/java/com/example/eventiapp/database/RoomDatabase.java	
+++ b/app/src/main/java/com/example/eventiapp/database/RoomDatabase.java	
@@ -15,7 +15,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-@Database(entities = {Events.class, Place.class}, version = 37)
+@Database(entities = {Events.class, Place.class}, version = 38)
 @TypeConverters({Converters.class})
 public abstract class RoomDatabase extends androidx.room.RoomDatabase {
     public abstract EventsDao eventsDao();
Index: app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.jsoup;\r\n\r\nimport android.os.AsyncTask;\r\nimport android.util.Log;\r\n\r\nimport com.example.eventiapp.model.EventSource;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.source.events.BaseEventsRemoteDataSource;\r\nimport com.example.eventiapp.ui.main.AllEventsFragment;\r\nimport com.example.eventiapp.util.DateUtils;\r\nimport com.example.eventiapp.util.EventClassifier;\r\n\r\nimport org.jsoup.Jsoup;\r\nimport org.jsoup.nodes.Document;\r\nimport org.jsoup.nodes.Element;\r\nimport org.jsoup.select.Elements;\r\n\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class JsoupDataSource extends AsyncTask<Void, Void, List<Events>> {\r\n\r\n    private OnPostExecuteListener onPostExecuteListener;\r\n\r\n    public void setOnPostExecuteListener(OnPostExecuteListener listener) {\r\n        this.onPostExecuteListener = listener;\r\n    }\r\n\r\n    public interface OnPostExecuteListener {\r\n        void onPostExecuted(List<Events> eventsList);\r\n    }\r\n\r\n    @Override\r\n    protected void onPreExecute() {\r\n        super.onPreExecute();\r\n    }\r\n\r\n    @Override\r\n    protected List<Events> doInBackground(Void... voids) {\r\n\r\n        List<Events> allEvents = new ArrayList<>();\r\n        allEvents.addAll(eventsUciCinemas());\r\n        allEvents.addAll(eventsPirelliHangar());\r\n        allEvents.addAll(eventsUnimib());\r\n        allEvents.addAll(eventsArcimboldi());\r\n        return allEvents;\r\n    }\r\n\r\n    @Override\r\n    protected void onPostExecute(List<Events> eventsList) {\r\n        if (onPostExecuteListener != null) {\r\n            onPostExecuteListener.onPostExecuted(eventsList);\r\n        }\r\n       // BaseEventsRemoteDataSource.eventsCallback.onSuccessFromRemoteJsoup(eventsApiResponse);\r\n    }\r\n\r\n    private List<Events> eventsUciCinemas() {\r\n        List<Events> events = new ArrayList<>();\r\n        //UCI CINEMAS BICOCCA (FILM TRASMESSI NEL GIORNO CORRENTE)\r\n        try {\r\n            Document document = Jsoup.connect(\"https://www.ucicinemas.it/cinema/lombardia/milano/uci-cinemas-bicocca-milano/\").get();\r\n            Element element = document.getElementById(\"showtimes-venue-container\");\r\n            Element element2 = element.getElementsByClass(\"showtimes__movie\").first();\r\n            Elements show = element2.getElementsByClass(\"showtimes__show\");\r\n\r\n            for (Element e : show) {\r\n                Element movie = e.getElementsByClass(\"movie-name\").first();\r\n                Element movieNote = e.getElementsByClass(\"mobile-showtimes__movie__notes-container\").first();\r\n                Element movie3D = movieNote.getElementsByClass(\"mobile-showtimes__movie__notes\").first();\r\n                String srcValue3D = null;\r\n                if (movie3D != null) {\r\n                    Element image3D = movie3D.select(\"img\").first();\r\n                    srcValue3D = image3D.attr(\"src\");\r\n                }\r\n                Elements timetables = e.getElementsByClass(\"showtimes__movie__shows list-inline\");\r\n                Element href = movie.select(\"a\").first();\r\n                String name = href.text();\r\n                String urlMovie = \"https://www.ucicinemas.it\" + href.attr(\"href\");\r\n\r\n                //ORARI FILM\r\n                ArrayList<String> hours = new ArrayList<>();\r\n                Elements times = timetables.select(\"a\");\r\n                for (Element o : times) {\r\n                    String hour = o.text();\r\n                    hours.add(hour);\r\n                }\r\n\r\n                //3D FILM\r\n                if (srcValue3D != null && srcValue3D.contains(\"3d\")) {\r\n                    name = name + \" 3D\";\r\n                }\r\n\r\n\r\n                //DESCRIZIONE FILM\r\n                StringBuilder description = new StringBuilder();\r\n                Document document2 = Jsoup.connect(urlMovie).get();\r\n                Element movieDetail = document2.getElementsByClass(\"movie-data__wrapper\").first();\r\n                Elements p = movieDetail.getAllElements();\r\n                int count = 0;\r\n                for (Element o : p) {\r\n                    if (count < 2) {\r\n                        description.append(o.text());\r\n                        count++;\r\n                    }\r\n                }\r\n\r\n                //FOTO FILM\r\n                Element movieImage = document2.getElementsByClass(\"main-carousel\").first();\r\n                Element imageElement = movieImage.select(\"img\").first();\r\n                String srcValue = imageElement.attr(\"src\");\r\n\r\n                Events event = new Events();\r\n                event.setTitle(name);\r\n                event.setEventSource(new EventSource(urlMovie, srcValue));\r\n                event.setCategory(\"movies\");\r\n                event.setDescription(String.valueOf(description));\r\n                event.setStart(DateUtils.currentDate());\r\n                String[] hoursArray = new String[hours.size()];\r\n                hoursArray = hours.toArray(hoursArray);\r\n                event.setHours(hoursArray);\r\n                event.setTimezone(\"Europe/Rome\");\r\n                double[] coordinates = {45.5220145, 9.2133497}; //COORDINATE UCI BICOCCA\r\n                event.setCoordinates(coordinates);\r\n                List<Place> placeList = new ArrayList<>();\r\n                Place place = new Place(\"uci_bicocca\", \"UCI Cinemas Bicocca\", \"venue\", \"Via Chiese, 20126 Milan MI, Italy\", coordinates);\r\n                placeList.add(place);\r\n                event.setPlaces(placeList);\r\n                event.setPrivate(false);\r\n                events.add(event);\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    private List<Events> eventsPirelliHangar() {\r\n        List<Events> events = new ArrayList<>();\r\n        try {\r\n            Document document = Jsoup.connect(\"https://pirellihangarbicocca.org/evento/\").get();\r\n            Elements elements = document.getElementsByClass(\"fl-post-column\");\r\n            for (Element e : elements) {\r\n                Events event = new Events();\r\n                Element href = e.select(\"a\").first();\r\n                Element eventType = e.getElementsByClass(\"spot-info uppercase\").first();\r\n                String category = eventType.text();\r\n                category = category.replace(\"Evento\", \"\");\r\n                category = category.replaceAll(\"\\\\s\", \" \");\r\n                event.setCategory(category);\r\n                Element imageElement = e.select(\"img\").first();\r\n                String srcValue = \"https:\" + imageElement.attr(\"src\");\r\n                event.setEventSource(new EventSource(href.attr(\"href\"), srcValue));\r\n\r\n                //DATA EVENTO\r\n                Element dateElement = e.getElementsByClass(\"spot-date uppercase\").first();\r\n                String date = dateElement.text();\r\n                Date date1 = DateUtils.parseDate(date, \"it\");\r\n                SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n                if (date1 != null) {\r\n                    String formattedDate = formatter.format(date1);\r\n                    if (formattedDate.compareTo(DateUtils.currentDate()) >= 0) { //METTE SOLO EVENTI NUOVI A PARTIRE DALLA DATA CORRENTE\r\n                        event.setStart(formattedDate);\r\n                        event.setTimezone(\"Europe/Rome\");\r\n                        Element titleElement = e.select(\"h2\").first();\r\n                        event.setTitle(titleElement.text());\r\n                        List<Place> placeList = new ArrayList<>();\r\n                        double[] coordinates = {45.5203608, 9.2160497};\r\n                        event.setCoordinates(coordinates);\r\n                        Place place = new Place(\"pirelli_hangar\", \"Pirelli HangarBicocca\", \"venue\", \"Via Chiese, 2, 20126 Milan MI, Italy\", coordinates);\r\n                        placeList.add(place);\r\n                        event.setPlaces(placeList);\r\n                        event.setPrivate(false);\r\n                        events.add(event);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    private List<Events> eventsUnimib() {\r\n        List<Events> events = new ArrayList<>();\r\n        String baseUrl = \"https://www.unimib.it/eventi\"; // Inserisci l'URL di base del sito web degli eventi\r\n        String urlTemplate = baseUrl + \"?page=%d\";\r\n\r\n        int currentPage = 0;\r\n        boolean hasNextPage = true;\r\n        while (hasNextPage) {\r\n            String url = String.format(urlTemplate, currentPage);\r\n\r\n            try {\r\n                Document document = Jsoup.connect(url).get();\r\n                Elements eventElements = document.select(\".anteprima--evento\");\r\n\r\n                // Se non ci sono più elementi degli eventi, esci dal loop\r\n                if (eventElements.isEmpty()) {\r\n                    hasNextPage = false;\r\n                    continue;\r\n                }\r\n\r\n                for (Element e : eventElements) {\r\n                    Events event = new Events();\r\n\r\n                    String imageSrc = e.select(\"img\").attr(\"src\");\r\n                    String title = e.select(\".views-field-title a\").text();\r\n                    String dateRange = e.select(\".views-field-field-data-evento\").text();\r\n                    String description = e.select(\".views-field-field-sottotitolo\").text();\r\n\r\n                    String imageValue = \"https://www.unimib.it\" + imageSrc;\r\n                    event.setEventSource(new EventSource(\"https://www.unimib.it\" + e.select(\".views-field-title a\").first().attr(\"href\"), imageValue));\r\n                    String start = \"\";\r\n                    String end = \"\";\r\n                    SimpleDateFormat outputFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n                    if (dateRange.contains(\"da\")) { //INIZIO E FINE EVENTO\r\n                        String[] dates = dateRange.split(\" a \");\r\n                        start = dates[0];\r\n                        end = dates[1];\r\n                        Date startDate = DateUtils.parseDate(start, \"it\");\r\n                        Date endDate = DateUtils.parseDate(end, \"it\");\r\n                        start = outputFormat.format(startDate);\r\n                        end = outputFormat.format(endDate);\r\n                    } else {\r\n                        Date startDate = DateUtils.parseDate(dateRange, \"it\");\r\n                        start = outputFormat.format(startDate);\r\n                        end = null;\r\n                    }\r\n                    event.setStart(start);\r\n                    event.setEnd(end);\r\n                    event.setTimezone(\"Europe/Rome\");\r\n\r\n\r\n                    //TITLE\r\n                    event.setTitle(title);\r\n\r\n                    //DESCRIPTION\r\n                    event.setDescription(description);\r\n\r\n                    //CATEGORY\r\n                    EventClassifier eventClassifier = new EventClassifier();\r\n                    String category = eventClassifier.classifyEvent(title, description);\r\n                    event.setCategory(category);\r\n\r\n                    //PLACE\r\n                    List<Place> placeList = new ArrayList<>();\r\n                    double[] coordinates = {45.5182898, 9.2111811};\r\n                    event.setCoordinates(coordinates);\r\n                    Place place = new Place(\"unimib\", \"Università degli Studi di Milano Bicocca\", \"venue\", \"Piazza dell'Ateneo Nuovo, 1, 20126 Milano MI, Italy\", coordinates);\r\n                    placeList.add(place);\r\n                    event.setPlaces(placeList);\r\n\r\n                    //PRIVATE\r\n                    event.setPrivate(false);\r\n\r\n                    events.add(event);\r\n\r\n\r\n                }\r\n                currentPage++;\r\n\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n\r\n            }\r\n        }\r\n        return events;\r\n    }\r\n\r\n    private List<Events> eventsArcimboldi() {\r\n        List<Events> events = new ArrayList<>();\r\n        try {\r\n            Document document = Jsoup.connect(\"https://www.teatroarcimboldi.it/all/\").get();\r\n            Element newEvents = document.getElementById(\"tab-programmazione\");\r\n            Elements eventItems = newEvents.select(\".fat-event-item\");\r\n            for (Element eventItem : eventItems) {\r\n                Events event = new Events();\r\n                String title = eventItem.select(\".fat-event-title a\").text();\r\n                String eventUrl = eventItem.select(\".fat-event-tile a\").attr(\"href\");\r\n                String imageUrl = eventItem.select(\".fat-event-thumb img\").attr(\"src\");\r\n                String description = eventItem.select(\".riassunto\").text();\r\n                String date = eventItem.select(\".fe-date\").text();\r\n\r\n                event.setTitle(title);\r\n                event.setEventSource(new EventSource(eventUrl, imageUrl));\r\n                event.setDescription(description);\r\n\r\n                SimpleDateFormat outputFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n                Date startDate = DateUtils.parseDate(date, \"it\");\r\n                String start = outputFormat.format(startDate);\r\n                event.setStart(start);\r\n                event.setTimezone(\"Europe/Rome\");\r\n\r\n                //CATEGORY\r\n                EventClassifier eventClassifier = new EventClassifier();\r\n                String category = eventClassifier.classifyEvent(title, description);\r\n                event.setCategory(category);\r\n\r\n                //PLACE\r\n                List<Place> placeList = new ArrayList<>();\r\n                double[] coordinates = {45.514842, 9.2109728};\r\n                event.setCoordinates(coordinates);\r\n                Place place = new Place(\"arcimboldi\", \"Teatro arcimboldi\", \"venue\", \"Viale dell'Innovazione, 20, 20126 Milano MI, Italy\", coordinates);\r\n                placeList.add(place);\r\n                event.setPlaces(placeList);\r\n                event.setPrivate(false);\r\n\r\n                events.add(event);\r\n\r\n\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return events;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java b/app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java
--- a/app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java	
+++ b/app/src/main/java/com/example/eventiapp/source/jsoup/JsoupDataSource.java	
@@ -312,7 +312,7 @@
                 List<Place> placeList = new ArrayList<>();
                 double[] coordinates = {45.514842, 9.2109728};
                 event.setCoordinates(coordinates);
-                Place place = new Place("arcimboldi", "Teatro arcimboldi", "venue", "Viale dell'Innovazione, 20, 20126 Milano MI, Italy", coordinates);
+                Place place = new Place("QskKAMb7unj4usbvwV4fqC", "Teatro arcimboldi", "venue", "Viale dell'Innovazione, 20, 20126 Milano MI, Italy", coordinates);
                 placeList.add(place);
                 event.setPlaces(placeList);
                 event.setPrivate(false);
Index: app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.Lifecycle;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavBackStackEntry;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentEventBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.source.google.PlaceDetailsSource;\r\nimport com.example.eventiapp.util.DateUtils;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.example.eventiapp.util.ShareUtils;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.MapView;\r\nimport com.google.android.gms.maps.MapsInitializer;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.model.CameraPosition;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.libraries.places.api.model.PhotoMetadata;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.button.MaterialButton;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\npublic class EventFragment extends Fragment {\r\n\r\n    private static final String TAG = EventFragment.class.getSimpleName();\r\n\r\n    private FragmentEventBinding fragmentEventBinding;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private List<Events> eventsList; //EVENTI SIMILI\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    MapView mMapView;\r\n    private GoogleMap googleMap;\r\n\r\n    public EventFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static EventFragment newInstance() {\r\n        return new EventFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentEventBinding = FragmentEventBinding.inflate(inflater, container, false);\r\n        return fragmentEventBinding.getRoot();\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.TIRAMISU)\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                if (menuItem.getItemId() == android.R.id.home) {\r\n                    Navigation.findNavController(requireView()).navigateUp();\r\n                }\r\n                return false;\r\n            }\r\n        }, getViewLifecycleOwner(), Lifecycle.State.RESUMED);\r\n\r\n        mMapView = fragmentEventBinding.mapView;\r\n        mMapView.onCreate(savedInstanceState);\r\n        mMapView.onResume();\r\n\r\n        Events events = getArguments().getParcelable(\"event\", Events.class);\r\n\r\n        fragmentEventBinding.imageViewShare.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                ShareUtils.shareEvent(requireContext(), events);\r\n            }\r\n        });\r\n\r\n        fragmentEventBinding.imageViewCalendar.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                ShareUtils.addToCalendar(requireContext(), events);\r\n            }\r\n        });\r\n\r\n        fragmentEventBinding.imageViewFavorite.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //SETTA COME PREFERITO\r\n            }\r\n        });\r\n\r\n        if (!events.getPlaces().isEmpty() && events.getPlaces().get(0).getName() != null) {\r\n            eventsAndPlacesViewModel.getSinglePlace(events.getPlaces().get(0).getId()).observe(getViewLifecycleOwner(), result -> {\r\n                if (result != null) { //PRENDE I DETTAGLI DEL POSTO PRESI DA GOOGLE\r\n                    if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {\r\n                        fragmentEventBinding.eventImage.setVisibility(View.VISIBLE);\r\n                        Glide.with(this).load(events.getEventSource().getUrlPhoto()).into(fragmentEventBinding.eventImage);\r\n                    } else {\r\n                        fragmentEventBinding.eventImage.setVisibility(View.VISIBLE);\r\n                        if (result.getImages() != null && !result.getImages().isEmpty()) {\r\n                            PlaceDetailsSource.fetchPlacePhotos(result.getImages(), true, new PlaceDetailsSource.PlacePhotosListener() {\r\n                                @Override\r\n                                public void onPlacePhotosListener(Bitmap bitmap) {\r\n                                    if (bitmap != null) {\r\n                                        Glide.with(requireView()).load(bitmap).into(fragmentEventBinding.eventImage);\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onError(String message) {\r\n                                    Log.e(TAG, message);\r\n                                    fragmentEventBinding.eventImage.setVisibility(View.GONE);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            fragmentEventBinding.eventImage.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                    fragmentEventBinding.eventTitle.setText(events.getTitle());\r\n                    fragmentEventBinding.eventCategory.setText(events.getCategory());\r\n                    if (events.getEventSource() != null) {\r\n                        fragmentEventBinding.sourceTV.setText(events.getEventSource().getUrl());\r\n                    } else {\r\n                        fragmentEventBinding.forMoreInfoTV.setVisibility(View.GONE);\r\n                        fragmentEventBinding.sourceTV.setVisibility(View.GONE);\r\n                    }\r\n\r\n                    if (events.getDescription() != null && !Objects.equals(events.getDescription(), \"\")) {\r\n                        fragmentEventBinding.eventDescription.setText(events.getDescription());\r\n                    } else {\r\n                        fragmentEventBinding.showInfoTV.setVisibility(View.GONE);\r\n                        fragmentEventBinding.eventDescription.setVisibility(View.GONE);\r\n                    }\r\n\r\n                    if (events.getEnd() != null && !Objects.equals(events.getStart(), events.getEnd())) {\r\n                        String dateStart = events.getStart();\r\n                        String dateEnd = events.getEnd();\r\n                        Date date1 = DateUtils.parseDateToShow(dateStart, \"EN\");\r\n                        Date date2 = DateUtils.parseDateToShow(dateEnd, \"EN\");\r\n                        SimpleDateFormat outputFormat = new SimpleDateFormat(\"dd MMM yyyy, HH:mm\");\r\n                        String formattedDate = outputFormat.format(date1) + \" - \" + outputFormat.format(date2);\r\n                        fragmentEventBinding.eventDate.setText(formattedDate);\r\n                    } else {\r\n                        String date = events.getStart();\r\n                        Date date1 = DateUtils.parseDateToShow(date, \"EN\");\r\n                        SimpleDateFormat outputFormat = new SimpleDateFormat(\"dd MMM yyyy, HH:mm\");\r\n                        String formattedDate = outputFormat.format(date1);\r\n                        fragmentEventBinding.eventDate.setText(formattedDate);\r\n                    }\r\n\r\n                    fragmentEventBinding.eventPlace.setText(result.getName());\r\n                    fragmentEventBinding.eventAddress.setText(result.getAddress());\r\n                    fragmentEventBinding.eventAddress2.setText(result.getAddress());\r\n\r\n                    if (result.getPhoneNumber() != null) {\r\n                        fragmentEventBinding.phoneNumber.setText(result.getPhoneNumber());\r\n                        fragmentEventBinding.phoneNumber.setOnClickListener(new View.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(View v) {\r\n                                Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse(\"tel:\" + result.getPhoneNumber()));\r\n                                startActivity(intent);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        fragmentEventBinding.phoneNumber.setVisibility(View.GONE);\r\n                    }\r\n\r\n                    if (!events.getCategory().equals(\"movies\")) { //PER ORA I MOVIES SON SOLO QUELLI DEL GIORNO CORRENTE\r\n                        eventsAndPlacesViewModel.getEventsDates(events.getTitle()).observe(getViewLifecycleOwner(), result2 -> {\r\n                            if (result2.size() > 1) {\r\n                                showAllEventsDate(result2);\r\n                            }\r\n                        });\r\n                    } else { //MOSTRA ORARI FILM DEL GIORNO CORRENTE\r\n                        showAllHoursMovie(events.getHours());\r\n                    }\r\n\r\n                    //EVENTI SIMILI ---------------------------------------------------------------------\r\n\r\n                    sameCategoryEvents(events);\r\n\r\n\r\n                    //GOOGLE MAPS ---------------------------------------------------------------------------------------------------\r\n\r\n                    if (!fragmentEventBinding.eventPlace.getText().equals(\"Unknown\")) {\r\n                        googleMaps(new LatLng(result.getCoordinates()[0], result.getCoordinates()[1]), result.getName());\r\n                    } else {\r\n                        fragmentEventBinding.mapView.setVisibility(View.GONE);\r\n                    }\r\n\r\n                }else{  //NON ESISTE IL PLACE DELL'EVENTO NEL DATABASE\r\n                    showEventWithNoPlace(events);\r\n                }\r\n            });\r\n        } else { //L'evento non ha il nome del place in cui si tiene\r\n            showEventWithNoPlace(events);\r\n        }\r\n\r\n        NavBackStackEntry navBackStackEntry = Navigation.\r\n                findNavController(view).getPreviousBackStackEntry();\r\n\r\n        if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().\r\n\r\n                        getId() == R.id.homeFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.homeFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().\r\n\r\n                        getId() == R.id.myEventsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.myEventsFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().\r\n\r\n                        getId() == R.id.mapsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.mapsFragment).setChecked(true);\r\n        }\r\n\r\n    }\r\n\r\n    private void showAllEventsDate(List<String> dates) {\r\n        LinearLayout linearLayout = fragmentEventBinding.otherDatesLayout;\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT\r\n        );\r\n        params.setMarginEnd(20);\r\n        TextView textView = fragmentEventBinding.otherDatesTextView;\r\n        textView.setVisibility(View.VISIBLE);\r\n\r\n        for (String date : dates) {\r\n            MaterialButton button = new MaterialButton(requireContext());\r\n            button.setLayoutParams(params);\r\n            button.setTextSize(16);\r\n            button.setPadding(15, 15, 15, 15);\r\n            button.setCornerRadius(30);\r\n            button.setText(date);\r\n            button.setOnClickListener(v -> {\r\n                //VA ALLO STESSO EVENTO MA CON DATA DIVERSA\r\n            });\r\n            linearLayout.addView(button);\r\n        }\r\n    }\r\n\r\n    private void showAllHoursMovie(String[] hours) {\r\n        LinearLayout linearLayout = fragmentEventBinding.otherHoursLayout;\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT\r\n        );\r\n        params.setMarginEnd(20);\r\n        TextView textView = fragmentEventBinding.otherHoursTextView;\r\n        textView.setVisibility(View.VISIBLE);\r\n\r\n        for (String hour : hours) {\r\n            MaterialButton button = new MaterialButton(requireContext());\r\n            button.setLayoutParams(params);\r\n            button.setTextSize(16);\r\n            button.setPadding(15, 15, 15, 15);\r\n            button.setCornerRadius(30);\r\n            button.setText(hour);\r\n            button.setOnClickListener(v -> {\r\n                //IN TEORIA NON DOVREBBE FAR NIENTE\r\n            });\r\n            linearLayout.addView(button);\r\n        }\r\n    }\r\n\r\n    private void sameCategoryEvents(Events events) {\r\n\r\n        RecyclerView recyclerView = fragmentEventBinding.recyclerviewEvents;\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(), 0,\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(requireView()).navigate(R.id.action_eventFragment_self, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onExportButtonPressed(Events events) {\r\n                        ShareUtils.addToCalendar(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Events events) {\r\n                        ShareUtils.shareEvent(requireContext(), events);\r\n                    }\r\n\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        fragmentEventBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n        eventsAndPlacesViewModel.getCategoryEventsLiveData(events.getCategory()).observe(getViewLifecycleOwner(), result -> {\r\n            if (result != null) {\r\n                if (result.isSuccess()) {\r\n                    Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n                    EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                    List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n                    fetchedEvents.remove(events); //RIMUOVI LO STESSO EVENTO\r\n\r\n                    if (fetchedEvents.size() > 0) {\r\n                        fragmentEventBinding.categoryEventsTV.setVisibility(View.VISIBLE);\r\n                        fragmentEventBinding.line.setVisibility(View.VISIBLE);\r\n                        fragmentEventBinding.recyclerviewEvents.setVisibility(View.VISIBLE);\r\n                        if (!eventsAndPlacesViewModel.isLoading()) {\r\n                            eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, this.eventsList.size());\r\n                            this.eventsList.clear();\r\n                            this.eventsList.addAll(fetchedEvents);\r\n                            eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());\r\n                            fragmentEventBinding.progressBar.setVisibility(View.GONE);\r\n\r\n                        } else {\r\n                            eventsAndPlacesViewModel.setLoading(false);\r\n                            eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                            int initialSize = eventsList.size();\r\n\r\n                            for (int i = 0; i < eventsList.size(); i++) {\r\n                                if (eventsList.get(i) == null) {\r\n                                    eventsList.remove(eventsList.get(i));\r\n                                }\r\n                            }\r\n                            int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                                    EVENTS_PAGE_SIZE_VALUE;\r\n                            for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                                eventsList.add(fetchedEvents.get(i));\r\n                            }\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n                        }\r\n                    } else {\r\n                        fragmentEventBinding.progressBar.setVisibility(View.GONE);\r\n                    }\r\n                } else {\r\n                    Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                    ErrorMessageUtil errorMessagesUtil =\r\n                            new ErrorMessageUtil(requireActivity().getApplication());\r\n                    Snackbar.make(requireView(), errorMessagesUtil.\r\n                                    getErrorMessage(((Result.Error) result).getMessage()),\r\n                            Snackbar.LENGTH_SHORT).show();\r\n                    fragmentEventBinding.progressBar.setVisibility(View.GONE);\r\n                }\r\n\r\n            } else {\r\n                //NON CI SONO EVENTI SIMILI\r\n            }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getCategoryEventsLiveData(events.getCategory()).getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<Result> eventsListMutableLiveData = eventsAndPlacesViewModel.getCategoryEventsLiveData(events.getCategory());\r\n\r\n                        if (eventsListMutableLiveData.getValue() != null &&\r\n                                eventsListMutableLiveData.getValue().isSuccess()) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            eventsList.add(null);\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(eventsList.size(),\r\n                                    eventsList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.getCategoryEventsLiveData(events.getCategory());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void googleMaps(LatLng latLng, String placeName) {\r\n        try {\r\n            MapsInitializer.initialize(getActivity().getApplicationContext());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        mMapView.getMapAsync(new OnMapReadyCallback() {\r\n            @Override\r\n            public void onMapReady(GoogleMap mMap) {\r\n                googleMap = mMap;\r\n                Marker marker = googleMap.addMarker(new MarkerOptions().position(latLng).title(placeName));\r\n                googleMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\r\n                    @Override\r\n                    public boolean onMarkerClick(@NonNull Marker marker) {\r\n                        LatLng position = marker.getPosition();\r\n                        googleMap.moveCamera(CameraUpdateFactory.newLatLng(position));\r\n                        googleMap.getMaxZoomLevel();\r\n\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                googleMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {\r\n                    @Override\r\n                    public void onMapClick(@NonNull LatLng latLng) {\r\n                        String uri = String.format(Locale.ENGLISH, \"geo:%f,%f\", latLng.latitude, latLng.longitude);\r\n                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\r\n                        startActivity(intent);\r\n                    }\r\n                });\r\n\r\n                // For zooming automatically to the location of the marker\r\n                CameraPosition cameraPosition = new CameraPosition.Builder().target(latLng).zoom(15).build();\r\n                googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n        mMapView.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentEventBinding = null;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        mMapView.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        mMapView.onPause();\r\n    }\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n    private void showEventWithNoPlace(Events events){\r\n        //L'evento non ha il nome del place in cui si tiene\r\n\r\n        if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {\r\n            fragmentEventBinding.eventImage.setVisibility(View.VISIBLE);\r\n            Glide.with(this).load(events.getEventSource().getUrlPhoto()).into(fragmentEventBinding.eventImage);\r\n        }\r\n\r\n        fragmentEventBinding.eventTitle.setText(events.getTitle());\r\n        fragmentEventBinding.eventCategory.setText(events.getCategory());\r\n\r\n        if (events.getEventSource() != null) {\r\n            fragmentEventBinding.sourceTV.setText(events.getEventSource().getUrl());\r\n        } else {\r\n            fragmentEventBinding.forMoreInfoTV.setVisibility(View.GONE);\r\n            fragmentEventBinding.sourceTV.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (events.getDescription() != null && !Objects.equals(events.getDescription(), \"\")) {\r\n            fragmentEventBinding.eventDescription.setText(events.getDescription());\r\n        } else {\r\n            fragmentEventBinding.showInfoTV.setVisibility(View.GONE);\r\n            fragmentEventBinding.eventDescription.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n        if (events.getEnd() != null && !Objects.equals(events.getStart(), events.getEnd())) {\r\n            String dateStart = events.getStart();\r\n            String dateEnd = events.getEnd();\r\n            Date date1 = DateUtils.parseDateToShow(dateStart, \"EN\");\r\n            Date date2 = DateUtils.parseDateToShow(dateEnd, \"EN\");\r\n            SimpleDateFormat outputFormat = new SimpleDateFormat(\"dd MMM yyyy, HH:mm\");\r\n            String formattedDate = outputFormat.format(date1) + \"\\n\" + outputFormat.format(date2);\r\n            fragmentEventBinding.eventDate.setText(formattedDate);\r\n        } else {\r\n            String date = events.getStart();\r\n            Date date1 = DateUtils.parseDateToShow(date, \"EN\");\r\n            SimpleDateFormat outputFormat = new SimpleDateFormat(\"dd MMM yyyy, HH:mm\");\r\n            String formattedDate = outputFormat.format(date1);\r\n            fragmentEventBinding.eventDate.setText(formattedDate);\r\n        }\r\n\r\n        if (!events.getPlaces().isEmpty()) {\r\n            if (events.getPlaces().get(0).getName() != null) {\r\n                fragmentEventBinding.eventPlace.setText(events.getPlaces().get(0).getName());\r\n                if (events.getPlaces().get(0).getAddress() != null) {\r\n                    fragmentEventBinding.eventAddress.setText(events.getPlaces().get(0).getAddress());\r\n                    fragmentEventBinding.eventAddress2.setText(events.getPlaces().get(0).getAddress());\r\n                } else {\r\n                    fragmentEventBinding.eventAddress.setVisibility(View.GONE);\r\n                    fragmentEventBinding.eventAddress2.setVisibility(View.GONE);\r\n                }\r\n            } else {\r\n                fragmentEventBinding.eventPlace.setText(\"Unknown\");\r\n                fragmentEventBinding.eventAddress.setVisibility(View.GONE);\r\n                fragmentEventBinding.eventAddress2.setVisibility(View.GONE);\r\n            }\r\n        } else {\r\n            fragmentEventBinding.eventPlace.setText(\"Unknown\");\r\n            fragmentEventBinding.eventAddress.setVisibility(View.GONE);\r\n            fragmentEventBinding.eventAddress2.setVisibility(View.GONE);\r\n        }\r\n\r\n        fragmentEventBinding.phoneNumber.setVisibility(View.GONE);\r\n\r\n        if (!events.getCategory().equals(\"movies\")) { //PER ORA I MOVIES SON SOLO QUELLI DEL GIORNO CORRENTE\r\n            eventsAndPlacesViewModel.getEventsDates(events.getTitle()).observe(getViewLifecycleOwner(), result2 -> {\r\n                if (result2.size() > 1) {\r\n                    showAllEventsDate(result2);\r\n                }\r\n            });\r\n        } else { //MOSTRA ORARI FILM DEL GIORNO CORRENTE\r\n            showAllHoursMovie(events.getHours());\r\n        }\r\n\r\n        //EVENTI SIMILI ---------------------------------------------------------------------\r\n\r\n        sameCategoryEvents(events);\r\n\r\n\r\n        //GOOGLE MAPS ---------------------------------------------------------------------------------------------------\r\n        if (!fragmentEventBinding.eventPlace.getText().equals(\"Unknown\")) {\r\n            if(events.getCoordinates()[0] > events.getCoordinates()[1]) { //SONO GIUSTE\r\n                googleMaps(new LatLng(events.getCoordinates()[0], events.getCoordinates()[1]), null);\r\n            }else{\r\n                googleMaps(new LatLng(events.getCoordinates()[1], events.getCoordinates()[0]), null);\r\n\r\n            }\r\n        } else {\r\n            fragmentEventBinding.mapView.setVisibility(View.GONE);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/EventFragment.java	
@@ -216,7 +216,7 @@
                         Date date1 = DateUtils.parseDateToShow(dateStart, "EN");
                         Date date2 = DateUtils.parseDateToShow(dateEnd, "EN");
                         SimpleDateFormat outputFormat = new SimpleDateFormat("dd MMM yyyy, HH:mm");
-                        String formattedDate = outputFormat.format(date1) + " - " + outputFormat.format(date2);
+                        String formattedDate = outputFormat.format(date1) + " \n " + outputFormat.format(date2);
                         fragmentEventBinding.eventDate.setText(formattedDate);
                     } else {
                         String date = events.getStart();
@@ -261,12 +261,19 @@
                     //GOOGLE MAPS ---------------------------------------------------------------------------------------------------
 
                     if (!fragmentEventBinding.eventPlace.getText().equals("Unknown")) {
-                        googleMaps(new LatLng(result.getCoordinates()[0], result.getCoordinates()[1]), result.getName());
+                        LatLng latLng;
+                        if (result.getCoordinates()[0] > result.getCoordinates()[1]) {
+                            latLng = new LatLng(result.getCoordinates()[0], result.getCoordinates()[1]);
+                        } else {
+                            latLng = new LatLng(result.getCoordinates()[1], result.getCoordinates()[0]);
+                        }
+
+                        googleMaps(latLng, result.getName());
                     } else {
                         fragmentEventBinding.mapView.setVisibility(View.GONE);
                     }
 
-                }else{  //NON ESISTE IL PLACE DELL'EVENTO NEL DATABASE
+                } else {  //NON ESISTE IL PLACE DELL'EVENTO NEL DATABASE
                     showEventWithNoPlace(events);
                 }
             });
@@ -380,6 +387,16 @@
                     public void onFavoriteButtonPressed(int position) {
                         //SETTA EVENTO COME PREFERITO
                     }
+
+                    @Override
+                    public void onModeEventButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onDeleteEventButtonPressed(Events events) {
+
+                    }
                 });
         recyclerView.setLayoutManager(layoutManager);
         recyclerView.setAdapter(eventsRecyclerViewAdapter);
@@ -557,7 +574,7 @@
         return activeNetwork != null && activeNetwork.isConnectedOrConnecting();
     }
 
-    private void showEventWithNoPlace(Events events){
+    private void showEventWithNoPlace(Events events) {
         //L'evento non ha il nome del place in cui si tiene
 
         if (events.getEventSource() != null && events.getEventSource().getUrlPhoto() != null) {
@@ -639,9 +656,9 @@
 
         //GOOGLE MAPS ---------------------------------------------------------------------------------------------------
         if (!fragmentEventBinding.eventPlace.getText().equals("Unknown")) {
-            if(events.getCoordinates()[0] > events.getCoordinates()[1]) { //SONO GIUSTE
+            if (events.getCoordinates()[0] > events.getCoordinates()[1]) { //SONO GIUSTE
                 googleMaps(new LatLng(events.getCoordinates()[0], events.getCoordinates()[1]), null);
-            }else{
+            } else {
                 googleMaps(new LatLng(events.getCoordinates()[1], events.getCoordinates()[0]), null);
 
             }
Index: app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.repository.events;\r\n\r\nimport android.util.Log;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.Lifecycle;\r\nimport androidx.lifecycle.LifecycleOwner;\r\nimport androidx.lifecycle.LifecycleRegistry;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.source.events.BaseEventsLocalDataSource;\r\nimport com.example.eventiapp.source.events.BaseEventsRemoteDataSource;\r\nimport com.example.eventiapp.source.events.BaseFavoriteEventsDataSource;\r\nimport com.example.eventiapp.source.events.EventsCallback;\r\nimport com.example.eventiapp.source.google.PlaceDetailsSource;\r\nimport com.example.eventiapp.source.places.BasePlacesLocalDataSource;\r\nimport com.example.eventiapp.source.places.PlaceCallback;\r\nimport com.example.eventiapp.util.Constants;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class RepositoryWithLiveData implements IRepositoryWithLiveData, EventsCallback, PlaceCallback {\r\n\r\n    private static final String TAG = RepositoryWithLiveData.class.getSimpleName();\r\n\r\n    private final MutableLiveData<Result> allEventsMutableLiveData;\r\n    private final MutableLiveData<Result> eventsFromSearchLiveData;\r\n    private final MutableLiveData<Result> favoriteEventsMutableLiveData;\r\n    private final MutableLiveData<Result> categoryEventsMutableLiveData;\r\n    private final MutableLiveData<Result> eventsInADateMutableLiveData;\r\n    private final MutableLiveData<Result> categoriesEventsMutableLiveData;\r\n    private final MutableLiveData<Result> eventsBetweenDatesMutableLiveData;\r\n    private final MutableLiveData<Result> categoryEventsBetweenDatesMutableLiveData;\r\n    private final MutableLiveData<Result> placeEventsMutableLiveData;\r\n    private final MutableLiveData<Result> singleEventMutableLiveData;\r\n    private final MutableLiveData<List<String>> eventsDateMutableLiveData;\r\n    private final MutableLiveData<String[]> moviesHoursMutableLiveData;\r\n    private final MutableLiveData<List<String>> allCategoriesMutableLiveData;\r\n    private final MutableLiveData<List<String>> categoriesInADateMutableLiveData;\r\n\r\n    //PLACES\r\n    private final MutableLiveData<List<Place>> allPlacesMutableLiveData;\r\n    private final MutableLiveData<List<Place>> favoritePlacesMutableLiveData;\r\n    private final MutableLiveData<Place> singlePlaceMutableLiveData;\r\n    private final MutableLiveData<List<Place>> placesFromSearchLiveData;\r\n\r\n    private final BaseEventsRemoteDataSource eventsRemoteDataSource;\r\n    private final BaseEventsLocalDataSource eventsLocalDataSource;\r\n    private final BasePlacesLocalDataSource placesLocalDataSource;\r\n\r\n    private final BaseFavoriteEventsDataSource backupDataSource;\r\n\r\n    private final PlaceDetailsSource placeDetailsSource;\r\n    private List<String> dates;\r\n    private int count;\r\n\r\n    private LifecycleRegistry lifecycleRegistry;\r\n\r\n\r\n    public RepositoryWithLiveData(BaseEventsRemoteDataSource eventsRemoteDataSource, BaseEventsLocalDataSource eventsLocalDataSource,\r\n                                  BasePlacesLocalDataSource placesLocalDataSource, PlaceDetailsSource placeDetailsSource, BaseFavoriteEventsDataSource favoriteEventsDataSource) {\r\n        allEventsMutableLiveData = new MutableLiveData<>();\r\n        eventsFromSearchLiveData = new MutableLiveData<>();\r\n        favoriteEventsMutableLiveData = new MutableLiveData<>();\r\n        categoryEventsMutableLiveData = new MutableLiveData<>();\r\n        eventsInADateMutableLiveData = new MutableLiveData<>();\r\n        eventsBetweenDatesMutableLiveData = new MutableLiveData<>();\r\n        categoriesEventsMutableLiveData = new MutableLiveData<>();\r\n        categoryEventsBetweenDatesMutableLiveData = new MutableLiveData<>();\r\n        singleEventMutableLiveData = new MutableLiveData<>();\r\n        placeEventsMutableLiveData = new MutableLiveData<>();\r\n        eventsDateMutableLiveData = new MutableLiveData<>();\r\n        moviesHoursMutableLiveData = new MutableLiveData<>();\r\n        allPlacesMutableLiveData = new MutableLiveData<>();\r\n        placesFromSearchLiveData = new MutableLiveData<>();\r\n        favoritePlacesMutableLiveData = new MutableLiveData<>();\r\n        singlePlaceMutableLiveData = new MutableLiveData();\r\n        allCategoriesMutableLiveData = new MutableLiveData<>();\r\n        categoriesInADateMutableLiveData = new MutableLiveData<>();\r\n        this.eventsRemoteDataSource = eventsRemoteDataSource;\r\n        this.eventsRemoteDataSource.setEventsCallback(this);\r\n        this.eventsLocalDataSource = eventsLocalDataSource;\r\n        this.eventsLocalDataSource.setEventsCallback(this);\r\n        this.placesLocalDataSource = placesLocalDataSource;\r\n        this.placesLocalDataSource.setPlacesCallback((PlaceCallback) this);\r\n        this.placeDetailsSource = placeDetailsSource;\r\n        this.backupDataSource = favoriteEventsDataSource;\r\n        this.backupDataSource.setEventsCallback(this);\r\n\r\n        lifecycleRegistry = new LifecycleRegistry(new LifecycleOwner() {\r\n            @NonNull\r\n            @Override\r\n            public Lifecycle getLifecycle() {\r\n                return lifecycleRegistry;\r\n            }\r\n        });\r\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\r\n\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> fetchEvents(String country, String location, String date, String categories, String sort, int limit, long lastUpdate) {\r\n\r\n\r\n\r\n        long currentTime = System.currentTimeMillis();\r\n\r\n        if (currentTime - lastUpdate > Constants.FRESH_TIMEOUT) {\r\n            eventsRemoteDataSource.getEvents(country, location, date, categories, sort, limit);\r\n        } else {\r\n            eventsLocalDataSource.getEvents();\r\n        }\r\n\r\n\r\n\r\n        //eventsLocalDataSource.getEvents();\r\n\r\n        return allEventsMutableLiveData;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void fetchEvents(String country, String location, String date, String categories, String sort, int limit) {\r\n        eventsRemoteDataSource.getEvents(country, location, date, categories, sort, limit);\r\n       // eventsLocalDataSource.getEvents();\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getFavoriteEvents(boolean isFirstLoading) {\r\n        if (isFirstLoading) {\r\n            backupDataSource.getFavoriteEvents();\r\n        } else {\r\n            eventsLocalDataSource.getFavoriteEvents();\r\n        }\r\n        return favoriteEventsMutableLiveData;\r\n    }\r\n\r\n\r\n    public MutableLiveData<Result> getCategoryEvents(String category) {\r\n        eventsLocalDataSource.getCategoryEvents(category);\r\n        return categoryEventsMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getPlaceEvents(String id) {\r\n        eventsLocalDataSource.getPlaceEvent(id);\r\n        return placeEventsMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getSingleEvent(long id) {\r\n        eventsLocalDataSource.getSingleEvent(id);\r\n        return singleEventMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getEventsInADate(String date) {\r\n        eventsLocalDataSource.getEventsInADate(date);\r\n        return eventsInADateMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<String>> getAllCategories() {\r\n        eventsLocalDataSource.getAllCategories();\r\n        return allCategoriesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<String>> getCategoriesInADate(String date) {\r\n        eventsLocalDataSource.getCategoriesInADate(date);\r\n        return categoriesInADateMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getEventsFromSearch(String input) {\r\n        eventsLocalDataSource.getEventsFromSearch(input);\r\n        return eventsFromSearchLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getCategoriesEvents(List<String> categories) {\r\n        eventsLocalDataSource.getCategoriesEvents(categories);\r\n        return categoriesEventsMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getEventsBetweenDates(String firstDate, String endDate) {\r\n        eventsLocalDataSource.getEventsBetweenDates(firstDate, endDate);\r\n        return eventsBetweenDatesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Result> getCategoryEventsBetweenDates(String firstDate, String endDate, List<String> categories) {\r\n        eventsLocalDataSource.getCategoryEventsBetweenDates(firstDate, endDate, categories);\r\n        return categoryEventsBetweenDatesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<String>> getEventsDates(String name) {\r\n        eventsLocalDataSource.getEventsDates(name);\r\n        return eventsDateMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<String[]> getMoviesHours(String name) {\r\n        eventsLocalDataSource.getMoviesHours(name);\r\n        return moviesHoursMutableLiveData;\r\n    }\r\n\r\n    //PLACES --------------------------\r\n\r\n    @Override\r\n    public MutableLiveData<List<Place>> fetchPlaces() {\r\n        placesLocalDataSource.getPlaces();\r\n        return allPlacesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<Place>> getFavoritePlaces(boolean isFirstLoading) {\r\n        if (isFirstLoading) {\r\n            //PRENDE I BACKUP\r\n        } else {\r\n            placesLocalDataSource.getFavoritePlaces();\r\n        }\r\n        return favoritePlacesMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Place> getSinglePlace(String id) {\r\n        placesLocalDataSource.getSinglePlace(id);\r\n        return singlePlaceMutableLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<List<Place>> getPlacesFromSearch(String input) {\r\n        placesLocalDataSource.getPlacesFromSearch(input);\r\n        return placesFromSearchLiveData;\r\n    }\r\n\r\n    @Override\r\n    public MutableLiveData<Place> getSinglePlaceByName(String name) {\r\n        placesLocalDataSource.getSinglePlaceByName(name);\r\n        return singlePlaceMutableLiveData;\r\n    }\r\n\r\n    //----------------------------\r\n\r\n    @Override\r\n    public void updateEvents(Events events) {\r\n        eventsLocalDataSource.updateEvents(events);\r\n        if (events.isFavorite()) {\r\n            backupDataSource.addFavoriteEvents(events);\r\n        } else {\r\n            backupDataSource.deleteFavoriteEvents(events);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getCount() {\r\n        eventsLocalDataSource.getCount();\r\n        return this.count;\r\n    }\r\n\r\n    public void deleteEvents() {\r\n        eventsLocalDataSource.deleteAll();\r\n    }\r\n\r\n    @Override\r\n    public void deletePlaces() {\r\n        placesLocalDataSource.deleteAll();\r\n    }\r\n\r\n    @Override\r\n    public void deleteFavoriteEvents() {\r\n        eventsLocalDataSource.deleteFavoriteEvents();\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromRemote(EventsApiResponse eventsApiResponse, long lastUpdate) {\r\n        eventsLocalDataSource.insertEvents(eventsApiResponse);\r\n        //PLACES\r\n        List<Events> fetchedEvents = eventsApiResponse.getEventsList();\r\n\r\n        /*\r\n        Place uci = new Place(\"uci_bicocca\", \"UCI Cinemas Bicocca\", \"venue\", \"Via Chiese, 20126 Milan MI, Italy\", new double[]{45.5220145, 9.2133497});\r\n        Place pirelli = new Place(\"pirelli_hangar\", \"Pirelli HangarBicocca\", \"venue\", \"Via Chiese, 2, 20126 Milan MI, Italy\", new double[]{45.5203608, 9.2160497});\r\n        List<Place> uciList=new ArrayList<>();\r\n        uciList.add(uci);\r\n        List<Place> pirelliList=new ArrayList<>();\r\n        pirelliList.add(pirelli);\r\n        fetchedEvents.add(new Events(uciList));\r\n        fetchedEvents.add(new Events(pirelliList));\r\n\r\n         */\r\n\r\n /*\r\n        //RIMUOVE EVENTI PRESENTI NELLO STESSO LUOGO COSI DA AVERE EVENTI CHE SI TENGONO IN POSTI DIVERSI PER POTER SALVARE QUEST ULTIMI\r\n        Map<String, Events> map = new HashMap<String, Events>();\r\n        for (Events e : fetchedEvents) {\r\n            if (!e.getPlaces().isEmpty()) {\r\n                String idPlace = e.getPlaces().get(0).getId();\r\n                if (!map.containsKey(idPlace)) {\r\n                    map.put(idPlace, e);\r\n                }\r\n                if (e.getCoordinates()[0] < e.getCoordinates()[1]) {\r\n                    double temp = e.getCoordinates()[0];\r\n                    e.getCoordinates()[0] = e.getCoordinates()[1];\r\n                    e.getCoordinates()[1] = temp;\r\n                }\r\n            }\r\n        }\r\n        List<Events> eventsNoDuplicates = new ArrayList<>(map.values());\r\n\r\n\r\n        allPlacesMutableLiveData.observe(new LifecycleOwner() {\r\n            @NonNull\r\n            @Override\r\n            public Lifecycle getLifecycle() {\r\n                return lifecycleRegistry;\r\n            }\r\n        }, new Observer<List<Place>>() {\r\n            @Override\r\n            public void onChanged(List<Place> places) {\r\n                for (Events e : eventsNoDuplicates) {\r\n                    boolean isPlaceAlreadyAdded = false;\r\n                    for (Place place : allPlacesMutableLiveData.getValue()) {\r\n                        if (place.getId().equals(e.getPlaces().get(0).getId())) {\r\n                            isPlaceAlreadyAdded = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!isPlaceAlreadyAdded) {  //COSI RISPARMIO SULLA VELOCITA E SUI SOLDI PER LE API PLACES DI GOOGLE\r\n                        //DEVO PRENDERE COORDINATE, INDIRIZZO, FOTO E NUMERO DI TELEFONO DEL POSTO  PIU PRECISI\r\n                        Log.i(\"POSTO NUOVO\", e.getPlaces().toString());\r\n                        placeDetailsSource.fetchPlaceDetails(e.getPlaces().get(0).getName(), e.getPlaces().get(0).getAddress(), new PlaceDetailsSource.PlaceDetailsListener() {\r\n                            @Override\r\n                            public void onPlaceDetailsFetched(com.google.android.libraries.places.api.model.Place place) {\r\n                                // Hai ottenuto i dettagli del posto\r\n                                double[] coordinates;\r\n                                if (place.getLatLng() != null) {\r\n                                    coordinates = new double[]{place.getLatLng().latitude, place.getLatLng().longitude};\r\n                                } else {\r\n                                    coordinates = new double[]{e.getCoordinates()[0], e.getCoordinates()[1]};\r\n                                }\r\n                                List<Place> placesList = new ArrayList<>();\r\n                                placesList.add(new Place(e.getPlaces().get(0).getId(), StringUtils.capitalizeFirstLetter(place.getName()), e.getPlaces().get(0).getType(), place.getAddress(), place.getId(), coordinates, place.getPhoneNumber(), place.getPhotoMetadatas()));\r\n                                placesLocalDataSource.insertPlaces(placesList);\r\n                            }\r\n\r\n                            @Override\r\n                            public void onError(String message) {\r\n                                Log.i(\"ERRORE FETCH PLACE:\", message);\r\n                                //PER I POSTI NON TROVATI USO IL COSTUTTORE DI DEFAULT CON LE INFORMAZIONI BASE\r\n                                //placesList.add(new Place(e.getPlaces().get(0).getId(), e.getPlaces().get(0).getName(), e.getPlaces().get(0).getType(), e.getPlaces().get(0).getAddress(), e.getCoordinates()));\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n         */\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onSuccessFromRemoteJsoup(EventsApiResponse eventsApiResponse) {\r\n        eventsLocalDataSource.insertEvents(eventsApiResponse);\r\n\r\n\r\n        //PLACES\r\n        Place uci = new Place(\"uci_bicocca\", \"UCI Cinemas Bicocca\", \"venue\", \"Via Chiese, 20126 Milan MI, Italy\", new double[]{45.5220145, 9.2133497});\r\n        Place pirelli = new Place(\"pirelli_hangar\", \"Pirelli HangarBicocca\", \"venue\", \"Via Chiese, 2, 20126 Milan MI, Italy\", new double[]{45.5203608, 9.2160497});\r\n        Place unimib = new Place(\"unimib\", \"Università degli Studi di Milano Bicocca\", \"venue\", \"Piazza dell'Ateneo Nuovo, 1, 20126 Milano MI, Italy\", new double[]{45.5182898, 9.2111811});\r\n        Place arcimboldi = new Place(\"arcimboldi\", \"Teatro arcimboldi\", \"venue\", \"Viale dell'Innovazione, 20, 20126 Milano MI, Italy\", new double[]{45.514842, 9.2109728});\r\n\r\n        List<Place> placeList = new ArrayList<>();\r\n        placeList.add(uci);\r\n        placeList.add(pirelli);\r\n        placeList.add(unimib);\r\n        placeList.add(arcimboldi);\r\n\r\n\r\n        /*\r\n        allPlacesMutableLiveData.observe(new LifecycleOwner() {\r\n            @NonNull\r\n            @Override\r\n            public Lifecycle getLifecycle() {\r\n                return lifecycleRegistry;\r\n            }\r\n        }, new Observer<List<Place>>() {\r\n            @Override\r\n            public void onChanged(List<Place> places) {\r\n                for (Place p : placeList) {\r\n                    boolean isPlaceAlreadyAdded = false;\r\n                    for (Place place : (allPlacesMutableLiveData.getValue())) {\r\n                        if (place.getId().equals(p.getId())) {\r\n                            isPlaceAlreadyAdded = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!isPlaceAlreadyAdded) {  //COSI RISPARMIO SULLA VELOCITA E SUI SOLDI PER LE API PLACES DI GOOGLE\r\n                        //DEVO PRENDERE COORDINATE, INDIRIZZO, FOTO E NUMERO DI TELEFONO DEL POSTO  PIU PRECISI\r\n                        placeDetailsSource.fetchPlaceDetails(p.getName(), p.getAddress(), new PlaceDetailsSource.PlaceDetailsListener() {\r\n                            @Override\r\n                            public void onPlaceDetailsFetched(com.google.android.libraries.places.api.model.Place place) {\r\n                                List<Place> placesList = new ArrayList<>();\r\n                                placesList.add(new Place(p.getId(), StringUtils.capitalizeFirstLetter(place.getName()), p.getType(), place.getAddress(), place.getId(), p.getCoordinates(), place.getPhoneNumber(), place.getPhotoMetadatas()));\r\n                                placesLocalDataSource.insertPlaces(placesList);\r\n                            }\r\n\r\n                            @Override\r\n                            public void onError(String message) {\r\n                                Log.i(\"ERRORE FETCH PLACE:\", message);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n         */\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onFailureFromRemote(Exception exception) {\r\n        Result.Error result = new Result.Error(exception.getMessage());\r\n        allEventsMutableLiveData.postValue(result);\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromLocal(EventsApiResponse eventsApiResponse) {\r\n        if (allEventsMutableLiveData.getValue() != null && allEventsMutableLiveData.getValue().isSuccess()) {\r\n            List<Events> eventsList = ((Result.EventsResponseSuccess) allEventsMutableLiveData.getValue()).getData().getEventsList();\r\n            eventsList.addAll(eventsApiResponse.getEventsList());\r\n            eventsApiResponse.setEventsList(eventsList);\r\n            Result.EventsResponseSuccess result = new Result.EventsResponseSuccess(eventsApiResponse);\r\n            allEventsMutableLiveData.postValue(result);\r\n        } else {\r\n            Result.EventsResponseSuccess result = new Result.EventsResponseSuccess(eventsApiResponse);\r\n            allEventsMutableLiveData.postValue(result);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onFailureFromLocal(Exception exception) {\r\n        Result.Error resultError = new Result.Error(exception.getMessage());\r\n        allEventsMutableLiveData.postValue(resultError);\r\n        favoriteEventsMutableLiveData.postValue(resultError);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onEventsCategory(List<Events> events) {\r\n        categoryEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onEventsPlace(List<Events> events) {\r\n        placeEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onSingleEvent(Events event) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onEventsInADate(List<Events> events) {\r\n        eventsInADateMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onEventsDates(List<String> dates) {\r\n        if (dates.size() > 1) {\r\n            eventsDateMutableLiveData.postValue(dates);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onMoviesHours(String[] hours) {\r\n        if (hours.length > 1) {\r\n            moviesHoursMutableLiveData.postValue(hours);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onEventsFavoriteStatusChanged(Events events, List<Events> favoriteEvents) {\r\n        Result allEventsResult = allEventsMutableLiveData.getValue();\r\n\r\n        if (allEventsResult != null && allEventsResult.isSuccess()) {\r\n            List<Events> oldAllEvents = ((Result.EventsResponseSuccess) allEventsResult).getData().getEventsList();\r\n            if (oldAllEvents.contains(events)) {\r\n                oldAllEvents.set(oldAllEvents.indexOf(events), events);\r\n                allEventsMutableLiveData.postValue(allEventsResult);\r\n            }\r\n        }\r\n        favoriteEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(favoriteEvents)));\r\n    }\r\n\r\n    @Override\r\n    public void onEventsFavoriteStatusChanged(List<Events> events) {\r\n        List<Events> notSynchronizedEventsList = new ArrayList<>();\r\n\r\n        for (Events event : events) {\r\n            if (!event.isSynchronized()) {\r\n                notSynchronizedEventsList.add(event);\r\n            }\r\n        }\r\n\r\n        if (!notSynchronizedEventsList.isEmpty()) {\r\n            backupDataSource.synchronizeFavoriteEvents(notSynchronizedEventsList);\r\n        }\r\n\r\n        favoriteEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteFavoriteEventsSuccess(List<Events> favoriteEvents) {\r\n        Result allEventsResult = allEventsMutableLiveData.getValue();\r\n\r\n        if (allEventsResult != null && allEventsResult.isSuccess()) {\r\n            List<Events> oldAllEvents = ((Result.EventsResponseSuccess) allEventsResult).getData().getEventsList();\r\n            for (Events event : favoriteEvents) {\r\n                if (oldAllEvents.contains(event)) {\r\n                    oldAllEvents.set(oldAllEvents.indexOf(event), event);\r\n                }\r\n            }\r\n            allEventsMutableLiveData.postValue(allEventsResult);\r\n        }\r\n\r\n        if (favoriteEventsMutableLiveData.getValue() != null &&\r\n                favoriteEventsMutableLiveData.getValue().isSuccess()) {\r\n            favoriteEvents.clear();\r\n            Result.EventsResponseSuccess result = new Result.EventsResponseSuccess(new EventsResponse(favoriteEvents));\r\n            favoriteEventsMutableLiveData.postValue(result);\r\n        }\r\n\r\n        backupDataSource.deleteAllFavoriteEvents();\r\n    }\r\n\r\n    @Override\r\n    public void onCount(int count) {\r\n        this.count = count;\r\n    }\r\n\r\n    @Override\r\n    public void onAllCategories(List<String> categories) {\r\n        allCategoriesMutableLiveData.postValue(categories);\r\n    }\r\n\r\n    @Override\r\n    public void onCategoriesInADate(List<String> categories) {\r\n        categoriesInADateMutableLiveData.postValue(categories);\r\n    }\r\n\r\n    @Override\r\n    public void onCategoriesEvents(List<Events> events) {\r\n        categoriesEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onEventsBetweenDates(List<Events> events) {\r\n        eventsBetweenDatesMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onCategoryEventsBetweenDates(List<Events> events) {\r\n        categoryEventsBetweenDatesMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onEventsFromSearch(List<Events> events) {\r\n        eventsFromSearchLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(events)));\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromCloudReading(List<Events> eventsList) {\r\n        if (eventsList != null) {\r\n            for (Events events : eventsList) {\r\n                events.setSynchronized(true);\r\n            }\r\n            eventsLocalDataSource.insertEvents(eventsList);\r\n            favoriteEventsMutableLiveData.postValue(new Result.EventsResponseSuccess(new EventsResponse(eventsList)));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessFromCloudWriting(Events events) {\r\n        if (events != null && !events.isFavorite()) {\r\n            events.setSynchronized(false);\r\n        }\r\n        eventsLocalDataSource.updateEvents(events);\r\n        backupDataSource.getFavoriteEvents();\r\n    }\r\n\r\n    @Override\r\n    public void onFailureFromCloud(Exception exception) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessSynchronization() {\r\n        Log.d(TAG, \"Events synchronized from remote\");\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessDeletion() {\r\n        Log.d(TAG, \"Events delete from DB\");\r\n    }\r\n\r\n\r\n    //PLACECALLBACK -------------------------------------------\r\n\r\n    public void onSuccessFromLocalP(List<Place> placeList) {\r\n        if (allPlacesMutableLiveData.getValue() != null) {\r\n            List<Place> placeListOld = allPlacesMutableLiveData.getValue();\r\n            placeListOld.addAll(placeList);\r\n            allPlacesMutableLiveData.postValue(placeListOld);\r\n        } else {\r\n            allPlacesMutableLiveData.postValue(placeList);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onFailureFromLocalP(Exception exception) {\r\n        exception.getMessage();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onSinglePlace(Place place) {\r\n        singlePlaceMutableLiveData.postValue(place);\r\n    }\r\n\r\n    @Override\r\n    public void onPlacesFromSearch(List<Place> places) {\r\n        placesFromSearchLiveData.postValue(places);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onPlacesFavoriteStatusChanged(Place place, List<Place> favoritePlaces) {\r\n        List<Place> allPlaces = allPlacesMutableLiveData.getValue();\r\n        if (allPlaces != null) {\r\n            List<Place> oldAllPlaces = allPlaces;\r\n            if (oldAllPlaces.contains(place)) {\r\n                oldAllPlaces.set(oldAllPlaces.indexOf(place), place);\r\n                allPlacesMutableLiveData.postValue(allPlaces);\r\n            }\r\n        }\r\n        favoritePlacesMutableLiveData.postValue(favoritePlaces);\r\n    }\r\n\r\n    @Override\r\n    public void onPlacesFavoriteStatusChanged(List<Place> placeList) {\r\n        List<Place> notSynchronizedPlacesList = new ArrayList<>();\r\n\r\n        for (Place p : placeList) {\r\n            if (!p.isSynchronized()) {\r\n                notSynchronizedPlacesList.add(p);\r\n            }\r\n        }\r\n\r\n        if (!notSynchronizedPlacesList.isEmpty()) {\r\n            //BACKUP\r\n        }\r\n\r\n        favoritePlacesMutableLiveData.postValue(placeList);\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteFavoritePlacesSuccess(List<Place> favoritePlaces) {\r\n        List<Place> allPlaces = allPlacesMutableLiveData.getValue();\r\n\r\n        if (allPlaces != null) {\r\n            List<Place> oldAllPlaces = allPlaces;\r\n            for (Place p : favoritePlaces) {\r\n                if (oldAllPlaces.contains(p)) {\r\n                    oldAllPlaces.set(oldAllPlaces.indexOf(p), p);\r\n                }\r\n            }\r\n            allPlacesMutableLiveData.postValue(allPlaces);\r\n        }\r\n\r\n        if (favoritePlacesMutableLiveData.getValue() != null) {\r\n            favoritePlaces.clear();\r\n            favoritePlacesMutableLiveData.postValue(favoritePlaces);\r\n        }\r\n\r\n        //backupDataSource.deleteAllFavoriteNews();\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessSynchronizationP() {\r\n        Log.d(TAG, \"Places synchronized from remote\");\r\n    }\r\n\r\n    @Override\r\n    public void onSuccessDeletionP() {\r\n\r\n    }\r\n\r\n\r\n    //-----------------------------------------------------------------\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java b/app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java
--- a/app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java	
+++ b/app/src/main/java/com/example/eventiapp/repository/events/RepositoryWithLiveData.java	
@@ -7,6 +7,7 @@
 import androidx.lifecycle.LifecycleOwner;
 import androidx.lifecycle.LifecycleRegistry;
 import androidx.lifecycle.MutableLiveData;
+import androidx.lifecycle.Observer;
 
 import com.example.eventiapp.model.Events;
 import com.example.eventiapp.model.EventsApiResponse;
@@ -21,8 +22,10 @@
 import com.example.eventiapp.source.places.BasePlacesLocalDataSource;
 import com.example.eventiapp.source.places.PlaceCallback;
 import com.example.eventiapp.util.Constants;
+import com.example.eventiapp.util.StringUtils;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -110,7 +113,7 @@
     public MutableLiveData<Result> fetchEvents(String country, String location, String date, String categories, String sort, int limit, long lastUpdate) {
 
 
-
+        /*
         long currentTime = System.currentTimeMillis();
 
         if (currentTime - lastUpdate > Constants.FRESH_TIMEOUT) {
@@ -119,9 +122,10 @@
             eventsLocalDataSource.getEvents();
         }
 
-
-
-        //eventsLocalDataSource.getEvents();
+         */
+
+
+        eventsLocalDataSource.getEvents();
 
         return allEventsMutableLiveData;
     }
@@ -129,8 +133,13 @@
 
     @Override
     public void fetchEvents(String country, String location, String date, String categories, String sort, int limit) {
-        eventsRemoteDataSource.getEvents(country, location, date, categories, sort, limit);
-       // eventsLocalDataSource.getEvents();
+        //eventsRemoteDataSource.getEvents(country, location, date, categories, sort, limit);
+         eventsLocalDataSource.getEvents();
+    }
+
+    @Override
+    public void addEvent(Events events) {
+        eventsLocalDataSource.insertEvents(new ArrayList<>(Collections.singleton(events)));
     }
 
     @Override
@@ -301,79 +310,68 @@
 
          */
 
- /*
+
         //RIMUOVE EVENTI PRESENTI NELLO STESSO LUOGO COSI DA AVERE EVENTI CHE SI TENGONO IN POSTI DIVERSI PER POTER SALVARE QUEST ULTIMI
         Map<String, Events> map = new HashMap<String, Events>();
         for (Events e : fetchedEvents) {
             if (!e.getPlaces().isEmpty()) {
-                String idPlace = e.getPlaces().get(0).getId();
-                if (!map.containsKey(idPlace)) {
-                    map.put(idPlace, e);
-                }
-                if (e.getCoordinates()[0] < e.getCoordinates()[1]) {
-                    double temp = e.getCoordinates()[0];
-                    e.getCoordinates()[0] = e.getCoordinates()[1];
-                    e.getCoordinates()[1] = temp;
+                String placeName = e.getPlaces().get(0).getName(); //PRENDO IL NOME PERCHè LE API DI PREDICTQ DANNO ID DIVERSI PER LO STESSO POSTO
+                if (!map.containsKey(placeName)) {
+                    map.put(placeName, e);
                 }
             }
         }
         List<Events> eventsNoDuplicates = new ArrayList<>(map.values());
+        List<Place> placesAlreadyInDb=new ArrayList<>(allPlacesMutableLiveData.getValue());
 
 
-        allPlacesMutableLiveData.observe(new LifecycleOwner() {
-            @NonNull
-            @Override
-            public Lifecycle getLifecycle() {
-                return lifecycleRegistry;
-            }
-        }, new Observer<List<Place>>() {
-            @Override
-            public void onChanged(List<Place> places) {
-                for (Events e : eventsNoDuplicates) {
-                    boolean isPlaceAlreadyAdded = false;
-                    for (Place place : allPlacesMutableLiveData.getValue()) {
-                        if (place.getId().equals(e.getPlaces().get(0).getId())) {
-                            isPlaceAlreadyAdded = true;
-                            break;
-                        }
-                    }
-                    if (!isPlaceAlreadyAdded) {  //COSI RISPARMIO SULLA VELOCITA E SUI SOLDI PER LE API PLACES DI GOOGLE
-                        //DEVO PRENDERE COORDINATE, INDIRIZZO, FOTO E NUMERO DI TELEFONO DEL POSTO  PIU PRECISI
-                        Log.i("POSTO NUOVO", e.getPlaces().toString());
-                        placeDetailsSource.fetchPlaceDetails(e.getPlaces().get(0).getName(), e.getPlaces().get(0).getAddress(), new PlaceDetailsSource.PlaceDetailsListener() {
-                            @Override
-                            public void onPlaceDetailsFetched(com.google.android.libraries.places.api.model.Place place) {
-                                // Hai ottenuto i dettagli del posto
-                                double[] coordinates;
-                                if (place.getLatLng() != null) {
-                                    coordinates = new double[]{place.getLatLng().latitude, place.getLatLng().longitude};
-                                } else {
-                                    coordinates = new double[]{e.getCoordinates()[0], e.getCoordinates()[1]};
-                                }
-                                List<Place> placesList = new ArrayList<>();
-                                placesList.add(new Place(e.getPlaces().get(0).getId(), StringUtils.capitalizeFirstLetter(place.getName()), e.getPlaces().get(0).getType(), place.getAddress(), place.getId(), coordinates, place.getPhoneNumber(), place.getPhotoMetadatas()));
-                                placesLocalDataSource.insertPlaces(placesList);
-                            }
+        for (Events e : eventsNoDuplicates) {
+            boolean isPlaceAlreadyAdded = false;
+            for (Place place : placesAlreadyInDb) {
+                if (place.getId().equals(e.getPlaces().get(0).getId())) {
+                    isPlaceAlreadyAdded = true;
+                    break;
+                }
+            }
+            if (!isPlaceAlreadyAdded) {  //COSI RISPARMIO SULLA VELOCITA E SUI SOLDI PER LE API PLACES DI GOOGLE
+                //DEVO PRENDERE COORDINATE, INDIRIZZO, FOTO E NUMERO DI TELEFONO DEL POSTO  PIU PRECISI
+                Log.i("POSTO NUOVO", e.getPlaces().toString());
+               /* placeDetailsSource.fetchPlaceDetails(e.getPlaces().get(0).getName(), e.getPlaces().get(0).getAddress(), new PlaceDetailsSource.PlaceDetailsListener() {
+                    @Override
+                    public void onPlaceDetailsFetched(com.google.android.libraries.places.api.model.Place place) {
+                        // Hai ottenuto i dettagli del posto
+                        double[] coordinates;
+                        if (place.getLatLng() != null) {
+                            coordinates = new double[]{place.getLatLng().latitude, place.getLatLng().longitude};
+                        } else {
+                            coordinates = new double[]{e.getCoordinates()[0], e.getCoordinates()[1]};
+                        }
+                        List<Place> placesList = new ArrayList<>();
+                        placesList.add(new Place(e.getPlaces().get(0).getId(), StringUtils.capitalizeFirstLetter(place.getName()), e.getPlaces().get(0).getType(), place.getAddress(), place.getId(), coordinates, place.getPhoneNumber(), place.getPhotoMetadatas()));
+                        placesLocalDataSource.insertPlaces(placesList);
+                    }
 
-                            @Override
-                            public void onError(String message) {
-                                Log.i("ERRORE FETCH PLACE:", message);
-                                //PER I POSTI NON TROVATI USO IL COSTUTTORE DI DEFAULT CON LE INFORMAZIONI BASE
-                                //placesList.add(new Place(e.getPlaces().get(0).getId(), e.getPlaces().get(0).getName(), e.getPlaces().get(0).getType(), e.getPlaces().get(0).getAddress(), e.getCoordinates()));
-                            }
-                        });
-                    }
+                    @Override
+                    public void onError(String message) {
+                        Log.i("ERRORE FETCH PLACE:", message);
+                        //PER I POSTI NON TROVATI USO IL COSTUTTORE DI DEFAULT CON LE INFORMAZIONI BASE
+                        //placesList.add(new Place(e.getPlaces().get(0).getId(), e.getPlaces().get(0).getName(), e.getPlaces().get(0).getType(), e.getPlaces().get(0).getAddress(), e.getCoordinates()));
+                    }
+                });
+
+                */
+            }else{
+                Log.i("POSTO GIA ESISTENTE", e.getPlaces().toString());
+            }
 
-                }
-            }
-        });
+        }
+
 
-         */
     }
 
 
     @Override
-    public void onSuccessFromRemoteJsoup(EventsApiResponse eventsApiResponse) {
+    public void onSuccessFromRemoteJsoup(EventsApiResponse eventsApiResponse) { // NON USATO
         eventsLocalDataSource.insertEvents(eventsApiResponse);
 
 
Index: app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\nimport static com.example.eventiapp.util.Constants.REQUEST_CODE;\r\nimport static com.example.eventiapp.util.Constants.SHARED_PREFERENCES_FILE_NAME;\r\nimport static com.example.eventiapp.util.Constants.SHARED_PREFERENCES_LANGUAGE;\r\n\r\nimport android.Manifest;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.content.pm.PackageManager;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.CalendarContract;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.adapter.PlacesRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentAllEventsBinding;\r\nimport com.example.eventiapp.databinding.FragmentHomeBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.DateUtils;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.LanguageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.example.eventiapp.util.ShareUtils;\r\nimport com.example.eventiapp.util.SharedPreferencesUtil;\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class HomeFragment extends Fragment {\r\n\r\n    private static final String TAG = HomeFragment.class.getSimpleName();\r\n\r\n    private FragmentHomeBinding fragmentHomeBinding;\r\n\r\n    private List<Events> eventsList;\r\n    private List<Events> eventListOrderByDate;\r\n    private List<Events> eventsListOrderByRank;\r\n    private List<Events> eventsListForYou;\r\n    private List<Place> placesList;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapterRank;\r\n    private PlacesRecyclerViewAdapter placesRecyclerViewAdapter;\r\n\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n\r\n    private RecyclerView recyclerViewUE;\r\n    private RecyclerView recyclerViewMA;\r\n    private RecyclerView recyclerViewCFY;\r\n    private RecyclerView recyclerViewFE;\r\n    private RecyclerView recyclerViewEV;\r\n\r\n    private LinearLayoutManager layoutManagerUE;\r\n    private LinearLayoutManager layoutManagerMA;\r\n    private LinearLayoutManager layoutManagerCFY;\r\n    private LinearLayoutManager layoutManagerFE;\r\n    private LinearLayoutManager layoutManagerEV;\r\n\r\n\r\n    private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    //CAMPI QUERY\r\n    String country = \"IT\"; //POI VERRA PRESA DALLE SHAREDPREFERENCES\r\n    String location = \"45.51851,9.2075123\"; //BICOCCA\r\n    double radius = 4.2;\r\n    String sort = \"start\";\r\n    String date = DateUtils.currentDate();\r\n    String categories = \"conferences,expos,concerts,festivals,performing-arts,sports,community\";\r\n    int limit = 5000;\r\n    String lastUpdate = \"0\";\r\n\r\n\r\n    public HomeFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n\r\n    public static HomeFragment newInstance() {\r\n        return new HomeFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        sharedPreferencesUtil=new SharedPreferencesUtil(requireActivity().getApplication());\r\n        String language = sharedPreferencesUtil.readStringData(SHARED_PREFERENCES_FILE_NAME, SHARED_PREFERENCES_LANGUAGE);\r\n        LanguageUtil.setAppLanguage(requireContext(), language);\r\n\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n        eventListOrderByDate = new ArrayList<>();\r\n        eventsListForYou = new ArrayList<>();\r\n        eventsListOrderByRank = new ArrayList<>();\r\n        placesList = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentHomeBinding = FragmentHomeBinding.inflate(inflater, container, false);\r\n        return fragmentHomeBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        recyclerViewUE = fragmentHomeBinding.recyclerViewUE;\r\n        recyclerViewMA = fragmentHomeBinding.recyclerViewMA;\r\n        recyclerViewCFY = fragmentHomeBinding.recyclerViewCFY;\r\n        recyclerViewFE = fragmentHomeBinding.recyclerViewFE;\r\n        recyclerViewEV = fragmentHomeBinding.recyclerViewEV;\r\n\r\n        layoutManagerUE =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        layoutManagerMA =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        layoutManagerCFY =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        layoutManagerFE =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        layoutManagerEV =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(), 3,\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onExportButtonPressed(Events events) {\r\n                        ShareUtils.addToCalendar(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Events events) {\r\n                        ShareUtils.shareEvent(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        eventsList.get(position).setFavorite(!eventsList.get(position).isFavorite());\r\n                        eventsAndPlacesViewModel.updateEvents(eventsList.get(position));\r\n                    }\r\n                });\r\n\r\n        eventsRecyclerViewAdapterRank = new EventsRecyclerViewAdapter(eventsListOrderByRank,\r\n                requireActivity().getApplication(), 3,\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onExportButtonPressed(Events events) {\r\n                        ShareUtils.addToCalendar(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Events events) {\r\n                        ShareUtils.shareEvent(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        eventsList.get(position).setFavorite(!eventsList.get(position).isFavorite());\r\n                        eventsAndPlacesViewModel.updateEvents(eventsList.get(position));\r\n                    }\r\n                });\r\n\r\n        placesRecyclerViewAdapter = new PlacesRecyclerViewAdapter(placesList,\r\n                requireActivity().getApplication(), 4,\r\n                new PlacesRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onPlacesItemClick(Place place) {\r\n                        //VAI AI DETTAGLI DEL POSTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"place\", place);\r\n                        Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_placeFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Place place) {\r\n                        ShareUtils.sharePlace(requireContext(), place);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                       //SETTA PLACE COME PREFERITO\r\n                    }\r\n                });\r\n\r\n\r\n        recyclerViewUE.setLayoutManager(layoutManagerUE);\r\n        recyclerViewUE.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        recyclerViewMA.setLayoutManager(layoutManagerMA);\r\n\r\n        recyclerViewCFY.setLayoutManager(layoutManagerCFY);\r\n        recyclerViewCFY.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        recyclerViewFE.setLayoutManager(layoutManagerFE);\r\n        recyclerViewFE.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        recyclerViewEV.setLayoutManager(layoutManagerEV);\r\n        recyclerViewEV.setAdapter(placesRecyclerViewAdapter);\r\n\r\n\r\n        fragmentHomeBinding.progressBarUE.setVisibility(View.VISIBLE);\r\n        fragmentHomeBinding.progressBarMA.setVisibility(View.VISIBLE);\r\n        fragmentHomeBinding.progressBarCFY.setVisibility(View.VISIBLE);\r\n        fragmentHomeBinding.progressBarFE.setVisibility(View.VISIBLE);\r\n        fragmentHomeBinding.progressBarEV.setVisibility(View.VISIBLE);\r\n\r\n\r\n        eventsAndPlacesViewModel.getEvents(country, radius + \"km@\" + location, date, categories, sort, limit, Long.parseLong(lastUpdate)).observe(getViewLifecycleOwner(), result -> {\r\n            showEvents(result, 0); //UPCOMING EVENTS E ORDER BY RANK\r\n        });\r\n\r\n        /*\r\n        eventsAndPlacesViewModel.getEventsChosenForYou(true).observe(getViewLifecycleOwner(), result -> {\r\n            showEvents(result, 1);  //SCELTI PER L'UTENTE IN BASE ALLE SUE PREFERENZE\r\n        });\r\n        */\r\n/*\r\n        eventsAndPlacesViewModel.getFavoriteEventsLiveData(true).observe(getViewLifecycleOwner(), result -> {\r\n            showEvents(result, 2); //FAVORITI DELL UTENTE\r\n        });\r\n */\r\n        eventsAndPlacesViewModel.getPlaces().observe(getViewLifecycleOwner(), result -> {\r\n            showPlaces(result); //POSTI\r\n        });\r\n\r\n        //SEE ALL EVENTS\r\n\r\n        fragmentHomeBinding.textViewAllEventsUE.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(\"sort\", \"Earliest date\");\r\n                Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_containerEventsPlacesCalendar, bundle);\r\n            }\r\n        });\r\n\r\n        fragmentHomeBinding.textViewAllEventsMA.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(\"sort\", \"Rank\");\r\n                Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_containerEventsPlacesCalendar, bundle);\r\n            }\r\n        });\r\n\r\n        fragmentHomeBinding.textViewAllPlacesEV.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(\"place\", \"place\");\r\n                Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_containerEventsPlacesCalendar, bundle);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    public void sortEvents(String sortingParameter, List<Events> eventsList) {\r\n        switch (sortingParameter) {\r\n            case \"Earliest date\":\r\n            case \"Più recente\":\r\n                Collections.sort(eventsList, new Events.SortByMostRecent());\r\n                break;\r\n            case \"Rank\":\r\n                Collections.sort(eventsList, new Events.SortByRank());\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentHomeBinding = null;\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n    private void showEvents(Result result, int typeOfQuery) {\r\n        if (result.isSuccess()) {\r\n            Log.i(\"SUCCESSO\", \"SUCCESSO GET EVENTS\");\r\n\r\n            EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n            List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n            if (!eventsAndPlacesViewModel.isLoading()) {\r\n                if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                    Log.i(TAG, \"FIRST LOADING\");\r\n                    eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());\r\n                    eventsAndPlacesViewModel.setFirstLoading(false);\r\n                    this.eventsList.addAll(fetchedEvents);\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                            this.eventsList.size());\r\n\r\n                } else {\r\n                    Log.i(TAG, \"NOT FIRST LOADING\");\r\n\r\n                    // Updates related to the favorite status of the events\r\n                    eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, eventsList.size());\r\n                    eventsList.clear();\r\n                    eventsList.addAll(fetchedEvents);\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(0, fetchedEvents.size());\r\n                }\r\n                switch (typeOfQuery) {\r\n                    case 0:\r\n                        fragmentHomeBinding.progressBarUE.setVisibility(View.GONE);\r\n                        fragmentHomeBinding.progressBarMA.setVisibility(View.GONE); //RIORDINO COL SORT LA LISTA DEGLI EVENTI SENZA FARE PIU QUERY\r\n                        break;\r\n                    case 1:\r\n                        fragmentHomeBinding.progressBarCFY.setVisibility(View.GONE);\r\n                        break;\r\n                    case 2:\r\n                        fragmentHomeBinding.progressBarFE.setVisibility(View.GONE);\r\n                        break;\r\n                }\r\n            } else {\r\n                Log.i(TAG, \"IS LOADING\");\r\n                eventsAndPlacesViewModel.setLoading(false);\r\n                eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                int initialSize = eventsList.size();\r\n\r\n                for (int i = 0; i < eventsList.size(); i++) {\r\n                    if (eventsList.get(i) == null) {\r\n                        eventsList.remove(eventsList.get(i));\r\n                    }\r\n                }\r\n                int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                        EVENTS_PAGE_SIZE_VALUE;\r\n                for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                    eventsList.add(fetchedEvents.get(i));\r\n                }\r\n                eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n            }\r\n            this.eventsListOrderByRank.addAll(eventsList);\r\n            sortEvents(\"Rank\", eventsListOrderByRank);\r\n            recyclerViewMA.setAdapter(eventsRecyclerViewAdapterRank);\r\n\r\n        } else {\r\n            Log.i(\"FALLITO\", \"FALLITO ALL EVENTS\");\r\n\r\n            ErrorMessageUtil errorMessagesUtil =\r\n                    new ErrorMessageUtil(requireActivity().getApplication());\r\n            Snackbar.make(requireView(), errorMessagesUtil.\r\n                            getErrorMessage(((Result.Error) result).getMessage()),\r\n                    Snackbar.LENGTH_SHORT).show();\r\n            switch (typeOfQuery) {\r\n                case 0:\r\n                    fragmentHomeBinding.progressBarUE.setVisibility(View.GONE);\r\n                    fragmentHomeBinding.progressBarMA.setVisibility(View.GONE); //RIORDINO COL SORT LA LISTA DEGLI EVENTI SENZA FARE PIU QUERY\r\n                    break;\r\n                case 1:\r\n                    fragmentHomeBinding.progressBarCFY.setVisibility(View.GONE);\r\n                    break;\r\n                case 2:\r\n                    fragmentHomeBinding.progressBarFE.setVisibility(View.GONE);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showPlaces(List<Place> placesList) {\r\n        if (placesList != null) {\r\n            Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n            List<Place> fetchedPlaces = new ArrayList<>(placesList);\r\n\r\n            if (!eventsAndPlacesViewModel.isLoading()) {\r\n                if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                    eventsAndPlacesViewModel.setTotalResults(fetchedPlaces.size());\r\n                    eventsAndPlacesViewModel.setFirstLoading(false);\r\n                    this.placesList.addAll(fetchedPlaces);\r\n                    placesRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                            this.placesList.size());\r\n                } else {\r\n                    // Updates related to the favorite status of the places\r\n                    placesRecyclerViewAdapter.notifyItemRangeRemoved(0, this.placesList.size());\r\n                    this.placesList.clear();\r\n                    this.placesList.addAll(fetchedPlaces);\r\n                    placesRecyclerViewAdapter.notifyItemChanged(0, fetchedPlaces.size());\r\n                }\r\n                fragmentHomeBinding.progressBarEV.setVisibility(View.GONE);\r\n            } else {\r\n                eventsAndPlacesViewModel.setLoading(false);\r\n                eventsAndPlacesViewModel.setCurrentResults(placesList.size());\r\n\r\n                int initialSize = placesList.size();\r\n\r\n                for (int i = 0; i < placesList.size(); i++) {\r\n                    if (placesList.get(i) == null) {\r\n                        placesList.remove(placesList.get(i));\r\n                    }\r\n                }\r\n                int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                        EVENTS_PAGE_SIZE_VALUE;\r\n                for (int i = startIndex; i < fetchedPlaces.size(); i++) {\r\n                    placesList.add(fetchedPlaces.get(i));\r\n                }\r\n                placesRecyclerViewAdapter.notifyItemRangeInserted(initialSize, placesList.size());\r\n            }\r\n        } else {\r\n            Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n            ErrorMessageUtil errorMessagesUtil =\r\n                    new ErrorMessageUtil(requireActivity().getApplication());\r\n            Snackbar.make(requireView(), errorMessagesUtil.\r\n                            getErrorMessage(\"ERRORE\"),\r\n                    Snackbar.LENGTH_SHORT).show();\r\n            fragmentHomeBinding.progressBarEV.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/HomeFragment.java	
@@ -125,9 +125,7 @@
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        sharedPreferencesUtil=new SharedPreferencesUtil(requireActivity().getApplication());
-        String language = sharedPreferencesUtil.readStringData(SHARED_PREFERENCES_FILE_NAME, SHARED_PREFERENCES_LANGUAGE);
-        LanguageUtil.setAppLanguage(requireContext(), language);
+
 
         IRepositoryWithLiveData eventsRepositoryWithLiveData =
                 ServiceLocator.getInstance().getRepository(
@@ -224,6 +222,16 @@
                         eventsList.get(position).setFavorite(!eventsList.get(position).isFavorite());
                         eventsAndPlacesViewModel.updateEvents(eventsList.get(position));
                     }
+
+                    @Override
+                    public void onModeEventButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onDeleteEventButtonPressed(Events events) {
+
+                    }
                 });
 
         eventsRecyclerViewAdapterRank = new EventsRecyclerViewAdapter(eventsListOrderByRank,
@@ -249,6 +257,16 @@
                         eventsList.get(position).setFavorite(!eventsList.get(position).isFavorite());
                         eventsAndPlacesViewModel.updateEvents(eventsList.get(position));
                     }
+
+                    @Override
+                    public void onModeEventButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onDeleteEventButtonPressed(Events events) {
+
+                    }
                 });
 
         placesRecyclerViewAdapter = new PlacesRecyclerViewAdapter(placesList,
@@ -271,6 +289,16 @@
                     public void onFavoriteButtonPressed(int position) {
                        //SETTA PLACE COME PREFERITO
                     }
+
+                    @Override
+                    public void onModePlaceButtonPressed(Place place) {
+
+                    }
+
+                    @Override
+                    public void onDeletePlaceButtonPressed(Place place) {
+
+                    }
                 });
 
 
Index: app/src/main/java/com/example/eventiapp/adapter/PlacesRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.adapter;\r\n\r\nimport static com.example.eventiapp.util.Constants.LOADING_VIEW_TYPE;\r\nimport static com.example.eventiapp.util.Constants.MAX_ITEMS;\r\nimport static com.example.eventiapp.util.Constants.PLACES2_VIEW_TYPE;\r\nimport static com.example.eventiapp.util.Constants.PLACES_VIEW_TYPE;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Application;\r\nimport android.graphics.Bitmap;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.content.res.AppCompatResources;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.source.google.PlaceDetailsSource;\r\n\r\nimport java.util.List;\r\n\r\npublic class PlacesRecyclerViewAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\r\n\r\n    private final int typeOfView;\r\n\r\n    public interface OnItemClickListener {\r\n        void onPlacesItemClick(Place place);\r\n\r\n        void onShareButtonPressed(Place place);\r\n\r\n        void onFavoriteButtonPressed(int position);\r\n    }\r\n\r\n    private final List<Place> placeList;\r\n    private final Application application;\r\n    private final PlacesRecyclerViewAdapter.OnItemClickListener onItemClickListener;\r\n\r\n    public PlacesRecyclerViewAdapter(List<Place> placeList, Application application, int typeOfView,\r\n                                     PlacesRecyclerViewAdapter.OnItemClickListener onItemClickListener) {\r\n        this.placeList = placeList;\r\n        this.application = application;\r\n        this.onItemClickListener = onItemClickListener;\r\n        this.typeOfView = typeOfView;\r\n    }\r\n\r\n\r\n    @Override\r\n    public int getItemViewType(int position) {\r\n        if (typeOfView == 2) {\r\n            if (placeList.get(position) == null) {\r\n                return LOADING_VIEW_TYPE;\r\n            } else {\r\n                return PLACES_VIEW_TYPE;\r\n            }\r\n        } else if (typeOfView == 4) { //PLACES 2\r\n            if (placeList.get(position) == null) {\r\n                return LOADING_VIEW_TYPE;\r\n            } else {\r\n                return PLACES2_VIEW_TYPE;\r\n            }\r\n        }\r\n        return PLACES_VIEW_TYPE;\r\n    }\r\n\r\n\r\n    @NonNull\r\n    @Override\r\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view;\r\n\r\n        if (viewType == PLACES_VIEW_TYPE) {\r\n            view = LayoutInflater.from(parent.getContext()).\r\n                    inflate(R.layout.places_list_item, parent, false);\r\n            return new PlacesViewHolder(view);\r\n        } else if (viewType == PLACES2_VIEW_TYPE) {\r\n            view = LayoutInflater.from(parent.getContext()).\r\n                    inflate(R.layout.place2_list_item, parent, false);\r\n            return new PlacesRecyclerViewAdapter.Places2ViewHolder(view);\r\n        } else {\r\n            view = LayoutInflater.from(parent.getContext()).\r\n                    inflate(R.layout.places_loading_item, parent, false);\r\n            return new LoadingPlacesViewHolder(view);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n        if (holder instanceof PlacesViewHolder) {\r\n            ((PlacesViewHolder) holder).bind(placeList.get(position));\r\n        } else if (holder instanceof LoadingPlacesViewHolder) {\r\n            ((LoadingPlacesViewHolder) holder).activate();\r\n        } else if (holder instanceof Places2ViewHolder) {\r\n            ((Places2ViewHolder) holder).bind(placeList.get(position));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (placeList != null && typeOfView == 2) { //EVENTS\r\n            return placeList.size();\r\n        } else if (placeList != null && typeOfView == 4) { //EVENTS2\r\n            return Math.min(placeList.size(), MAX_ITEMS);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public class PlacesViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\r\n\r\n        private final TextView textViewName;\r\n        private final TextView textViewAddress;\r\n        private final TextView textViewDistance;\r\n        private final ImageView imageViewPlace;\r\n        private final ImageView imageViewFavorite;\r\n\r\n\r\n        public PlacesViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            textViewName = itemView.findViewById(R.id.nameTextView);\r\n            textViewDistance = itemView.findViewById(R.id.distanceTextView);\r\n            textViewAddress = itemView.findViewById(R.id.addressTextView);\r\n            imageViewPlace = itemView.findViewById(R.id.imageViewPlace);\r\n            imageViewFavorite = itemView.findViewById(R.id.imageViewFavorite);\r\n            ImageView imageViewShare = itemView.findViewById(R.id.imageViewShare);\r\n\r\n            itemView.setOnClickListener(this);\r\n            imageViewFavorite.setOnClickListener(this);\r\n            imageViewShare.setOnClickListener(this);\r\n        }\r\n\r\n        @SuppressLint(\"SetTextI18n\")\r\n        public void bind(Place places) {\r\n            textViewName.setText(places.getName());\r\n            textViewAddress.setText(places.getAddress());\r\n            textViewDistance.setText(\"5.2km\");\r\n            if(places.getImages()!=null && !places.getImages().isEmpty()){\r\n                PlaceDetailsSource.fetchPlacePhotos(places.getImages(), true, new PlaceDetailsSource.PlacePhotosListener() {\r\n                    @Override\r\n                    public void onPlacePhotosListener(Bitmap bitmap) {\r\n                        if (bitmap != null) {\r\n                            imageViewPlace.setImageBitmap(bitmap);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(String message) {\r\n                        Log.i(\"ERROR\", message);\r\n                        imageViewPlace.setVisibility(View.GONE);\r\n                    }\r\n                });\r\n            }else{\r\n                imageViewPlace.setVisibility(View.GONE);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (v.getId() == R.id.imageViewFavorite) {\r\n                //setImageViewFavoritePlace(!placeList.get(getAdapterPosition()).isFavorite());\r\n                onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());\r\n            } else if (v.getId() == R.id.imageViewShare) {\r\n                onItemClickListener.onShareButtonPressed(placeList.get(getAdapterPosition()));\r\n            } else {\r\n                onItemClickListener.onPlacesItemClick(placeList.get(getAdapterPosition()));\r\n            }\r\n        }\r\n\r\n        private void setImageViewFavoritePlace(boolean isFavorite) {\r\n            if (isFavorite) {\r\n                imageViewFavorite.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_24));\r\n            } else {\r\n                imageViewFavorite.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_border_24));\r\n            }\r\n        }\r\n    }\r\n\r\n    public class Places2ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\r\n\r\n        private final TextView textViewName;\r\n        private final TextView textViewAddress;\r\n        private final TextView textViewDistance;\r\n        private final ImageView imageViewPlace;\r\n        private final ImageView imageViewFavorite;\r\n\r\n        public Places2ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            textViewName = itemView.findViewById(R.id.nameTextView);\r\n            textViewDistance = itemView.findViewById(R.id.distanceTextView);\r\n            textViewAddress = itemView.findViewById(R.id.addressTextView);\r\n            imageViewPlace = itemView.findViewById(R.id.imageViewPlace);\r\n            imageViewFavorite = itemView.findViewById(R.id.imageViewFavorite);\r\n            ImageView imageViewShare = itemView.findViewById(R.id.imageViewShare);\r\n\r\n            itemView.setOnClickListener(this);\r\n            imageViewFavorite.setOnClickListener(this);\r\n            imageViewShare.setOnClickListener(this);\r\n\r\n        }\r\n\r\n        @SuppressLint(\"SetTextI18n\")\r\n        public void bind(Place places) {\r\n            textViewName.setText(places.getName());\r\n            textViewAddress.setText(places.getAddress());\r\n            textViewDistance.setText(\"5.2km\");\r\n            if(places.getImages()!=null && !places.getImages().isEmpty()){\r\n                PlaceDetailsSource.fetchPlacePhotos(places.getImages(), true, new PlaceDetailsSource.PlacePhotosListener() {\r\n                    @Override\r\n                    public void onPlacePhotosListener(Bitmap bitmap) {\r\n                        if (bitmap != null) {\r\n                            imageViewPlace.setImageBitmap(bitmap);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(String message) {\r\n                        Log.i(\"ERROR\", message);\r\n                        imageViewPlace.setVisibility(View.GONE);\r\n                    }\r\n                });\r\n            }else{\r\n                imageViewPlace.setVisibility(View.GONE);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (v.getId() == R.id.imageViewFavorite) {\r\n                //setImageViewFavoritePlace(!placeList.get(getAdapterPosition()).isFavorite());\r\n                onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());\r\n            } else if (v.getId() == R.id.imageViewShare) {\r\n                onItemClickListener.onShareButtonPressed(placeList.get(getAdapterPosition()));\r\n            } else {\r\n                onItemClickListener.onPlacesItemClick(placeList.get(getAdapterPosition()));\r\n            }\r\n        }\r\n\r\n        private void setImageViewFavoritePlace(boolean isFavorite) {\r\n            if (isFavorite) {\r\n                imageViewFavorite.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_24));\r\n            } else {\r\n                imageViewFavorite.setImageDrawable(\r\n                        AppCompatResources.getDrawable(application,\r\n                                R.drawable.ic_baseline_favorite_border_24));\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class LoadingPlacesViewHolder extends RecyclerView.ViewHolder {\r\n        private final ProgressBar progressBar;\r\n\r\n        LoadingPlacesViewHolder(View view) {\r\n            super(view);\r\n            progressBar = view.findViewById(R.id.progressbar_loading_place);\r\n        }\r\n\r\n        public void activate() {\r\n            progressBar.setIndeterminate(true);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/adapter/PlacesRecyclerViewAdapter.java b/app/src/main/java/com/example/eventiapp/adapter/PlacesRecyclerViewAdapter.java
--- a/app/src/main/java/com/example/eventiapp/adapter/PlacesRecyclerViewAdapter.java	
+++ b/app/src/main/java/com/example/eventiapp/adapter/PlacesRecyclerViewAdapter.java	
@@ -3,6 +3,7 @@
 import static com.example.eventiapp.util.Constants.LOADING_VIEW_TYPE;
 import static com.example.eventiapp.util.Constants.MAX_ITEMS;
 import static com.example.eventiapp.util.Constants.PLACES2_VIEW_TYPE;
+import static com.example.eventiapp.util.Constants.PLACES3_VIEW_TYPE;
 import static com.example.eventiapp.util.Constants.PLACES_VIEW_TYPE;
 
 import android.annotation.SuppressLint;
@@ -15,9 +16,11 @@
 import android.widget.ImageView;
 import android.widget.ProgressBar;
 import android.widget.TextView;
+
 import androidx.annotation.NonNull;
 import androidx.appcompat.content.res.AppCompatResources;
 import androidx.recyclerview.widget.RecyclerView;
+
 import com.example.eventiapp.R;
 import com.example.eventiapp.model.Place;
 import com.example.eventiapp.source.google.PlaceDetailsSource;
@@ -34,6 +37,10 @@
         void onShareButtonPressed(Place place);
 
         void onFavoriteButtonPressed(int position);
+
+        void onModePlaceButtonPressed(Place place);
+
+        void onDeletePlaceButtonPressed(Place place);
     }
 
     private final List<Place> placeList;
@@ -63,6 +70,12 @@
             } else {
                 return PLACES2_VIEW_TYPE;
             }
+        } else if (typeOfView == 6) {  //PLACE 3
+            if (placeList.get(position) == null) {
+                return LOADING_VIEW_TYPE;
+            } else {
+                return PLACES3_VIEW_TYPE;
+            }
         }
         return PLACES_VIEW_TYPE;
     }
@@ -81,6 +94,10 @@
             view = LayoutInflater.from(parent.getContext()).
                     inflate(R.layout.place2_list_item, parent, false);
             return new PlacesRecyclerViewAdapter.Places2ViewHolder(view);
+        } else if (viewType == PLACES3_VIEW_TYPE) {
+            view = LayoutInflater.from(parent.getContext()).
+                    inflate(R.layout.places3_list_item, parent, false);
+            return new PlacesRecyclerViewAdapter.Places3ViewHolder(view);
         } else {
             view = LayoutInflater.from(parent.getContext()).
                     inflate(R.layout.places_loading_item, parent, false);
@@ -96,14 +113,16 @@
             ((LoadingPlacesViewHolder) holder).activate();
         } else if (holder instanceof Places2ViewHolder) {
             ((Places2ViewHolder) holder).bind(placeList.get(position));
+        } else if (holder instanceof Places3ViewHolder) {
+            ((Places3ViewHolder) holder).bind(placeList.get(position));
         }
     }
 
     @Override
     public int getItemCount() {
-        if (placeList != null && typeOfView == 2) { //EVENTS
+        if (placeList != null && (typeOfView == 2 || typeOfView == 6)) { //PLACE 1 e PLACE 2
             return placeList.size();
-        } else if (placeList != null && typeOfView == 4) { //EVENTS2
+        } else if (placeList != null && typeOfView == 4) { //PLACE 2
             return Math.min(placeList.size(), MAX_ITEMS);
         }
         return 0;
@@ -137,7 +156,7 @@
             textViewName.setText(places.getName());
             textViewAddress.setText(places.getAddress());
             textViewDistance.setText("5.2km");
-            if(places.getImages()!=null && !places.getImages().isEmpty()){
+            if (places.getImages() != null && !places.getImages().isEmpty()) {
                 PlaceDetailsSource.fetchPlacePhotos(places.getImages(), true, new PlaceDetailsSource.PlacePhotosListener() {
                     @Override
                     public void onPlacePhotosListener(Bitmap bitmap) {
@@ -152,7 +171,7 @@
                         imageViewPlace.setVisibility(View.GONE);
                     }
                 });
-            }else{
+            } else {
                 imageViewPlace.setVisibility(View.GONE);
             }
         }
@@ -203,6 +222,84 @@
             imageViewFavorite.setOnClickListener(this);
             imageViewShare.setOnClickListener(this);
 
+        }
+
+        @SuppressLint("SetTextI18n")
+        public void bind(Place places) {
+            textViewName.setText(places.getName());
+            textViewAddress.setText(places.getAddress());
+            textViewDistance.setText("5.2km");
+            if (places.getImages() != null && !places.getImages().isEmpty()) {
+                PlaceDetailsSource.fetchPlacePhotos(places.getImages(), true, new PlaceDetailsSource.PlacePhotosListener() {
+                    @Override
+                    public void onPlacePhotosListener(Bitmap bitmap) {
+                        if (bitmap != null) {
+                            imageViewPlace.setImageBitmap(bitmap);
+                        }
+                    }
+
+                    @Override
+                    public void onError(String message) {
+                        Log.i("ERROR", message);
+                        imageViewPlace.setVisibility(View.GONE);
+                    }
+                });
+            } else {
+                imageViewPlace.setVisibility(View.GONE);
+            }
+        }
+
+        @Override
+        public void onClick(View v) {
+            if (v.getId() == R.id.imageViewFavorite) {
+                //setImageViewFavoritePlace(!placeList.get(getAdapterPosition()).isFavorite());
+                onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());
+            } else if (v.getId() == R.id.imageViewShare) {
+                onItemClickListener.onShareButtonPressed(placeList.get(getAdapterPosition()));
+            } else {
+                onItemClickListener.onPlacesItemClick(placeList.get(getAdapterPosition()));
+            }
+        }
+
+        private void setImageViewFavoritePlace(boolean isFavorite) {
+            if (isFavorite) {
+                imageViewFavorite.setImageDrawable(
+                        AppCompatResources.getDrawable(application,
+                                R.drawable.ic_baseline_favorite_24));
+            } else {
+                imageViewFavorite.setImageDrawable(
+                        AppCompatResources.getDrawable(application,
+                                R.drawable.ic_baseline_favorite_border_24));
+            }
+        }
+    }
+
+    public class Places3ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
+
+        private final TextView textViewName;
+        private final TextView textViewAddress;
+        private final TextView textViewDistance;
+        private final ImageView imageViewPlace;
+        private final ImageView imageViewFavorite;
+        private final ImageView imageViewMode;
+        private final ImageView imageViewDelete;
+
+        public Places3ViewHolder(@NonNull View itemView) {
+            super(itemView);
+            textViewName = itemView.findViewById(R.id.nameTextView);
+            textViewDistance = itemView.findViewById(R.id.distanceTextView);
+            textViewAddress = itemView.findViewById(R.id.addressTextView);
+            imageViewPlace = itemView.findViewById(R.id.imageViewPlace);
+            imageViewFavorite = itemView.findViewById(R.id.imageViewFavorite);
+            imageViewMode = itemView.findViewById(R.id.imageViewMode);
+            imageViewDelete = itemView.findViewById(R.id.imageViewDelete);
+            ImageView imageViewShare = itemView.findViewById(R.id.imageViewShare);
+
+            itemView.setOnClickListener(this);
+            imageViewFavorite.setOnClickListener(this);
+            imageViewShare.setOnClickListener(this);
+            imageViewMode.setOnClickListener(this);
+            imageViewDelete.setOnClickListener(this);
         }
 
         @SuppressLint("SetTextI18n")
@@ -210,7 +307,7 @@
             textViewName.setText(places.getName());
             textViewAddress.setText(places.getAddress());
             textViewDistance.setText("5.2km");
-            if(places.getImages()!=null && !places.getImages().isEmpty()){
+            if (places.getImages() != null && !places.getImages().isEmpty()) {
                 PlaceDetailsSource.fetchPlacePhotos(places.getImages(), true, new PlaceDetailsSource.PlacePhotosListener() {
                     @Override
                     public void onPlacePhotosListener(Bitmap bitmap) {
@@ -225,7 +322,7 @@
                         imageViewPlace.setVisibility(View.GONE);
                     }
                 });
-            }else{
+            } else {
                 imageViewPlace.setVisibility(View.GONE);
             }
         }
@@ -237,6 +334,10 @@
                 onItemClickListener.onFavoriteButtonPressed(getAdapterPosition());
             } else if (v.getId() == R.id.imageViewShare) {
                 onItemClickListener.onShareButtonPressed(placeList.get(getAdapterPosition()));
+            } else if (v.getId() == R.id.imageViewMode) {
+                onItemClickListener.onModePlaceButtonPressed(placeList.get(getAdapterPosition()));
+            } else if (v.getId() == R.id.imageViewDelete) {
+                onItemClickListener.onDeletePlaceButtonPressed(placeList.get(getAdapterPosition()));
             } else {
                 onItemClickListener.onPlacesItemClick(placeList.get(getAdapterPosition()));
             }
@@ -255,6 +356,7 @@
         }
     }
 
+
     public static class LoadingPlacesViewHolder extends RecyclerView.ViewHolder {
         private final ProgressBar progressBar;
 
Index: app/src/main/java/com/example/eventiapp/ui/main/EventsInADateFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\n\r\nimport android.content.Context;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.LifecycleOwner;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentEventsInADateBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.example.eventiapp.util.ShareUtils;\r\nimport com.google.android.material.chip.Chip;\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class EventsInADateFragment extends Fragment {\r\n\r\n    public EventsInADateFragment() {\r\n    }\r\n\r\n    private static final String TAG = EventsInADateFragment.class.getSimpleName();\r\n\r\n    private FragmentEventsInADateBinding fragmentEventsInADateBinding;\r\n\r\n    private List<Events> eventsList;\r\n    private List<String> categoriesInADate;\r\n    private List<String> checkedCategories;\r\n    private String date;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private String sortingParameter;\r\n    private int lastSelectedSortingParameter;\r\n    private String[] listItemsSort;\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    public static AllEventsFragment newInstance() {\r\n        return new AllEventsFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n        categoriesInADate = new ArrayList<>();\r\n        checkedCategories = new ArrayList<>();\r\n        listItemsSort = requireContext().getResources().getStringArray(R.array.sorting_parameters);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentEventsInADateBinding = FragmentEventsInADateBinding.inflate(inflater, container, false);\r\n        return fragmentEventsInADateBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_events);\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(), 0,\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(view).navigate(R.id.action_eventsInADateFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onExportButtonPressed(Events events) {\r\n                        ShareUtils.addToCalendar(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Events events) {\r\n                        ShareUtils.shareEvent(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n        assert getArguments() != null;\r\n        date = getArguments().getString(\"date\");\r\n\r\n        fragmentEventsInADateBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n        //CATEGORIE DI EVENTI IN QUELLA DATA\r\n        eventsAndPlacesViewModel.getCategoriesInADate(date).observe(getViewLifecycleOwner(), result -> {\r\n            if (result != null) {\r\n                categoriesInADate.clear();\r\n                categoriesInADate = result;\r\n                setChips(categoriesInADate);\r\n            }\r\n        });\r\n\r\n        eventsAndPlacesViewModel.getEventsInADateLiveData(date).observe(getViewLifecycleOwner(), result -> {\r\n            showEvents(result);\r\n        });\r\n\r\n        fragmentEventsInADateBinding.sortingButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                showSorting();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentEventsInADateBinding = null;\r\n    }\r\n\r\n\r\n    private void setChips(List<String> categoriesOfthatDate) {\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT\r\n        );\r\n        params.setMarginEnd(16);\r\n        fragmentEventsInADateBinding.chipsLinearLayout.removeAllViews();\r\n        for (int i = 0; i < categoriesOfthatDate.size(); i++) {\r\n            Chip chip = new Chip(getContext());\r\n            chip.setText(categoriesOfthatDate.get(i));\r\n            chip.setChipBackgroundColorResource(R.color.colorBackgroundSecondary);\r\n            chip.setCheckable(true);\r\n            chip.setCheckedIconVisible(false);\r\n            chip.setCloseIconVisible(false);\r\n            chip.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n                @Override\r\n                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                    if (isChecked) {\r\n                        checkedCategories.add((String) buttonView.getText());\r\n                        chip.setChipBackgroundColorResource(R.color.colorBackground);\r\n                        eventsAndPlacesViewModel.getCategoryEventsBetweenDatesLiveData(date, date, checkedCategories).observe(getViewLifecycleOwner(), result -> {\r\n                            showEvents(result);\r\n                        });\r\n                    } else {\r\n                        checkedCategories.remove(buttonView.getText());\r\n                        chip.setChipBackgroundColorResource(R.color.colorBackgroundSecondary);\r\n                        if (checkedCategories.isEmpty()) { //SE NON è SELEZIONATO PIù NIENTE RIMETTE TUTTO\r\n                            eventsAndPlacesViewModel.getEventsInADateLiveData(date).observe(getViewLifecycleOwner(), result -> {\r\n                                showEvents(result);\r\n                            });\r\n                        } else {\r\n                            eventsAndPlacesViewModel.getCategoryEventsBetweenDatesLiveData(date, date, checkedCategories).observe(getViewLifecycleOwner(), result -> {\r\n                                showEvents(result);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            fragmentEventsInADateBinding.chipsLinearLayout.addView(chip, params);\r\n        }\r\n    }\r\n\r\n    private void showEvents(Result result) {\r\n        if (result != null) {\r\n            if (result.isSuccess()) {\r\n                EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, this.eventsList.size());\r\n                    this.eventsList.clear();\r\n                    this.eventsList.addAll(fetchedEvents);\r\n                    eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());\r\n                    fragmentEventsInADateBinding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                    int initialSize = eventsList.size();\r\n\r\n                    for (int i = 0; i < eventsList.size(); i++) {\r\n                        if (eventsList.get(i) == null) {\r\n                            eventsList.remove(eventsList.get(i));\r\n                        }\r\n                    }\r\n                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                            EVENTS_PAGE_SIZE_VALUE;\r\n                    for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                        eventsList.add(fetchedEvents.get(i));\r\n                    }\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n                }\r\n                fragmentEventsInADateBinding.textViewDate.setText(\"Events of: \" + date);\r\n                fragmentEventsInADateBinding.numberOfEvents.setText(String.valueOf(eventsList.size()));\r\n            } else {\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(requireView(), errorMessagesUtil.\r\n                                getErrorMessage(((Result.Error) result).getMessage()),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n                fragmentEventsInADateBinding.progressBar.setVisibility(View.GONE);\r\n            }\r\n        } else {\r\n            fragmentEventsInADateBinding.textViewDate.setText(\"No events in \" + date);\r\n            fragmentEventsInADateBinding.numberOfEvents.setText(\"0\");\r\n        }\r\n    }\r\n\r\n    public void showSorting() {\r\n        new MaterialAlertDialogBuilder(requireContext()).setTitle(\"ORDER BY\")\r\n                .setSingleChoiceItems(listItemsSort, lastSelectedSortingParameter, (dialog, i) -> {\r\n                    sortingParameter = listItemsSort[i];\r\n                    lastSelectedSortingParameter = i;\r\n                    if (!eventsList.isEmpty()) {\r\n                        sortEvents(sortingParameter, eventsList);\r\n                    }\r\n                }).setNegativeButton(R.string.cancel_text, (dialogInterface, i) -> {\r\n                }).show();\r\n    }\r\n\r\n\r\n    public void sortEvents(String sortingParameter, List<Events> eventsList) {\r\n        switch (sortingParameter) {\r\n            case \"Rank\":\r\n            case \"Più attesi\":\r\n                Collections.sort(eventsList, new Events.SortByRank());\r\n                break;\r\n            case \"Alphabet (A-Z)\":\r\n            case \"Alfabetico (A-Z)\":\r\n                Collections.sort(eventsList, new Events.SortByAlphabetAZ());\r\n                break;\r\n            case \"Alphabet (Z-A)\":\r\n            case \"Alfabetico (Z-A)\":\r\n                Collections.sort(eventsList, new Events.SortByAlphabetZA());\r\n                break;\r\n        }\r\n        eventsRecyclerViewAdapter.notifyDataSetChanged();\r\n    }\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/EventsInADateFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/EventsInADateFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/EventsInADateFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/EventsInADateFragment.java	
@@ -2,6 +2,7 @@
 
 import static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
@@ -35,6 +36,7 @@
 import com.example.eventiapp.model.EventsResponse;
 import com.example.eventiapp.model.Result;
 import com.example.eventiapp.repository.events.IRepositoryWithLiveData;
+import com.example.eventiapp.util.DateUtils;
 import com.example.eventiapp.util.ErrorMessageUtil;
 import com.example.eventiapp.util.ServiceLocator;
 import com.example.eventiapp.util.ShareUtils;
@@ -42,8 +44,10 @@
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.snackbar.Snackbar;
 
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 
 public class EventsInADateFragment extends Fragment {
@@ -154,6 +158,16 @@
                     public void onFavoriteButtonPressed(int position) {
                         //SETTA EVENTO COME PREFERITO
                     }
+
+                    @Override
+                    public void onModeEventButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onDeleteEventButtonPressed(Events events) {
+
+                    }
                 });
         recyclerView.setLayoutManager(layoutManager);
         recyclerView.setAdapter(eventsRecyclerViewAdapter);
@@ -241,6 +255,7 @@
         }
     }
 
+    @SuppressLint("SetTextI18n")
     private void showEvents(Result result) {
         if (result != null) {
             if (result.isSuccess()) {
@@ -270,8 +285,8 @@
                     }
                     eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());
                 }
-                fragmentEventsInADateBinding.textViewDate.setText("Events of: " + date);
-                fragmentEventsInADateBinding.numberOfEvents.setText(String.valueOf(eventsList.size()));
+                fragmentEventsInADateBinding.textViewDate.setText(getResources().getString(R.string.eventsinthisdate) + " " + date);
+                fragmentEventsInADateBinding.numberOfEvents.setText(" " + eventsList.size());
             } else {
                 ErrorMessageUtil errorMessagesUtil =
                         new ErrorMessageUtil(requireActivity().getApplication());
@@ -281,8 +296,8 @@
                 fragmentEventsInADateBinding.progressBar.setVisibility(View.GONE);
             }
         } else {
-            fragmentEventsInADateBinding.textViewDate.setText("No events in " + date);
-            fragmentEventsInADateBinding.numberOfEvents.setText("0");
+            fragmentEventsInADateBinding.textViewDate.setText(getResources().getString(R.string.noeventsinthisdate)  + " " + date);
+            fragmentEventsInADateBinding.numberOfEvents.setText(" 0");
         }
     }
 
Index: app/src/main/res/values-it-rIT/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <string name=\"app_name\">EVENTI APP</string>\r\n    <string name=\"map\">MAPPA</string>\r\n    <string name=\"myevents\">I MIEI EVENTI</string>\r\n    <string name=\"search\">CERCA</string>\r\n    <string name=\"content_description_fav_addition\">Aggiungi l\\'evento ai preferiti</string>\r\n    <string name=\"error_retrieving_events\">Errore nello scarimento degli eventi</string>\r\n    <string name=\"api_key_error\">Chiave API non valida</string>\r\n    <string name=\"unexpected_error\">Errore inaspettato</string>\r\n    <string name=\"cancel_text\">Cancella</string>\r\n    <string name=\"forgot_password\">Hai dimenticato la password?</string>\r\n    <string name=\"google_login\">Login con Google</string>\r\n    <string name=\"new_account\">Nuovo su Eventi APP?</string>\r\n    <string name=\"register\">Registrati</string>\r\n    <string name=\"error_email\">Inserisci un valido indirizzo email</string>\r\n    <string name=\"error_password\">La password deve contenere almeno 6 caretteri</string>\r\n    <string name=\"check_login_data_message\">Controlla i dati inseriti</string>\r\n    <string name=\"error_login_user_message\">Account non esistente</string>\r\n    <string name=\"error_login_password_message\">La password è sbagliata</string>\r\n    <string name=\"error_user_collision_message\">La email è già in uso</string>\r\n    <string name=\"error_no_google_account_found_message\">Nessun account Google trovato</string>\r\n    <string name=\"delete\">Cancella</string>\r\n    <string name=\"content_description_fav_delete\">Rimuovi l\\'evento dai preferiti</string>\r\n    <string name=\"explore_bicocca_events\">Esplora gli eventi in Bicocca!</string>\r\n    <string name=\"upcoming_events\">In arrivo</string>\r\n    <string name=\"see_all_events\"><![CDATA[Tutti gli eventi >]]></string>\r\n    <string name=\"the_most_awaited\">I più attesi</string>\r\n    <string name=\"chosen_for_you\">Scelti per te</string>\r\n    <string name=\"favorite_events\">Favoriti</string>\r\n    <string name=\"places\">Punti di interesse</string>\r\n    <string name=\"see_all_venues\"><![CDATA[Tutti i punti di interesse >]]></string>\r\n    <string name=\"attendance\">Spettatori:</string>\r\n    <string name=\"favorite_events_account\">Eventi favoriti:</string>\r\n    <string name=\"settings\">Impostazioni</string>\r\n    <string name=\"change_username\">Cambia username</string>\r\n    <string name=\"change_password\">Cambia password</string>\r\n    <string name=\"change_language\">Cambia lingua</string>\r\n    <string name=\"version\">Versione</string>\r\n    <string name=\"number_of_events\">Numero di eventi:</string>\r\n    <string name=\"back\">INDIETRO</string>\r\n    <string name=\"forward\">AVANTI</string>\r\n    <string name=\"sun\">DOM</string>\r\n    <string name=\"mon\">LUN</string>\r\n    <string name=\"tue\">MAR</string>\r\n    <string name=\"wed\">MER</string>\r\n    <string name=\"thur\">GIO</string>\r\n    <string name=\"fri\">VEN</string>\r\n    <string name=\"sat\">SAB</string>\r\n    <string name=\"all_events\">Tutti gli eventi</string>\r\n    <string name=\"all_places\">Tutti i punti di interesse</string>\r\n    <string name=\"calendar\">Calendario</string>\r\n    <string name=\"select_categories\">Selezione le categorie</string>\r\n    <string name=\"select_a_date_range\">Seleziona un range di date</string>\r\n    <string name=\"from\">DA:</string>\r\n    <string name=\"to\">A:</string>\r\n    <string name=\"apply\">Applica</string>\r\n    <string name=\"dismiss\">Chiudi</string>\r\n    <string name=\"delete_filters\">Cancella filtri</string>\r\n    <string name=\"description\">Descrizione</string>\r\n    <string name=\"for_more_information\">Per maggiori informazioni:</string>\r\n    <string name=\"number_of_places\">Numero di punti di interesse:</string>\r\n    <string name=\"send_email\">Invia mail</string>\r\n    <string name=\"events\">Eventi</string>\r\n    <string name=\"present_events\">Eventi presenti</string>\r\n    <string name=\"similar_events\">Eventi simili</string>\r\n    <string name=\"distance\">Distanza</string>\r\n    <string name=\"hintsearch\">Cerca eventi, punti di interesse…</string>\r\n    <string name=\"noeventsinthisdate\">Non ci sono eventi in questa data</string>\r\n    <string name=\"movie_times\">Orari film</string>\r\n\r\n\r\n    <string-array name=\"sorting_parameters\">\r\n        <item>Più recente</item>\r\n        <item>Meno recente</item>\r\n        <item>Più attesi</item>\r\n        <item>Alfabetico (A-Z)</item>\r\n        <item>Alfabetico (Z-A)</item>\r\n    </string-array>\r\n\r\n    <string-array name=\"languages\">\r\n        <item>IT</item>\r\n        <item>EN</item>\r\n    </string-array>\r\n\r\n    <string-array name=\"sorting_parameters_places\">\r\n        <item>Alfabetico (A-Z)</item>\r\n        <item>Alfabetico (Z-A)</item>\r\n    </string-array>\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-it-rIT/strings.xml b/app/src/main/res/values-it-rIT/strings.xml
--- a/app/src/main/res/values-it-rIT/strings.xml	
+++ b/app/src/main/res/values-it-rIT/strings.xml	
@@ -31,13 +31,13 @@
     <string name="places">Punti di interesse</string>
     <string name="see_all_venues"><![CDATA[Tutti i punti di interesse >]]></string>
     <string name="attendance">Spettatori:</string>
-    <string name="favorite_events_account">Eventi favoriti:</string>
+    <string name="favorite_events_account">Eventi preferiti</string>
     <string name="settings">Impostazioni</string>
     <string name="change_username">Cambia username</string>
     <string name="change_password">Cambia password</string>
     <string name="change_language">Cambia lingua</string>
     <string name="version">Versione</string>
-    <string name="number_of_events">Numero di eventi:</string>
+    <string name="number_of_events">Numero di eventi: </string>
     <string name="back">INDIETRO</string>
     <string name="forward">AVANTI</string>
     <string name="sun">DOM</string>
@@ -66,8 +66,26 @@
     <string name="similar_events">Eventi simili</string>
     <string name="distance">Distanza</string>
     <string name="hintsearch">Cerca eventi, punti di interesse…</string>
-    <string name="noeventsinthisdate">Non ci sono eventi in questa data</string>
+    <string name="noeventsinthisdate">Non ci sono eventi in questa data: </string>
+    <string name="eventsinthisdate">Eventi del:  </string>
     <string name="movie_times">Orari film</string>
+    <string name="date">Data</string>
+    <string name="favorite_category">Categoria preferita</string>
+    <string name="my_places">I miei punti di interesse</string>
+    <string name="favorite_places">Punti di interesse preferiti</string>
+    <string name="create_place">Crea un punto di interesse</string>
+    <string name="create_event">Crea un evento</string>
+    <string name="title">Title</string>
+    <string name="duration">Duration:</string>
+    <string name="select_duration">Select duration</string>
+    <string name="start">Start:</string>
+    <string name="select_date">Select date</string>
+    <string name="select_time">Select time</string>
+    <string name="end">End:</string>
+    <string name="place">Place</string>
+    <string name="isprivate">Private</string>
+    <string name="add">Add</string>
+    <string name="all_day">All day</string>
 
 
     <string-array name="sorting_parameters">
Index: app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\nimport static com.example.eventiapp.util.Constants.REQUEST_CODE;\r\n\r\nimport android.Manifest;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.CalendarContract;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.NavDestination;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentAllEventsBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.DateUtils;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.example.eventiapp.util.ShareUtils;\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class AllEventsFragment extends Fragment implements MyDialogEventsFragment.MyDialogListener {\r\n\r\n    private static final String TAG = AllEventsFragment.class.getSimpleName();\r\n\r\n    private FragmentAllEventsBinding fragmentAllEventsBinding;\r\n\r\n    private List<Events> eventsList;\r\n    private List<String> allCategories;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    private RecyclerView recyclerView;\r\n    private LinearLayoutManager layoutManager;\r\n    private String sortingParameter;\r\n    private int lastSelectedSortingParameter;\r\n    private String[] listItemsSort;\r\n\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    //CAMPI QUERY\r\n    String country = \"IT\"; //POI VERRA PRESA DALLE SHAREDPREFERENCES\r\n    String location = \"45.51851,9.2075123\"; //BICOCCA\r\n    double radius = 4.2;\r\n    String sort = \"start\";\r\n    String date = DateUtils.currentDate();\r\n    String categoriesString = \"conferences,expos,concerts,festivals,performing-arts,sports,community\";\r\n    int limit = 5000;\r\n    String lastUpdate = \"0\";\r\n    List<String> checkedCategories;\r\n    String firstDate, endDate;\r\n\r\n\r\n    public AllEventsFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static AllEventsFragment newInstance(Bundle bundle) {\r\n        AllEventsFragment fragment = new AllEventsFragment();\r\n        fragment.setArguments(bundle);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n        allCategories = new ArrayList<>();\r\n        listItemsSort = requireContext().getResources().getStringArray(R.array.sorting_parameters);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentAllEventsBinding = FragmentAllEventsBinding.inflate(inflater, container, false);\r\n        return fragmentAllEventsBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        Bundle bundle = getArguments();\r\n        if (bundle != null && (!Objects.equals(getArguments().getString(\"sort\"), null))) {\r\n            String sort = getArguments().getString(\"sort\");\r\n            sortingParameter = sort;\r\n            for (int i = 0; i < listItemsSort.length; i++) {\r\n                if (sortingParameter.equals(listItemsSort[i])) {\r\n                    lastSelectedSortingParameter = i;\r\n                }\r\n            }\r\n        } else {\r\n            sortingParameter = \"Earliest date\";\r\n            lastSelectedSortingParameter = 0;\r\n        }\r\n\r\n        //PERMESSI CALENDARIO\r\n        // Verifica se l'app ha i permessi di lettura del calendario\r\n        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {\r\n            // Se non ha i permessi, li richiede all'utente\r\n            ActivityCompat.requestPermissions(requireActivity(), new String[]{Manifest.permission.READ_CALENDAR}, REQUEST_CODE);\r\n        }\r\n\r\n// Verifica se l'app ha i permessi di scrittura del calendario\r\n        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.WRITE_CALENDAR) != PackageManager.PERMISSION_GRANTED) {\r\n            // Se non ha i permessi, li richiede all'utente\r\n            ActivityCompat.requestPermissions(requireActivity(), new String[]{Manifest.permission.WRITE_CALENDAR}, REQUEST_CODE);\r\n        }\r\n\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        recyclerView = view.findViewById(R.id.recyclerview_events);\r\n        layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(), 0,\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        //Navigation.findNavController(view).navigate(R.id.action_containerEventsPlacesCalendar_to_eventFragment, bundle);\r\n                        NavController navController = Navigation.findNavController(requireView());\r\n                        NavDestination currentDestination = navController.getCurrentDestination();\r\n                        if (currentDestination != null && currentDestination.getId() == R.id.containerEventsPlacesCalendar) {\r\n                            navController.navigate(R.id.action_containerEventsPlacesCalendar_to_eventFragment, bundle);\r\n                        } else {\r\n                            navController.navigate(R.id.action_searchFragment_to_eventFragment, bundle);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onExportButtonPressed(Events events) {\r\n                        ShareUtils.addToCalendar(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Events events) {\r\n                        ShareUtils.shareEvent(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        eventsList.get(position).setFavorite(!eventsList.get(position).isFavorite());\r\n                        eventsAndPlacesViewModel.updateEvents(eventsList.get(position));\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        fragmentAllEventsBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n        //eventsAndPlacesViewModel.deleteEvents(); //IN QUESTO MODO MI CARICA SEMPRE EVENTI NUOVI A PARTIRE DAL GIORNO CORRENTE\r\n\r\n        eventsAndPlacesViewModel.getAllCategories().observe(getViewLifecycleOwner(), result -> {\r\n            if (!result.isEmpty()) {\r\n                allCategories = result;\r\n            }\r\n        });\r\n\r\n        eventsAndPlacesViewModel.getEvents(country, radius + \"km@\" + location, date, categoriesString, sort, limit, Long.parseLong(lastUpdate)).observe(getViewLifecycleOwner(), result -> {\r\n            showEvents(result, 0);\r\n        });\r\n\r\n        //FILTRI\r\n\r\n        fragmentAllEventsBinding.filtersButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                showDialog(allCategories);\r\n            }\r\n        });\r\n\r\n        fragmentAllEventsBinding.sortingButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                showSorting();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    public void showDialog(List<String> allCategories) {\r\n        MyDialogEventsFragment dialogFragment = new MyDialogEventsFragment(allCategories);\r\n        Bundle bundle = new Bundle();\r\n        if (checkedCategories != null && !checkedCategories.isEmpty()) {\r\n            bundle.putStringArrayList(\"categories\", (ArrayList<String>) checkedCategories);\r\n            dialogFragment.setArguments(bundle);\r\n        }\r\n        if (firstDate != null && endDate != null) {\r\n            bundle.putString(\"fromDate\", firstDate);\r\n            bundle.putString(\"toDate\", endDate);\r\n            dialogFragment.setArguments(bundle);\r\n        }\r\n        dialogFragment.show(getChildFragmentManager(), \"MyDialogFragment\");\r\n    }\r\n\r\n    public void showSorting() {\r\n        new MaterialAlertDialogBuilder(requireContext()).setTitle(\"ORDER BY\")\r\n                .setSingleChoiceItems(listItemsSort, lastSelectedSortingParameter, (dialog, i) -> {\r\n                    sortingParameter = listItemsSort[i];\r\n                    lastSelectedSortingParameter = i;\r\n                    if (!eventsList.isEmpty()) {\r\n                        sortEvents(sortingParameter, eventsList);\r\n                    }\r\n                }).setNegativeButton(R.string.cancel_text, (dialogInterface, i) -> {\r\n                }).show();\r\n    }\r\n\r\n    public void sortEvents(String sortingParameter, List<Events> eventsList) {\r\n        switch (sortingParameter) {\r\n            case \"Earliest date\":\r\n            case \"Più recente\":\r\n                Collections.sort(eventsList, new Events.SortByMostRecent());\r\n                break;\r\n            case \"Latest date\":\r\n            case \"Meno recente\":\r\n                Collections.sort(eventsList, new Events.SortByLeastRecent());\r\n                break;\r\n            case \"Rank\":\r\n            case \"Più attesi\":\r\n                Collections.sort(eventsList, new Events.SortByRank());\r\n                break;\r\n            case \"Alphabet (A-Z)\":\r\n            case \"Alfabetico (A-Z)\":\r\n                Collections.sort(eventsList, new Events.SortByAlphabetAZ());\r\n                break;\r\n            case \"Alphabet (Z-A)\":\r\n            case \"Alfabetico (Z-A)\":\r\n                Collections.sort(eventsList, new Events.SortByAlphabetZA());\r\n                break;\r\n        }\r\n        eventsRecyclerViewAdapter.notifyDataSetChanged();\r\n    }\r\n\r\n    @Override\r\n    public void onFilterApply(List<String> categories, String fromDate, String toDate) {\r\n        firstDate = fromDate;\r\n        endDate = toDate;\r\n        if (categories == null || categories.isEmpty()) {\r\n            checkedCategories = Collections.emptyList();\r\n        } else {\r\n            checkedCategories = categories;\r\n        }\r\n        if (checkedCategories.isEmpty() && Objects.equals(fromDate, \"\") && Objects.equals(toDate, \"\")) {\r\n            //MOSTRA TUTTI GLI EVENTI\r\n            eventsAndPlacesViewModel.getEvents(country, radius + \"km@\" + location, date, categoriesString, sort, limit, Long.parseLong(lastUpdate)).observe(getViewLifecycleOwner(), result -> {\r\n                showEvents(result, 0);\r\n            });\r\n        } else if (checkedCategories == allCategories && !Objects.equals(fromDate, \"\") && !Objects.equals(toDate, \"\")) {\r\n            //MOSTRA EVENTI TUTTE CATEGORIE TRA DUE DATE\r\n            eventsAndPlacesViewModel.getEventsBetweenDatesLiveData(fromDate, toDate).observe(getViewLifecycleOwner(), result -> {\r\n                showEvents(result, 1);\r\n            });\r\n        } else if (checkedCategories != allCategories && !Objects.equals(fromDate, \"\") && !Objects.equals(toDate, \"\")) {\r\n            //MOSTRA EVENTI DI CERTE CATEGORIE TRA DUE DATE\r\n            eventsAndPlacesViewModel.getCategoryEventsBetweenDatesLiveData(firstDate, endDate, categories).observe(getViewLifecycleOwner(), result -> {\r\n                showEvents(result, 2);\r\n            });\r\n        } else if (checkedCategories != allCategories && Objects.equals(fromDate, \"\") && Objects.equals(toDate, \"\")) {\r\n            //MOSTRA TUTTI GLI EVENTI DI QUELLA CATEGORIA/E IN TUTTE LE DATE POSSIBILI\r\n            eventsAndPlacesViewModel.getCategoriesEventsLiveData(categories).observe(getViewLifecycleOwner(), result -> {\r\n                showEvents(result, 3);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentAllEventsBinding = null;\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n    private void showEvents(Result result, int typeOfQuery) {\r\n        if (result.isSuccess()) {\r\n\r\n            EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n            List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n            if (!eventsAndPlacesViewModel.isLoading()) {\r\n                eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, this.eventsList.size());\r\n                this.eventsList.clear();\r\n                this.eventsList.addAll(fetchedEvents);\r\n                if (!eventsList.isEmpty()) {\r\n                    //sortEvents(sortingParameter, eventsList);\r\n                }\r\n                eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                        this.eventsList.size());\r\n                fragmentAllEventsBinding.progressBar.setVisibility(View.GONE);\r\n            } else {\r\n                Log.i(TAG, \"IS LOADING\");\r\n                eventsAndPlacesViewModel.setLoading(false);\r\n                eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                int initialSize = eventsList.size();\r\n\r\n                for (int i = 0; i < eventsList.size(); i++) {\r\n                    if (eventsList.get(i) == null) {\r\n                        eventsList.remove(eventsList.get(i));\r\n                    }\r\n                }\r\n                int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                        EVENTS_PAGE_SIZE_VALUE;\r\n                for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                    eventsList.add(fetchedEvents.get(i));\r\n                }\r\n                if (!eventsList.isEmpty()) {\r\n                    sortEvents(sortingParameter, eventsList);\r\n                }\r\n                eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n            }\r\n            fragmentAllEventsBinding.numberOfEvents.setText(String.valueOf(eventsList.size()));\r\n\r\n        } else {\r\n            Log.i(\"FALLITO\", \"FALLITO ALL EVENTS\");\r\n\r\n            ErrorMessageUtil errorMessagesUtil =\r\n                    new ErrorMessageUtil(requireActivity().getApplication());\r\n            Snackbar.make(requireView(), errorMessagesUtil.\r\n                            getErrorMessage(((Result.Error) result).getMessage()),\r\n                    Snackbar.LENGTH_SHORT).show();\r\n            fragmentAllEventsBinding.progressBar.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/AllEventsFragment.java	
@@ -216,6 +216,16 @@
                         eventsList.get(position).setFavorite(!eventsList.get(position).isFavorite());
                         eventsAndPlacesViewModel.updateEvents(eventsList.get(position));
                     }
+
+                    @Override
+                    public void onModeEventButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onDeleteEventButtonPressed(Events events) {
+
+                    }
                 });
         recyclerView.setLayoutManager(layoutManager);
         recyclerView.setAdapter(eventsRecyclerViewAdapter);
Index: app/src/main/res/navigation/my_nav.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/my_nav\"\r\n    app:startDestination=\"@id/homeFragment\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/mapsFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.MapsFragment\"\r\n        android:label=\"fragment_maps\"\r\n        tools:layout=\"@layout/fragment_maps\" >\r\n        <action\r\n            android:id=\"@+id/action_mapsFragment_to_placeFragment\"\r\n            app:destination=\"@id/placeFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_mapsFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/homeFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.HomeFragment\"\r\n        android:label=\"fragment_home\"\r\n        tools:layout=\"@layout/fragment_home\" >\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\r\n            app:destination=\"@id/searchFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_placeFragment\"\r\n            app:destination=\"@id/placeFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_eventsInADateFragment\"\r\n            app:destination=\"@id/eventsInADateFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_allEventsFragment\"\r\n            app:destination=\"@id/allEventsFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_allPlacesFragment\"\r\n            app:destination=\"@id/allPlacesFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_containerEventsPlacesCalendar\"\r\n            app:destination=\"@id/containerEventsPlacesCalendar\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/myEventsFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.MyEventsFragment\"\r\n        android:label=\"fragment_my_events\"\r\n        tools:layout=\"@layout/fragment_my_events\" >\r\n        <action\r\n            android:id=\"@+id/action_myEventsFragment_to_welcomeActivity\"\r\n            app:destination=\"@id/welcomeActivity\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/searchFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.SearchFragment\"\r\n        android:label=\"fragment_search\"\r\n        tools:layout=\"@layout/fragment_search\" >\r\n        <action\r\n            android:id=\"@+id/action_searchFragment_to_categoryFragment\"\r\n            app:destination=\"@id/categoryFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_searchFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_searchFragment_to_placeFragment\"\r\n            app:destination=\"@id/placeFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_searchFragment_to_eventsInADateFragment\"\r\n            app:destination=\"@id/eventsInADateFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/categoryFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.CategoryFragment\"\r\n        android:label=\"fragment_category\"\r\n        tools:layout=\"@layout/fragment_category\" >\r\n        <action\r\n            android:id=\"@+id/action_categoryFragment_to_searchFragment\"\r\n            app:destination=\"@id/searchFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_categoryFragment_to_homeFragment\"\r\n            app:destination=\"@id/homeFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_categoryFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/eventFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.EventFragment\"\r\n        android:label=\"fragment_event\"\r\n        tools:layout=\"@layout/fragment_event\" >\r\n        <action\r\n            android:id=\"@+id/action_eventFragment_self\"\r\n            app:destination=\"@id/eventFragment\" />\r\n        <argument\r\n            android:name=\"event\"\r\n            app:argType=\"com.example.eventiapp.model.Events\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/placeFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.PlaceFragment\"\r\n        android:label=\"PlaceFragment\" >\r\n        <action\r\n            android:id=\"@+id/action_placeFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/eventsInADateFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.EventsInADateFragment\"\r\n        android:label=\"fragment_events_in_a_date\"\r\n        tools:layout=\"@layout/fragment_events_in_a_date\" >\r\n        <action\r\n            android:id=\"@+id/action_eventsInADateFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n    <activity\r\n        android:id=\"@+id/welcomeActivity\"\r\n        android:name=\"com.example.eventiapp.ui.welcome.WelcomeActivity\"\r\n        android:label=\"activity_welcome\"\r\n        tools:layout=\"@layout/activity_welcome\" />\r\n    <fragment\r\n        android:id=\"@+id/allEventsFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.AllEventsFragment\"\r\n        android:label=\"fragment_all_events\"\r\n        tools:layout=\"@layout/fragment_all_events\" >\r\n        <action\r\n            android:id=\"@+id/action_allEventsFragment_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/allPlacesFragment\"\r\n        android:name=\"com.example.eventiapp.ui.main.AllPlacesFragment\"\r\n        android:label=\"fragment_places\"\r\n        tools:layout=\"@layout/fragment_places\" />\r\n    <fragment\r\n        android:id=\"@+id/containerEventsPlacesCalendar\"\r\n        android:name=\"com.example.eventiapp.ui.main.ContainerEventsPlacesCalendar\"\r\n        android:label=\"fragment_container_events_places_calendar\"\r\n        tools:layout=\"@layout/fragment_container_events_places_calendar\" >\r\n        <action\r\n            android:id=\"@+id/action_containerEventsPlacesCalendar_to_eventFragment\"\r\n            app:destination=\"@id/eventFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_containerEventsPlacesCalendar_to_eventsInADateFragment\"\r\n            app:destination=\"@id/eventsInADateFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_containerEventsPlacesCalendar_to_placeFragment\"\r\n            app:destination=\"@id/placeFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_containerEventsPlacesCalendar_to_allEventsFragment\"\r\n            app:destination=\"@id/allEventsFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_containerEventsPlacesCalendar_self\"\r\n            app:destination=\"@id/containerEventsPlacesCalendar\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/accountFragment\"\r\n        android:name=\"com.example.eventiapp.ui.user.AccountFragment\"\r\n        android:label=\"fragment_account\"\r\n        tools:layout=\"@layout/fragment_account\" />\r\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/my_nav.xml b/app/src/main/res/navigation/my_nav.xml
--- a/app/src/main/res/navigation/my_nav.xml	
+++ b/app/src/main/res/navigation/my_nav.xml	
@@ -46,7 +46,7 @@
     </fragment>
     <fragment
         android:id="@+id/myEventsFragment"
-        android:name="com.example.eventiapp.ui.main.MyEventsFragment"
+        android:name="com.example.eventiapp.ui.user.MyEventsFragment"
         android:label="fragment_my_events"
         tools:layout="@layout/fragment_my_events" >
         <action
@@ -161,4 +161,22 @@
         android:name="com.example.eventiapp.ui.user.AccountFragment"
         android:label="fragment_account"
         tools:layout="@layout/fragment_account" />
+    <fragment
+        android:id="@+id/containerMyEventsAndPlaces"
+        android:name="com.example.eventiapp.ui.user.ContainerMyEventsAndPlaces"
+        android:label="fragment_container_my_events_and_places"
+        tools:layout="@layout/fragment_container_my_events_and_places" >
+        <action
+            android:id="@+id/action_containerMyEventsAndPlaces_to_addEventFragment"
+            app:destination="@id/addEventFragment" />
+    </fragment>
+    <fragment
+        android:id="@+id/addEventFragment"
+        android:name="com.example.eventiapp.ui.user.AddEventFragment"
+        android:label="fragment_add_event"
+        tools:layout="@layout/fragment_add_event" >
+        <action
+            android:id="@+id/action_addEventFragment_to_containerMyEventsAndPlaces"
+            app:destination="@id/containerMyEventsAndPlaces" />
+    </fragment>
 </navigation>
\ No newline at end of file
Index: app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.repository.events;\r\n\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\n\r\nimport java.util.List;\r\n\r\npublic interface IRepositoryWithLiveData {\r\n\r\n    MutableLiveData<Result> fetchEvents(String country, String location, String date, String categories, String sort, int limit, long lastUpdate);\r\n\r\n    void fetchEvents(String country, String location, String date, String categories, String sort, int limit);\r\n\r\n    MutableLiveData<Result> getFavoriteEvents(boolean isFirstLoading);\r\n\r\n    MutableLiveData<Result> getCategoryEvents(String category);\r\n\r\n    MutableLiveData<Result> getPlaceEvents(String id);\r\n\r\n    MutableLiveData<Result> getSingleEvent(long id);\r\n\r\n    MutableLiveData<Result> getEventsInADate(String date);\r\n\r\n    MutableLiveData<List<String>> getAllCategories();\r\n\r\n    MutableLiveData<List<String>> getCategoriesInADate(String date);\r\n\r\n    MutableLiveData<Result> getEventsFromSearch(String input);\r\n\r\n    MutableLiveData<Result> getCategoriesEvents(List<String> categories);\r\n\r\n    MutableLiveData<Result> getEventsBetweenDates(String firstDate, String endDate);\r\n\r\n    MutableLiveData<Result> getCategoryEventsBetweenDates(String firstDate, String endDate, List<String> categories);\r\n\r\n    MutableLiveData<List<String>> getEventsDates(String name);\r\n\r\n    MutableLiveData<String[]> getMoviesHours(String name);\r\n\r\n    MutableLiveData<List<Place>> fetchPlaces();\r\n\r\n    MutableLiveData<List<Place>> getFavoritePlaces(boolean isFirstLoading);\r\n\r\n    MutableLiveData<Place> getSinglePlace(String id);\r\n\r\n    MutableLiveData<List<Place>> getPlacesFromSearch(String input);\r\n\r\n    MutableLiveData<Place> getSinglePlaceByName(String name);\r\n\r\n    void updateEvents(Events events);\r\n\r\n    int getCount();\r\n\r\n    void deleteEvents();\r\n\r\n    void deletePlaces();\r\n\r\n    void deleteFavoriteEvents();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java b/app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java
--- a/app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java	
+++ b/app/src/main/java/com/example/eventiapp/repository/events/IRepositoryWithLiveData.java	
@@ -14,6 +14,8 @@
 
     void fetchEvents(String country, String location, String date, String categories, String sort, int limit);
 
+    void addEvent(Events events);
+
     MutableLiveData<Result> getFavoriteEvents(boolean isFirstLoading);
 
     MutableLiveData<Result> getCategoryEvents(String category);
Index: app/src/main/java/com/example/eventiapp/source/google/PlaceDetailsSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.source.google;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.location.Geocoder;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.google.android.gms.common.api.ApiException;\r\nimport com.google.android.libraries.places.api.model.AutocompleteSessionToken;\r\nimport com.google.android.libraries.places.api.model.PhotoMetadata;\r\nimport com.google.android.libraries.places.api.model.Place;\r\nimport com.google.android.libraries.places.api.net.FetchPhotoRequest;\r\nimport com.google.android.libraries.places.api.net.FetchPlaceRequest;\r\nimport com.google.android.libraries.places.api.net.FindAutocompletePredictionsRequest;\r\nimport com.google.android.libraries.places.api.net.PlacesClient;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class PlaceDetailsSource {\r\n\r\n    private static PlacesClient placesClient;\r\n    private Geocoder geoCoder;\r\n\r\n    public PlaceDetailsSource(PlacesClient placesClient, Geocoder geoCoder) {\r\n        this.placesClient = placesClient;\r\n        this.geoCoder = geoCoder;\r\n    }\r\n\r\n    public interface PlaceDetailsListener {\r\n        void onPlaceDetailsFetched(Place place);\r\n\r\n        void onError(String message);\r\n    }\r\n\r\n    public interface PlacePhotosListener {\r\n        void onPlacePhotosListener(Bitmap bitmap);\r\n\r\n        void onError(String message);\r\n    }\r\n\r\n    public void fetchPlaceDetails(String name, String address, PlaceDetailsListener listener) {\r\n\r\n        AutocompleteSessionToken token = AutocompleteSessionToken.newInstance();\r\n        // Creiamo la stringa di ricerca per il posto unendo nome e indirizzo\r\n        String query = name + \" \" + address;\r\n        FindAutocompletePredictionsRequest request = FindAutocompletePredictionsRequest.builder()\r\n                .setSessionToken(token)\r\n                .setQuery(query)\r\n                .build();\r\n\r\n        placesClient.findAutocompletePredictions(request).addOnSuccessListener((response) -> {\r\n            if (!response.getAutocompletePredictions().isEmpty()) {\r\n                // Prendiamo l'ID del primo posto nella lista delle predictions\r\n                String placeId = response.getAutocompletePredictions().get(0).getPlaceId();\r\n\r\n                List<Place.Field> placeFields = Arrays.asList(Place.Field.ID, Place.Field.NAME, Place.Field.ADDRESS,\r\n                        Place.Field.PHONE_NUMBER, Place.Field.WEBSITE_URI, Place.Field.RATING, Place.Field.OPENING_HOURS,\r\n                        Place.Field.TYPES, Place.Field.UTC_OFFSET, Place.Field.PHOTO_METADATAS);\r\n\r\n                FetchPlaceRequest requestDetails = FetchPlaceRequest.builder(placeId, placeFields).build();\r\n\r\n                placesClient.fetchPlace(requestDetails).addOnSuccessListener((response1) -> {\r\n                    Place place = response1.getPlace();\r\n                    listener.onPlaceDetailsFetched(place);\r\n                }).addOnFailureListener((exception) -> {\r\n                    if (exception instanceof ApiException) {\r\n                        String message = \"Place not found: \" + exception.getMessage();\r\n                        listener.onError(message);\r\n                    }\r\n                });\r\n\r\n            } else {\r\n                listener.onError(\"Place not found\");\r\n            }\r\n        }).addOnFailureListener((exception) -> {\r\n            String message = \"Place search failed: \" + exception.getMessage();\r\n            listener.onError(message);\r\n        });\r\n    }\r\n\r\n    public static void fetchPlacePhotos(List<PhotoMetadata> metadata, boolean onePhoto, PlacePhotosListener listener) {\r\n        if(true){\r\n            return; // PER NON FARE LA FETCH DELLE FOTO E RISPARMIARE IN DEBUG\r\n        }\r\n        if (metadata == null || metadata.isEmpty()) {\r\n            Log.w(\"TAG\", \"No photo metadata.\");\r\n            return;\r\n        }\r\n        int length = 0;\r\n        if (onePhoto) {\r\n            length = 1;\r\n        } else {\r\n            length = metadata.size();\r\n        }\r\n        for (int i = 0; i < length; i++) {\r\n            if (metadata.get(i) != null) {\r\n                PhotoMetadata photoMetadata = metadata.get(i);\r\n                FetchPhotoRequest photoRequest = FetchPhotoRequest.builder(photoMetadata)\r\n                        .setMaxWidth(1000) // Optional.\r\n                        .setMaxHeight(1000) // Optional.\r\n                        .build();\r\n                placesClient.fetchPhoto(photoRequest).addOnSuccessListener((fetchPhotoResponse) -> {\r\n                    Bitmap bitmap = fetchPhotoResponse.getBitmap();\r\n                    listener.onPlacePhotosListener(bitmap);\r\n                }).addOnFailureListener((exception) -> {\r\n                    if (exception instanceof ApiException) {\r\n                        String message = \"Place not found: \" + exception.getMessage();\r\n                        listener.onError(message);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/source/google/PlaceDetailsSource.java b/app/src/main/java/com/example/eventiapp/source/google/PlaceDetailsSource.java
--- a/app/src/main/java/com/example/eventiapp/source/google/PlaceDetailsSource.java	
+++ b/app/src/main/java/com/example/eventiapp/source/google/PlaceDetailsSource.java	
@@ -84,7 +84,7 @@
 
     public static void fetchPlacePhotos(List<PhotoMetadata> metadata, boolean onePhoto, PlacePhotosListener listener) {
         if(true){
-            return; // PER NON FARE LA FETCH DELLE FOTO E RISPARMIARE IN DEBUG
+            return; // PER NON FARE LA FETCH DELLE FOTO E RISPARMIARE IN TEST
         }
         if (metadata == null || metadata.isEmpty()) {
             Log.w("TAG", "No photo metadata.");
Index: app/src/main/res/layout/fragment_calendar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    tools:context=\".ui.main.CalendarFragment\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:layout_marginBottom=\"20dp\"\r\n        android:layout_marginTop=\"20dp\">\r\n        <com.google.android.material.button.MaterialButton\r\n            android:layout_width=\"125sp\"\r\n            android:layout_height=\"60sp\"\r\n            android:id=\"@+id/buttonBackward\"\r\n            android:text=\"@string/back\"\r\n            android:textColor=\"@color/white\"\r\n            android:background=\"@null\"\r\n            android:textStyle=\"bold\"\r\n            android:onClick=\"previousMonthAction\"\r\n            android:textSize=\"20sp\"/>\r\n\r\n        <com.google.android.material.textview.MaterialTextView\r\n            android:id=\"@+id/monthYearTV\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_weight=\"2\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Feb 2021\"\r\n            android:textSize=\"20sp\"\r\n            android:textAlignment=\"center\"\r\n            android:textColor=\"@color/colorTextPrimary\"/>\r\n\r\n        <com.google.android.material.button.MaterialButton\r\n            android:layout_width=\"120sp\"\r\n            android:layout_height=\"60sp\"\r\n            android:id=\"@+id/buttonForward\"\r\n            android:text=\"@string/forward\"\r\n            android:textColor=\"@color/white\"\r\n            android:background=\"@null\"\r\n            android:textStyle=\"bold\"\r\n            android:onClick=\"nextMonthAction\"\r\n            android:textSize=\"16sp\"/>\r\n\r\n    </LinearLayout>\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <TextView\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"@string/sun\"\r\n            android:textColor=\"@color/colorTextSecondary\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\"/>\r\n\r\n        <TextView\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"@string/mon\"\r\n            android:textColor=\"@color/colorTextSecondary\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\"/>\r\n\r\n        <TextView\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"@string/tue\"\r\n            android:textColor=\"@color/colorTextSecondary\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\"/>\r\n\r\n        <TextView\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"@string/wed\"\r\n            android:textColor=\"@color/colorTextSecondary\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\"/>\r\n\r\n        <TextView\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"@string/thur\"\r\n            android:textColor=\"@color/colorTextSecondary\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\"/>\r\n\r\n        <TextView\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"@string/fri\"\r\n            android:textColor=\"@color/colorTextSecondary\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\"/>\r\n\r\n        <TextView\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"@string/sat\"\r\n            android:textColor=\"@color/colorTextSecondary\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\"/>\r\n\r\n\r\n    </LinearLayout>\r\n\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/calendarRecyclerView\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"/>\r\n\r\n</LinearLayout>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_calendar.xml b/app/src/main/res/layout/fragment_calendar.xml
--- a/app/src/main/res/layout/fragment_calendar.xml	
+++ b/app/src/main/res/layout/fragment_calendar.xml	
@@ -14,7 +14,7 @@
         android:layout_marginBottom="20dp"
         android:layout_marginTop="20dp">
         <com.google.android.material.button.MaterialButton
-            android:layout_width="125sp"
+            android:layout_width="135sp"
             android:layout_height="60sp"
             android:id="@+id/buttonBackward"
             android:text="@string/back"
@@ -22,7 +22,7 @@
             android:background="@null"
             android:textStyle="bold"
             android:onClick="previousMonthAction"
-            android:textSize="20sp"/>
+            android:textSize="16sp"/>
 
         <com.google.android.material.textview.MaterialTextView
             android:id="@+id/monthYearTV"
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-feature\r\n        android:name=\"android.hardware.telephony\"\r\n        android:required=\"false\" />\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\r\n    <uses-permission android:name=\"android.permission.READ_CALENDAR\" />\r\n\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.EVENTIAPP\"\r\n        tools:targetApi=\"33\">\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.gms.version\"\r\n            android:value=\"@integer/google_play_services_version\"  />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.maps.v2.API_KEY\"\r\n            android:value=\"${maps_api_key}\" />\r\n        <meta-data\r\n            android:name=\"preloaded_fonts\"\r\n            android:resource=\"@array/preloaded_fonts\" />\r\n\r\n\r\n        <activity\r\n            android:name=\".ui.main.MainActivity\"\r\n            android:exported=\"false\">\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".ui.welcome.WelcomeActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	
+++ b/app/src/main/AndroidManifest.xml	
@@ -14,6 +14,7 @@
     <uses-permission android:name="android.permission.CALL_PHONE" />
     <uses-permission android:name="android.permission.WRITE_CALENDAR" />
     <uses-permission android:name="android.permission.READ_CALENDAR" />
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
 
 
     <application
Index: app/src/main/res/menu/bottom_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n\r\n    <item\r\n        android:id=\"@+id/homeFragment\"\r\n        android:icon=\"@drawable/ic_home\"\r\n        android:title=\"@string/home\" />\r\n    <item\r\n        android:id=\"@+id/mapsFragment\"\r\n        android:icon=\"@drawable/ic_maps\"\r\n        android:title=\"@string/map\" />\r\n    <item\r\n        android:id=\"@+id/myEventsFragment\"\r\n        android:icon=\"@drawable/ic_my_events\"\r\n        android:title=\"@string/events\" />\r\n    <item\r\n        android:id=\"@+id/searchFragment\"\r\n        android:icon=\"@drawable/ic_search\"\r\n        android:title=\"@string/search\" />\r\n\r\n    <item\r\n        android:id=\"@+id/accountFragment\"\r\n        android:icon=\"@drawable/ic_baseline_person_24\"\r\n        android:title=\"@string/account\" />\r\n</menu>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/menu/bottom_menu.xml b/app/src/main/res/menu/bottom_menu.xml
--- a/app/src/main/res/menu/bottom_menu.xml	
+++ b/app/src/main/res/menu/bottom_menu.xml	
@@ -10,9 +10,9 @@
         android:icon="@drawable/ic_maps"
         android:title="@string/map" />
     <item
-        android:id="@+id/myEventsFragment"
+        android:id="@+id/containerMyEventsAndPlaces"
         android:icon="@drawable/ic_my_events"
-        android:title="@string/events" />
+        android:title="@string/myevents" />
     <item
         android:id="@+id/searchFragment"
         android:icon="@drawable/ic_search"
Index: app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\n\r\nimport android.content.Context;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.NavDestination;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.PlacesRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentPlacesBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.DateUtils;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.example.eventiapp.util.ShareUtils;\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class AllPlacesFragment extends Fragment {\r\n\r\n\r\n    private static final String TAG = HomeFragment.class.getSimpleName();\r\n\r\n    private FragmentPlacesBinding fragmentPlacesBinding;\r\n\r\n    private List<Place> placesList;\r\n    private PlacesRecyclerViewAdapter placesRecyclerViewAdapter;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of places\r\n    private int lastVisibleItem; // The position of the last visible place item\r\n    private int visibleItemCount; // Number or total visible place items\r\n\r\n    // Based on this value, the process of loading more places is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    private String sortingParameter;\r\n    private int lastSelectedSortingParameter;\r\n    private String[] listItemsSort;\r\n\r\n\r\n    public AllPlacesFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static AllPlacesFragment newInstance(Bundle bundle) {\r\n        AllPlacesFragment fragment = new AllPlacesFragment();\r\n        fragment.setArguments(bundle);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        IRepositoryWithLiveData repositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (repositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(repositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        placesList = new ArrayList<>();\r\n        listItemsSort = requireContext().getResources().getStringArray(R.array.sorting_parameters_places);\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentPlacesBinding = FragmentPlacesBinding.inflate(inflater, container, false);\r\n        return fragmentPlacesBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        String country = \"IT\"; //POI VERRA PRESA DALLE SHAREDPREFERENCES\r\n        String location = \"45.51851, 9.2075123\"; //BICOCCA\r\n        double radius = 4.2;\r\n        String sort = \"start\";\r\n        String date = DateUtils.currentDate();\r\n        int limit = 5000;\r\n\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_places);\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        placesRecyclerViewAdapter = new PlacesRecyclerViewAdapter(placesList,\r\n                requireActivity().getApplication(), 2,\r\n                new PlacesRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onPlacesItemClick(Place place) {\r\n                        //VAI AI DETTAGLI DEL POSTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"place\", place);\r\n                        //Navigation.findNavController(view).navigate(R.id.action_containerEventsPlacesCalendar_to_placeFragment, bundle);\r\n                        NavController navController = Navigation.findNavController(requireView());\r\n                        NavDestination currentDestination = navController.getCurrentDestination();\r\n                        if (currentDestination != null && currentDestination.getId() == R.id.containerEventsPlacesCalendar) {\r\n                            navController.navigate(R.id.action_containerEventsPlacesCalendar_to_placeFragment, bundle);\r\n                        } else {\r\n                            navController.navigate(R.id.action_searchFragment_to_placeFragment, bundle);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Place place) {\r\n                        ShareUtils.sharePlace(requireContext(),place);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(placesRecyclerViewAdapter);\r\n\r\n        String lastUpdate = \"0\";\r\n\r\n        fragmentPlacesBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n\r\n        eventsAndPlacesViewModel.getPlaces().observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result != null) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n                List<Place> fetchedPlaces = new ArrayList<>(result);\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                        eventsAndPlacesViewModel.setTotalResults(fetchedPlaces.size());\r\n                        eventsAndPlacesViewModel.setFirstLoading(false);\r\n                        this.placesList.addAll(fetchedPlaces);\r\n                        placesRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                                this.placesList.size());\r\n                    } else {\r\n                        // Updates related to the favorite status of the places\r\n                        placesRecyclerViewAdapter.notifyItemRangeRemoved(0, this.placesList.size());\r\n                        this.placesList.clear();\r\n                        this.placesList.addAll(fetchedPlaces);\r\n                        placesRecyclerViewAdapter.notifyItemChanged(0, fetchedPlaces.size());\r\n                    }\r\n                    fragmentPlacesBinding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(placesList.size());\r\n\r\n                    int initialSize = placesList.size();\r\n\r\n                    for (int i = 0; i < placesList.size(); i++) {\r\n                        if (placesList.get(i) == null) {\r\n                            placesList.remove(placesList.get(i));\r\n                        }\r\n                    }\r\n                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                            EVENTS_PAGE_SIZE_VALUE;\r\n                    for (int i = startIndex; i < fetchedPlaces.size(); i++) {\r\n                        placesList.add(fetchedPlaces.get(i));\r\n                    }\r\n                    placesRecyclerViewAdapter.notifyItemRangeInserted(initialSize, placesList.size());\r\n                }\r\n                fragmentPlacesBinding.numberOfEvents.setText(String.valueOf(placesList.size()));\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(view, errorMessagesUtil.\r\n                                getErrorMessage(\"ERRORE\"),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n                fragmentPlacesBinding.progressBar.setVisibility(View.GONE);\r\n            }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getPlacesResponseLiveData().getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<List<Place>> placeListMutableLiveData = eventsAndPlacesViewModel.getPlacesResponseLiveData();\r\n\r\n                        if (placeListMutableLiveData.getValue() != null) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            placesList.add(null);\r\n                            placesRecyclerViewAdapter.notifyItemRangeInserted(placesList.size(),\r\n                                    placesList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.fetchPlaces();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        //SORTING\r\n        fragmentPlacesBinding.sortingButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                showSorting();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void showSorting() {\r\n        new MaterialAlertDialogBuilder(requireContext()).setTitle(\"ORDER BY\")\r\n                .setSingleChoiceItems(listItemsSort, lastSelectedSortingParameter, (dialog, i) -> {\r\n                    sortingParameter = listItemsSort[i];\r\n                    lastSelectedSortingParameter = i;\r\n                    if (!placesList.isEmpty()) {\r\n                        sortPlaces(sortingParameter, placesList);\r\n                    }\r\n                }).setNegativeButton(R.string.cancel_text, (dialogInterface, i) -> {\r\n                }).show();\r\n    }\r\n\r\n    public void sortPlaces(String sortingParameter, List<Place> placesList) {\r\n        switch (sortingParameter) {\r\n            case \"Alphabet (A-Z)\":\r\n            case \"Alfabetico (A-Z)\":\r\n                Collections.sort(placesList, new Place.SortByAlphabetAZ());\r\n                break;\r\n            case \"Alphabet (Z-A)\":\r\n            case \"Alfabetico (Z-A)\":\r\n                Collections.sort(placesList, new Place.SortByAlphabetZA());\r\n                break;\r\n        }\r\n        placesRecyclerViewAdapter.notifyDataSetChanged();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentPlacesBinding = null;\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/AllPlacesFragment.java	
@@ -160,6 +160,16 @@
                     @Override
                     public void onFavoriteButtonPressed(int position) {
 
+                    }
+
+                    @Override
+                    public void onModePlaceButtonPressed(Place place) {
+
+                    }
+
+                    @Override
+                    public void onDeletePlaceButtonPressed(Place place) {
+
                     }
                 });
         recyclerView.setLayoutManager(layoutManager);
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">EVENTS APP</string>\r\n    <string name=\"home\" translatable=\"false\">HOME</string>\r\n    <string name=\"map\">MAP</string>\r\n    <string name=\"myevents\">MY EVENTS</string>\r\n    <string name=\"search\">SEARCH</string>\r\n    <string name=\"account\" translatable=\"false\">ACCOUNT</string>\r\n\r\n\r\n    <string name=\"content_description_fav_addition\">Add the event to the favorite list</string>\r\n\r\n    <string name=\"error_retrieving_events\">Error in retrieving the events</string>\r\n    <string name=\"api_key_error\">API Key not valid or maximum number of requests reached</string>\r\n    <string name=\"unexpected_error\">Unexpected error</string>\r\n    <string name=\"cancel_text\">Cancel</string>\r\n\r\n\r\n    <string-array name=\"sorting_parameters\">\r\n        <item>Earliest date</item>\r\n        <item>Latest date</item>\r\n        <item>Rank</item>\r\n        <item>Alphabet (A-Z)</item>\r\n        <item>Alphabet (Z-A)</item>\r\n    </string-array>\r\n\r\n    <string-array name=\"languages\">\r\n        <item>IT</item>\r\n        <item>EN</item>\r\n    </string-array>\r\n\r\n    <string-array name=\"sorting_parameters_places\">\r\n        <item>Alphabet (A-Z)</item>\r\n        <item>Alphabet (Z-A)</item>\r\n    </string-array>\r\n\r\n    <string name=\"logo\" translatable=\"false\">Logo Application</string>\r\n    <string name=\"login\" translatable=\"false\">Login</string>\r\n    <string name=\"logout\" translatable=\"false\">Logout</string>\r\n    <string name=\"email\" translatable=\"false\">E-mail</string>\r\n    <string name=\"password\" translatable=\"false\">Password</string>\r\n    <string name=\"forgot_password\">Forgot password?</string>\r\n    <string name=\"txt_or\" translatable=\"false\">OR</string>\r\n    <string name=\"google_login\">Login with Google</string>\r\n    <string name=\"new_account\">New to Events APP?</string>\r\n    <string name=\"register\">Register</string>\r\n\r\n\r\n    <string name=\"error_email\">Insert a valid email address</string>\r\n    <string name=\"error_password\">Password should be at least 6 characters</string>\r\n    <string name=\"check_login_data_message\">Check the data you inserted</string>\r\n    <string name=\"error_login_user_message\">There is no user record corresponding to this identifier</string>\r\n    <string name=\"error_login_password_message\">The password is invalid</string>\r\n    <string name=\"error_user_collision_message\">The email address is already in use by another account</string>\r\n    <string name=\"error_no_google_account_found_message\">No Google accounts have been found</string>\r\n\r\n\r\n    <string name=\"delete\">Delete</string>\r\n    <!-- TODO: Remove or change this placeholder text -->\r\n    <string name=\"hello_blank_fragment\" translatable=\"false\">Hello blank fragment</string>\r\n    <string name=\"events_list_item_title\" translatable=\"false\">Title event</string>\r\n    <string name=\"events_list_item_date\" translatable=\"false\">12-05-2023 12:28 PM</string>\r\n    <string name=\"content_description_fav_delete\">Remove the event from the favorite list</string>\r\n    <string name=\"explore_bicocca_events\">Explore Bicocca events!</string>\r\n    <string name=\"upcoming_events\">Upcoming events</string>\r\n    <string name=\"see_all_events\"><![CDATA[See all events >]]></string>\r\n    <string name=\"the_most_awaited\">The most awaited</string>\r\n    <string name=\"chosen_for_you\">Chosen for you</string>\r\n    <string name=\"favorite_events\">Favorite Events</string>\r\n    <string name=\"places\">Places</string>\r\n    <string name=\"see_all_venues\"><![CDATA[See all places >]]></string>\r\n    <string name=\"attendance\">Attendance:</string>\r\n    <string name=\"favorite_events_account\">Favorite events:</string>\r\n    <string name=\"settings\">Settings</string>\r\n    <string name=\"change_username\">Change username</string>\r\n    <string name=\"change_password\">Change password</string>\r\n    <string name=\"change_language\">Change language</string>\r\n    <string name=\"info\" translatable=\"false\">Info</string>\r\n    <string name=\"version\">Version</string>\r\n    <string name=\"number_of_events\">Number of events:</string>\r\n    <string name=\"back\">BACK</string>\r\n    <string name=\"forward\">FORWARD</string>\r\n    <string name=\"sun\">SUN</string>\r\n    <string name=\"mon\">MON</string>\r\n    <string name=\"tue\">TUE</string>\r\n    <string name=\"wed\">WED</string>\r\n    <string name=\"thur\">THUR</string>\r\n    <string name=\"fri\">FRI</string>\r\n    <string name=\"sat\">SAT</string>\r\n    <string name=\"all_events\">All events</string>\r\n    <string name=\"all_places\">All places</string>\r\n    <string name=\"calendar\">Calendar</string>\r\n    <string name=\"select_categories\">Select categories</string>\r\n    <string name=\"select_a_date_range\">Select a date range</string>\r\n    <string name=\"from\">FROM:</string>\r\n    <string name=\"to\">TO:</string>\r\n    <string name=\"apply\">Apply</string>\r\n    <string name=\"dismiss\">Dismiss</string>\r\n    <string name=\"delete_filters\">Delete filters</string>\r\n    <string name=\"description\">Description</string>\r\n    <string name=\"for_more_information\">For more information:</string>\r\n    <string name=\"number_of_places\">Number of places:</string>\r\n    <string name=\"send_email\">Send Email</string>\r\n    <string name=\"events\">Events</string>\r\n    <string name=\"present_events\">Present events</string>\r\n    <string name=\"similar_events\">Similar events</string>\r\n    <string name=\"distance\">Distance</string>\r\n    <string name=\"hintsearch\">Search events, places…</string>\r\n    <string name=\"noeventsinthisdate\">No events in this date</string>\r\n    <string name=\"movie_times\">Movie times</string>\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	
+++ b/app/src/main/res/values/strings.xml	
@@ -69,14 +69,14 @@
     <string name="places">Places</string>
     <string name="see_all_venues"><![CDATA[See all places >]]></string>
     <string name="attendance">Attendance:</string>
-    <string name="favorite_events_account">Favorite events:</string>
+    <string name="favorite_events_account">Favorite events</string>
     <string name="settings">Settings</string>
     <string name="change_username">Change username</string>
     <string name="change_password">Change password</string>
     <string name="change_language">Change language</string>
     <string name="info" translatable="false">Info</string>
     <string name="version">Version</string>
-    <string name="number_of_events">Number of events:</string>
+    <string name="number_of_events">Number of events: </string>
     <string name="back">BACK</string>
     <string name="forward">FORWARD</string>
     <string name="sun">SUN</string>
@@ -105,7 +105,26 @@
     <string name="similar_events">Similar events</string>
     <string name="distance">Distance</string>
     <string name="hintsearch">Search events, places…</string>
-    <string name="noeventsinthisdate">No events in this date</string>
     <string name="movie_times">Movie times</string>
+    <string name="date">Date</string>
+    <string name="eventsinthisdate">Events of: </string>
+    <string name="noeventsinthisdate">There are no events on this date: </string>
+    <string name="favorite_category">Favorite category</string>
+    <string name="my_places">My places</string>
+    <string name="favorite_places">Favorite places</string>
+    <string name="create_place">Create place</string>
+    <string name="create_event">Create event</string>
+    <string name="title">Title</string>
+    <string name="duration">Duration:</string>
+    <string name="select_duration">Select duration</string>
+    <string name="start">Start:</string>
+    <string name="select_date">Select date</string>
+    <string name="select_time">Select time</string>
+    <string name="end">End:</string>
+    <string name="place">Place</string>
+    <string name="isprivate">Private</string>
+    <string name="add">Add</string>
+    <string name="all_day">All day</string>
+
 
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/eventiapp/ui/user/AccountFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.user;\r\n\r\nimport android.app.Application;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.databinding.FragmentAccountBinding;\r\nimport com.example.eventiapp.util.Constants;\r\nimport com.example.eventiapp.util.LanguageUtil;\r\nimport com.example.eventiapp.util.SharedPreferencesUtil;\r\n\r\n\r\npublic class AccountFragment extends Fragment {\r\n\r\n    private FragmentAccountBinding fragmentAccountBinding;\r\n    private String[] languages;\r\n    private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        languages = requireContext().getResources().getStringArray(R.array.languages);\r\n        sharedPreferencesUtil = new SharedPreferencesUtil(requireActivity().getApplication());\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentAccountBinding = FragmentAccountBinding.inflate(inflater, container, false);\r\n        return fragmentAccountBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, languages);\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        fragmentAccountBinding.languageSpinner.setAdapter(adapter);\r\n\r\n        String language = sharedPreferencesUtil.readStringData(Constants.SHARED_PREFERENCES_FILE_NAME, Constants.SHARED_PREFERENCES_LANGUAGE);\r\n        if(language!=null) {\r\n            if (language.equals(\"IT\")) {\r\n                fragmentAccountBinding.languageSpinner.setSelection(0);\r\n            } else {\r\n                fragmentAccountBinding.languageSpinner.setSelection(1);\r\n            }\r\n        }else{\r\n            fragmentAccountBinding.languageSpinner.setSelection(1);\r\n        }\r\n\r\n        fragmentAccountBinding.languageSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String selectedLanguage = parent.getItemAtPosition(position).toString();\r\n                sharedPreferencesUtil.writeStringData(Constants.SHARED_PREFERENCES_FILE_NAME, Constants.SHARED_PREFERENCES_LANGUAGE, selectedLanguage);\r\n                LanguageUtil.setAppLanguage(requireContext(), selectedLanguage);\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/user/AccountFragment.java b/app/src/main/java/com/example/eventiapp/ui/user/AccountFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/user/AccountFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/user/AccountFragment.java	
@@ -11,12 +11,24 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.fragment.app.Fragment;
+import androidx.lifecycle.ViewModelProvider;
 
 import com.example.eventiapp.R;
 import com.example.eventiapp.databinding.FragmentAccountBinding;
+import com.example.eventiapp.model.Events;
+import com.example.eventiapp.model.EventsResponse;
+import com.example.eventiapp.model.Result;
+import com.example.eventiapp.repository.events.IRepositoryWithLiveData;
+import com.example.eventiapp.ui.main.EventsAndPlacesViewModel;
+import com.example.eventiapp.ui.main.EventsAndPlacesViewModelFactory;
 import com.example.eventiapp.util.Constants;
 import com.example.eventiapp.util.LanguageUtil;
+import com.example.eventiapp.util.ServiceLocator;
 import com.example.eventiapp.util.SharedPreferencesUtil;
+import com.google.android.material.snackbar.Snackbar;
+
+import java.util.ArrayList;
+import java.util.List;
 
 
 public class AccountFragment extends Fragment {
@@ -24,11 +36,27 @@
     private FragmentAccountBinding fragmentAccountBinding;
     private String[] languages;
     private SharedPreferencesUtil sharedPreferencesUtil;
+    private EventsAndPlacesViewModel eventsAndPlacesViewModel;
+    private List<Events> eventsList;
 
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        IRepositoryWithLiveData eventsRepositoryWithLiveData =
+                ServiceLocator.getInstance().getRepository(
+                        requireActivity().getApplication()
+                );
+
+        if (eventsRepositoryWithLiveData != null) {
+            eventsAndPlacesViewModel = new ViewModelProvider(
+                    requireActivity(),
+                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);
+        } else {
+            Snackbar.make(requireActivity().findViewById(android.R.id.content),
+                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();
+        }
+        eventsList = new ArrayList<>();
         languages = requireContext().getResources().getStringArray(R.array.languages);
         sharedPreferencesUtil = new SharedPreferencesUtil(requireActivity().getApplication());
     }
@@ -43,6 +71,20 @@
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
+
+        eventsAndPlacesViewModel.getFavoriteEventsLiveData(false).observe(getViewLifecycleOwner(), result -> {
+            if(result!=null){
+                EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();
+                List<Events> fetchedEvents = eventsResponse.getEventsList();
+                fragmentAccountBinding.numberEventsTextView.setText(String.valueOf(fetchedEvents.size()));
+            }else{
+                fragmentAccountBinding.numberEventsTextView.setText("0");
+            }
+        });
+
+
+
+        //SPINNER LANGUAGE
         ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, languages);
         adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         fragmentAccountBinding.languageSpinner.setAdapter(adapter);
Index: app/src/main/res/layout/fragment_my_events.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ui.main.MyEventsFragment\"\r\n    android:id=\"@+id/contentContainer\"\r\n    android:orientation=\"vertical\">\r\n\r\n    <Button\r\n        android:id=\"@+id/logout_b\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/logout\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <ListView\r\n        android:id=\"@+id/listview_fav_events\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_marginTop=\"64dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/logout_b\"></ListView>\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/progress_bar\"\r\n        style=\"?android:attr/progressBarStyle\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_my_events.xml b/app/src/main/res/layout/fragment_my_events.xml
--- a/app/src/main/res/layout/fragment_my_events.xml	
+++ b/app/src/main/res/layout/fragment_my_events.xml	
@@ -1,39 +1,128 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".ui.main.MyEventsFragment"
-    android:id="@+id/contentContainer"
+    tools:context=".ui.user.MyEventsFragment"
     android:orientation="vertical">
+
+    <ScrollView
+        android:id="@+id/scrollView"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:visibility="visible">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+
+            <LinearLayout
+                android:id="@+id/linearLayoutMyEvents"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="50sp"
+                android:orientation="vertical">
 
-    <Button
-        android:id="@+id/logout_b"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="@string/logout"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal">
+
+                    <TextView
+                        android:id="@+id/textViewMyEvents"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="15sp"
+                        android:layout_weight="1"
+                        android:padding="16sp"
+                        android:text="@string/myevents"
+                        android:textColor="@color/colorTextPrimary"
+                        android:textSize="25sp"
+                        android:visibility="visible" />
 
-    <ListView
-        android:id="@+id/listview_fav_events"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_marginTop="64dp"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/logout_b"></ListView>
+                </LinearLayout>
+
+                <androidx.recyclerview.widget.RecyclerView
+                    android:id="@+id/recyclerViewMyEvents"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:padding="16sp" />
+
+                <ProgressBar
+                    android:id="@+id/progress_bar_my_events"
+                    style="?android:attr/progressBarStyle"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:visibility="gone" />
+
+            </LinearLayout>
+
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical">
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal">
+
+                    <TextView
+                        android:id="@+id/textViewFavoriteEvents"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="5sp"
+                        android:layout_weight="1"
+                        android:padding="16sp"
+                        android:text="@string/favorite_events"
+                        android:textColor="@color/colorTextPrimary"
+                        android:textSize="25sp"
+                        android:visibility="visible" />
+
+                </LinearLayout>
+
+                <androidx.recyclerview.widget.RecyclerView
+                    android:id="@+id/recyclerViewFavoriteEvents"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:padding="16sp" />
 
-    <ProgressBar
-        android:id="@+id/progress_bar"
-        style="?android:attr/progressBarStyle"
-        android:layout_width="wrap_content"
+                <ProgressBar
+                    android:id="@+id/progress_bar_favorite_events"
+                    style="?android:attr/progressBarStyle"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:visibility="gone" />
+
+            </LinearLayout>
+        </LinearLayout>
+
+    </ScrollView>
+
+
+    <LinearLayout
+        android:id="@+id/bottomBar"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+        android:orientation="horizontal"
+        android:layout_alignParentBottom="true"
+        android:background="@color/colorBackground">
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/createEventButton"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="@string/create_event"
+            android:textSize="15sp">
+        </com.google.android.material.button.MaterialButton>
+
+    </LinearLayout>
 
 
-</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
+</RelativeLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_account.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/accountFragment\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    tools:context=\".ui.user.AccountFragment\">\r\n\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\">\r\n\r\n\r\n        <com.google.android.material.imageview.ShapeableImageView\r\n            android:id=\"@+id/profile_image\"\r\n            android:layout_width=\"150sp\"\r\n            android:layout_height=\"150sp\"\r\n            android:layout_gravity=\"center_horizontal\"\r\n            android:layout_marginTop=\"20sp\"\r\n            android:background=\"@drawable/circleshape\"\r\n            android:scaleType=\"centerCrop\"\r\n            android:src=\"@drawable/ic_baseline_person_24\" />\r\n\r\n        <com.google.android.material.textview.MaterialTextView\r\n            android:id=\"@+id/username_text\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center_horizontal\"\r\n            android:layout_marginTop=\"16sp\"\r\n            android:text=\"Username\"\r\n            android:textColor=\"@color/colorTextPrimary\"\r\n            android:textSize=\"18sp\" />\r\n\r\n        <com.google.android.material.textview.MaterialTextView\r\n            android:id=\"@+id/email_text\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center_horizontal\"\r\n            android:layout_marginTop=\"8sp\"\r\n            android:text=\"mailexample@gmail.com\"\r\n            android:textColor=\"@color/colorTextSecondary\"\r\n            android:textSize=\"14sp\" />\r\n\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center_horizontal\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <com.google.android.material.textview.MaterialTextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"2sp\"\r\n                android:padding=\"20sp\"\r\n                android:text=\"@string/favorite_events_account\"\r\n                android:textColor=\"@color/colorTextPrimary\"\r\n                android:textSize=\"18sp\" />\r\n\r\n            <com.google.android.material.textview.MaterialTextView\r\n                android:id=\"@+id/number_events_textView\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"2sp\"\r\n                android:text=\"5\"\r\n                android:textColor=\"@color/colorTextPrimary\"\r\n                android:textSize=\"18sp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <View\r\n            android:id=\"@+id/line2\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"1sp\"\r\n            android:background=\"@color/colorTextSecondary\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"5sp\"\r\n            android:orientation=\"vertical\">\r\n\r\n\r\n            <com.google.android.material.textview.MaterialTextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"5sp\"\r\n                android:padding=\"10sp\"\r\n                android:text=\"@string/settings\"\r\n                android:textColor=\"@color/colorTextPrimary\"\r\n                android:textSize=\"20sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textview.MaterialTextView\r\n                android:id=\"@+id/usernameTextView\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:padding=\"10sp\"\r\n                android:text=\"@string/change_username\"\r\n                android:textColor=\"@color/colorTextSecondary\"\r\n                android:textSize=\"16sp\" />\r\n\r\n            <View\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1sp\"\r\n                android:background=\"@color/colorTextSecondary\" />\r\n\r\n\r\n            <com.google.android.material.textview.MaterialTextView\r\n                android:id=\"@+id/passwordTextView\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:padding=\"10sp\"\r\n                android:text=\"@string/change_password\"\r\n                android:textColor=\"@color/colorTextSecondary\"\r\n                android:textSize=\"16sp\" />\r\n\r\n            <View\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1sp\"\r\n                android:background=\"@color/colorTextSecondary\" />\r\n\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <com.google.android.material.textview.MaterialTextView\r\n                    android:id=\"@+id/languageTextView\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:padding=\"10sp\"\r\n                    android:layout_weight=\"1\"\r\n                    android:text=\"@string/change_language\"\r\n                    android:textColor=\"@color/colorTextSecondary\"\r\n                    android:textSize=\"16sp\" />\r\n\r\n                <Spinner\r\n                    android:id=\"@+id/languageSpinner\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"end\"\r\n                    android:layout_marginEnd=\"16sp\" />\r\n\r\n\r\n            </LinearLayout>\r\n\r\n            <View\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1sp\"\r\n                android:background=\"@color/colorTextSecondary\" />\r\n\r\n\r\n            <com.google.android.material.textview.MaterialTextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"5sp\"\r\n                android:padding=\"10sp\"\r\n                android:text=\"@string/info\"\r\n                android:textColor=\"@color/colorTextPrimary\"\r\n                android:textSize=\"20sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"horizontal\">\r\n\r\n\r\n                <com.google.android.material.textview.MaterialTextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:padding=\"10sp\"\r\n                    android:layout_weight=\"1\"\r\n                    android:text=\"@string/version\"\r\n                    android:textColor=\"@color/colorTextSecondary\"\r\n                    android:textSize=\"16sp\" />\r\n\r\n\r\n                <com.google.android.material.textview.MaterialTextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:padding=\"10sp\"\r\n                    android:text=\"1.0\"\r\n                    android:textColor=\"@color/colorTextSecondary\"\r\n                    android:textSize=\"16sp\" />\r\n\r\n\r\n            </LinearLayout>\r\n\r\n\r\n            <com.google.android.material.button.MaterialButton\r\n                android:id=\"@+id/logout_b\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginLeft=\"10sp\"\r\n                android:layout_marginTop=\"20sp\"\r\n                android:layout_marginRight=\"10sp\"\r\n                android:background=\"@color/colorButton\"\r\n                android:text=\"LOGOUT\"\r\n                android:textColor=\"@color/white\"\r\n                android:textSize=\"20sp\" />\r\n\r\n\r\n        </LinearLayout>\r\n\r\n    </LinearLayout>\r\n\r\n\r\n</ScrollView>\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_account.xml b/app/src/main/res/layout/fragment_account.xml
--- a/app/src/main/res/layout/fragment_account.xml	
+++ b/app/src/main/res/layout/fragment_account.xml	
@@ -46,31 +46,66 @@
 
 
         <LinearLayout
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
+            android:layout_width="match_parent"
+            android:layout_marginTop="5sp"
+            android:layout_height="80sp"
             android:orientation="horizontal">
 
-            <com.google.android.material.textview.MaterialTextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="2sp"
-                android:padding="20sp"
-                android:text="@string/favorite_events_account"
-                android:textColor="@color/colorTextPrimary"
-                android:textSize="18sp" />
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                android:orientation="vertical">
+
+                <com.google.android.material.textview.MaterialTextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:text="@string/favorite_events_account"
+                    android:textColor="@color/colorTextPrimary"
+                    android:textSize="18sp" />
 
-            <com.google.android.material.textview.MaterialTextView
-                android:id="@+id/number_events_textView"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="2sp"
-                android:text="5"
-                android:textColor="@color/colorTextPrimary"
-                android:textSize="18sp" />
+                <com.google.android.material.textview.MaterialTextView
+                    android:id="@+id/number_events_textView"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:text="5"
+                    android:textColor="@color/colorTextPrimary"
+                    android:textSize="18sp" />
+
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                android:orientation="vertical">
+
+                <com.google.android.material.textview.MaterialTextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:text="@string/favorite_category"
+                    android:textColor="@color/colorTextPrimary"
+                    android:textSize="18sp" />
 
-        </LinearLayout>
+                <com.google.android.material.textview.MaterialTextView
+                    android:id="@+id/favorite_category_textView"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:text="Art"
+                    android:textColor="@color/colorTextPrimary"
+                    android:textSize="18sp" />
+
+            </LinearLayout>
 
+
+
+        </LinearLayout>
+
+
         <View
             android:id="@+id/line2"
             android:layout_width="match_parent"
@@ -83,7 +118,6 @@
             android:layout_marginTop="5sp"
             android:orientation="vertical">
 
-
             <com.google.android.material.textview.MaterialTextView
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
@@ -133,8 +167,8 @@
                     android:id="@+id/languageTextView"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:padding="10sp"
                     android:layout_weight="1"
+                    android:padding="10sp"
                     android:text="@string/change_language"
                     android:textColor="@color/colorTextSecondary"
                     android:textSize="16sp" />
@@ -174,8 +208,8 @@
                 <com.google.android.material.textview.MaterialTextView
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
+                    android:layout_weight="1"
                     android:padding="10sp"
-                    android:layout_weight="1"
                     android:text="@string/version"
                     android:textColor="@color/colorTextSecondary"
                     android:textSize="16sp" />
Index: app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\nimport static com.example.eventiapp.util.Constants.EVENTS_VIEW_TYPE;\r\n\r\nimport android.content.Context;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.view.MenuProvider;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavBackStackEntry;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.databinding.FragmentCategoryBinding;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsApiResponse;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class CategoryFragment extends Fragment {\r\n\r\n    private static final String TAG = CategoryFragment.class.getSimpleName();\r\n\r\n    private FragmentCategoryBinding fragmentCategoryBinding;\r\n\r\n    private List<Events> eventsList;\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    //private SharedPreferencesUtil sharedPreferencesUtil;\r\n\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n\r\n    public CategoryFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static CategoryFragment newInstance() {\r\n        return new CategoryFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        eventsList = new ArrayList<>();\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        fragmentCategoryBinding = FragmentCategoryBinding.inflate(inflater, container, false);\r\n        return fragmentCategoryBinding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        String category = getArguments().getString(\"category\");\r\n\r\n        requireActivity().addMenuProvider(new MenuProvider() {\r\n            @Override\r\n            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {\r\n                menu.clear();\r\n            }\r\n\r\n            @Override\r\n            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_events);\r\n        LinearLayoutManager layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.VERTICAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(eventsList,\r\n                requireActivity().getApplication(),0,\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(view).navigate(R.id.action_categoryFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onExportButtonPressed(Events events) {\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Events events) {\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n        String lastUpdate = \"0\";\r\n\r\n        fragmentCategoryBinding.progressBar.setVisibility(View.VISIBLE);\r\n\r\n        eventsAndPlacesViewModel.getCategoryEventsLiveData(category).observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result.isSuccess()) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n                EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                        eventsAndPlacesViewModel.setTotalResults(((EventsApiResponse) eventsResponse).getCount());\r\n                        eventsAndPlacesViewModel.setFirstLoading(false);\r\n                        this.eventsList.addAll(fetchedEvents);\r\n                        eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                                this.eventsList.size());\r\n                    } else {\r\n                        // Updates related to the favorite status of the events\r\n                        eventsList.clear();\r\n                        eventsList.addAll(fetchedEvents);\r\n                        eventsRecyclerViewAdapter.notifyItemChanged(0, fetchedEvents.size());\r\n                    }\r\n                    fragmentCategoryBinding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(eventsList.size());\r\n\r\n                    int initialSize = eventsList.size();\r\n\r\n                    for (int i = 0; i < eventsList.size(); i++) {\r\n                        if (eventsList.get(i) == null) {\r\n                            eventsList.remove(eventsList.get(i));\r\n                        }\r\n                    }\r\n                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                            EVENTS_PAGE_SIZE_VALUE;\r\n                    for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                        eventsList.add(fetchedEvents.get(i));\r\n                    }\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, eventsList.size());\r\n                }\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(view, errorMessagesUtil.\r\n                                getErrorMessage(((Result.Error) result).getMessage()),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n                fragmentCategoryBinding.progressBar.setVisibility(View.GONE);\r\n            }\r\n        });\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                boolean isConnected = isConnected();\r\n\r\n                if (isConnected && totalItemCount != eventsAndPlacesViewModel.getTotalResults()) {\r\n\r\n                    totalItemCount = layoutManager.getItemCount();\r\n                    lastVisibleItem = layoutManager.findLastVisibleItemPosition();\r\n                    visibleItemCount = layoutManager.getChildCount();\r\n\r\n                    if (totalItemCount == visibleItemCount ||\r\n                            (totalItemCount <= (lastVisibleItem + threshold) &&\r\n                                    dy > 0 &&\r\n                                    !eventsAndPlacesViewModel.isLoading()\r\n                            ) &&\r\n                                    eventsAndPlacesViewModel.getCategoryEventsLiveData(category).getValue() != null &&\r\n                                    eventsAndPlacesViewModel.getCurrentResults() != eventsAndPlacesViewModel.getTotalResults()\r\n                    ) {\r\n                        MutableLiveData<Result> eventsListMutableLiveData = eventsAndPlacesViewModel.getCategoryEventsLiveData(category);\r\n\r\n                        if (eventsListMutableLiveData.getValue() != null &&\r\n                                eventsListMutableLiveData.getValue().isSuccess()) {\r\n\r\n                            eventsAndPlacesViewModel.setLoading(true);\r\n                            eventsList.add(null);\r\n                            eventsRecyclerViewAdapter.notifyItemRangeInserted(eventsList.size(),\r\n                                    eventsList.size() + 1);\r\n\r\n                            int page = eventsAndPlacesViewModel.getPage() + 1;\r\n                            eventsAndPlacesViewModel.setPage(page);\r\n                            eventsAndPlacesViewModel.getCategoryEventsLiveData(category);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        NavBackStackEntry navBackStackEntry = Navigation.\r\n                findNavController(view).getPreviousBackStackEntry();\r\n\r\n        if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.homeFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.homeFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.myEventsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.myEventsFragment).setChecked(true);\r\n        } else if (navBackStackEntry != null &&\r\n                navBackStackEntry.getDestination().getId() == R.id.mapsFragment) {\r\n            ((BottomNavigationView) requireActivity().findViewById(R.id.bottomNavigationView)).\r\n                    getMenu().findItem(R.id.mapsFragment).setChecked(true);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        eventsAndPlacesViewModel.setFirstLoading(true);\r\n        eventsAndPlacesViewModel.setLoading(false);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        fragmentCategoryBinding = null;\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/CategoryFragment.java	
@@ -147,6 +147,16 @@
                     public void onFavoriteButtonPressed(int position) {
                         //SETTA EVENTO COME PREFERITO
                     }
+
+                    @Override
+                    public void onModeEventButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onDeleteEventButtonPressed(Events events) {
+
+                    }
                 });
         recyclerView.setLayoutManager(layoutManager);
         recyclerView.setAdapter(eventsRecyclerViewAdapter);
Index: app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModel;\r\n\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\n\r\nimport java.util.List;\r\n\r\npublic class EventsAndPlacesViewModel extends ViewModel {\r\n\r\n    private static final String TAG = EventsAndPlacesViewModel.class.getSimpleName();\r\n\r\n    private final IRepositoryWithLiveData iRepositoryWithLiveData;\r\n    private int page;\r\n    private int currentResults;\r\n    private int totalResults;\r\n    private boolean isLoading;\r\n    private boolean firstLoading;\r\n    private MutableLiveData<Result> eventsListLiveData; //TUTTI GLI EVENTI\r\n    private MutableLiveData<Result> eventsFromSearchLiveData; //EVENTI PRESI DALLA SEARCH\r\n    private MutableLiveData<Result> favoriteEventsListLiveData; //EVENTI FAVORITI\r\n    private MutableLiveData<Result> categoryEventsLiveData; //EVENTI APPARTENENTI AD UNA CATEGORIA SPECIFICA\r\n    private MutableLiveData<Result> categoriesEventsLiveData; //EVENTI APPARTENENTI A PIU CATEGORIE\r\n    private MutableLiveData<Result> eventsInADateLiveData; //EVENTI CHE SI TENGONO IN UNA DATA SPECIFICA\r\n    private MutableLiveData<Result> eventsBetweenDatesLiveData; //EVENTI CHE SI TENGONO TRA DUE DATE\r\n    private MutableLiveData<Result> categoryEventsBetweenDatesLiveData; //EVENTI CHE SI TENGONO TRA DUE DATE CON CATEGORIE\r\n    private MutableLiveData<Result> placeEventsLiveData; //EVENTI CHE SI TENGONO IN UN LUOGO SPECIFICO\r\n    private MutableLiveData<Result> singleEventLiveData; //EVENTO SINGOLO\r\n    private MutableLiveData<List<String>> allCategoriesLiveData; //TUTTE LE CATEGORIE DI EVENTI\r\n    private MutableLiveData<List<String>> categoriesInADateLiveData; //TUTTE LE CATEGORIE DI EVENTI IN UNA DATA SPECIFICA\r\n\r\n\r\n    //PLACES\r\n    private MutableLiveData<List<Place>> placesListLiveData; //TUTTI I POSTI\r\n    private MutableLiveData<List<Place>> favoritePlacesListLiveData; //POSTI PREFERITI\r\n    private MutableLiveData<Place> singlePlaceLiveData; //POSTO SINGOLO\r\n    private MutableLiveData<List<Place>> placesFromSearchLiveData; //POSTI PRESI DALLA SEARCH\r\n\r\n    public EventsAndPlacesViewModel(IRepositoryWithLiveData iRepositoryWithLiveData) {\r\n        this.iRepositoryWithLiveData = iRepositoryWithLiveData;\r\n        this.page = 1;\r\n        this.totalResults = 0;\r\n        this.firstLoading = true;\r\n    }\r\n\r\n    public MutableLiveData<Result> getEvents(String country, String location, String date, String categories, String sort, int limit, long lastUpdate) {\r\n        if (eventsListLiveData == null) {\r\n            fetchEvents(country, location, date, categories, sort, limit, lastUpdate);\r\n        }\r\n        return eventsListLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<Place>> getPlaces() {\r\n        if (placesListLiveData == null) {\r\n            fetchPlaces();\r\n        }\r\n        return placesListLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getFavoriteEventsLiveData(boolean isFirstLoading) {\r\n        if (favoriteEventsListLiveData == null) {\r\n            getFavoriteEvents(isFirstLoading);\r\n        }\r\n        return favoriteEventsListLiveData;\r\n    }\r\n\r\n    /**\r\n     * It uses the Repository to get the list of favorite news\r\n     * and to associate it with the LiveData object.\r\n     */\r\n    private void getFavoriteEvents(boolean firstLoading) {\r\n        favoriteEventsListLiveData = iRepositoryWithLiveData.getFavoriteEvents(firstLoading);\r\n\r\n    }\r\n\r\n    public MutableLiveData<List<Place>> getFavoritePlacesLiveData(boolean isFirstLoading) {\r\n        if (favoritePlacesListLiveData == null) {\r\n            iRepositoryWithLiveData.getFavoritePlaces(isFirstLoading);\r\n        }\r\n        return favoritePlacesListLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getEventsFromSearchLiveData(String input) {\r\n        eventsFromSearchLiveData = iRepositoryWithLiveData.getEventsFromSearch(input);\r\n        return eventsFromSearchLiveData;\r\n    }\r\n\r\n    /**\r\n     * Updates the event status.\r\n     * @param event The news to be updated.\r\n     */\r\n    public void updateEvents(Events event) {\r\n        iRepositoryWithLiveData.updateEvents(event);\r\n    }\r\n\r\n\r\n    public MutableLiveData<Result> getCategoryEventsLiveData(String category) {\r\n        categoryEventsLiveData = iRepositoryWithLiveData.getCategoryEvents(category);\r\n        return categoryEventsLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getEventsInADateLiveData(String date) {\r\n        eventsInADateLiveData = iRepositoryWithLiveData.getEventsInADate(date);\r\n        return eventsInADateLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getEventsBetweenDatesLiveData(String firstDate, String endDate) {\r\n        eventsBetweenDatesLiveData = iRepositoryWithLiveData.getEventsBetweenDates(firstDate, endDate);\r\n        return eventsBetweenDatesLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getCategoryEventsBetweenDatesLiveData(String firstDate, String endDate, List<String> categories) {\r\n        categoryEventsBetweenDatesLiveData = iRepositoryWithLiveData.getCategoryEventsBetweenDates(firstDate, endDate, categories);\r\n        return categoryEventsBetweenDatesLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getCategoriesEventsLiveData(List<String> categories) {\r\n        categoriesEventsLiveData = iRepositoryWithLiveData.getCategoriesEvents(categories);\r\n        return categoriesEventsLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getPlaceEventsLiveData(String id) {\r\n        if (placeEventsLiveData == null) {\r\n            return iRepositoryWithLiveData.getPlaceEvents(id);\r\n        }\r\n        return placeEventsLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Result> getSingleEvent(long id) {\r\n        singleEventLiveData = iRepositoryWithLiveData.getSingleEvent(id);\r\n        return singleEventLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Place> getSinglePlace(String id) {\r\n        singlePlaceLiveData = iRepositoryWithLiveData.getSinglePlace(id);\r\n        return singlePlaceLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<Place>> getPlacesFromSearchLiveData(String input) {\r\n        placesFromSearchLiveData = iRepositoryWithLiveData.getPlacesFromSearch(input);\r\n        return placesFromSearchLiveData;\r\n    }\r\n\r\n    public MutableLiveData<Place> getSinglePlaceByName(String name) {\r\n        singlePlaceLiveData = iRepositoryWithLiveData.getSinglePlaceByName(name);\r\n        return singlePlaceLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<String>> getEventsDates(String name) {\r\n        return iRepositoryWithLiveData.getEventsDates(name);\r\n    }\r\n\r\n    public MutableLiveData<String[]> getMoviesHours(String name) {\r\n        return iRepositoryWithLiveData.getMoviesHours(name);\r\n    }\r\n\r\n    public void deleteEvents() {\r\n        iRepositoryWithLiveData.deleteEvents();\r\n    }\r\n\r\n    public int getCount() {\r\n        return iRepositoryWithLiveData.getCount();\r\n    }\r\n\r\n    public MutableLiveData<List<String>> getAllCategories() {\r\n        allCategoriesLiveData = iRepositoryWithLiveData.getAllCategories();\r\n        return allCategoriesLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<String>> getCategoriesInADate(String date) {\r\n        categoriesInADateLiveData = iRepositoryWithLiveData.getCategoriesInADate(date);\r\n        return categoriesInADateLiveData;\r\n    }\r\n\r\n\r\n    public void fetchEvents(String country, String location, String date, String categories, String sort, int limit) {\r\n        iRepositoryWithLiveData.fetchEvents(country, location, date, categories, sort, limit);\r\n    }\r\n\r\n    public void fetchEvents(String country, String location, String date, String categories, String sort, int limit, long lastUpdate) {\r\n        eventsListLiveData = iRepositoryWithLiveData.fetchEvents(country, location, date, categories, sort, limit, lastUpdate);\r\n    }\r\n\r\n    public void fetchPlaces() {\r\n        placesListLiveData = iRepositoryWithLiveData.fetchPlaces();\r\n    }\r\n\r\n    public void deletePlaces() {\r\n        iRepositoryWithLiveData.deletePlaces();\r\n    }\r\n\r\n    public int getPage() {\r\n        return page;\r\n    }\r\n\r\n    public void setPage(int page) {\r\n        this.page = page;\r\n    }\r\n\r\n    public int getTotalResults() {\r\n        return totalResults;\r\n    }\r\n\r\n    public void setTotalResults(int totalResults) {\r\n        this.totalResults = totalResults;\r\n    }\r\n\r\n    public int getCurrentResults() {\r\n        return currentResults;\r\n    }\r\n\r\n    public void setCurrentResults(int currentResults) {\r\n        this.currentResults = currentResults;\r\n    }\r\n\r\n    public boolean isLoading() {\r\n        return isLoading;\r\n    }\r\n\r\n    public void setLoading(boolean loading) {\r\n        isLoading = loading;\r\n    }\r\n\r\n    public boolean isFirstLoading() {\r\n        return firstLoading;\r\n    }\r\n\r\n    public void setFirstLoading(boolean firstLoading) {\r\n        this.firstLoading = firstLoading;\r\n    }\r\n\r\n    public MutableLiveData<Result> getEventsResponseLiveData() {\r\n        return eventsListLiveData;\r\n    }\r\n\r\n    public MutableLiveData<List<Place>> getPlacesResponseLiveData() {\r\n        return placesListLiveData;\r\n    }\r\n\r\n    public void removeFromFavorite(Events events) {\r\n        iRepositoryWithLiveData.updateEvents(events);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java b/app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/EventsAndPlacesViewModel.java	
@@ -47,6 +47,10 @@
         this.firstLoading = true;
     }
 
+    public void addEvent(Events events){
+        iRepositoryWithLiveData.addEvent(events);
+    }
+
     public MutableLiveData<Result> getEvents(String country, String location, String date, String categories, String sort, int limit, long lastUpdate) {
         if (eventsListLiveData == null) {
             fetchEvents(country, location, date, categories, sort, limit, lastUpdate);
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ui.main.MainActivity\">\r\n\r\n    <com.google.android.material.bottomnavigation.BottomNavigationView\r\n        android:id=\"@+id/bottomNavigationView\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        style=\"@style/Widget.MaterialComponents.BottomNavigationView.Colored\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:menu=\"@menu/bottom_menu\"/>\r\n\r\n    <androidx.fragment.app.FragmentContainerView\r\n        android:id=\"@+id/fragmentContainerView\"\r\n        android:name=\"androidx.navigation.fragment.NavHostFragment\"\r\n        android:layout_width=\"409dp\"\r\n        android:layout_height=\"673dp\"\r\n        app:defaultNavHost=\"true\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/bottomNavigationView\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:navGraph=\"@navigation/my_nav\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
--- a/app/src/main/res/layout/activity_main.xml	
+++ b/app/src/main/res/layout/activity_main.xml	
@@ -19,8 +19,8 @@
     <androidx.fragment.app.FragmentContainerView
         android:id="@+id/fragmentContainerView"
         android:name="androidx.navigation.fragment.NavHostFragment"
-        android:layout_width="409dp"
-        android:layout_height="673dp"
+        android:layout_width="409sp"
+        android:layout_height="673sp"
         app:defaultNavHost="true"
         app:layout_constraintBottom_toTopOf="@+id/bottomNavigationView"
         app:layout_constraintEnd_toEndOf="parent"
Index: app/src/main/res/layout/fragment_events_in_a_date.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ui.main.EventsInADateFragment\">\r\n\r\n    <com.google.android.material.textview.MaterialTextView\r\n        android:id=\"@+id/textViewDate\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"2sp\"\r\n        android:textSize=\"20sp\"\r\n        android:text=\"Date \"\r\n        android:textColor=\"@color/colorTextPrimary\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <com.google.android.material.textview.MaterialTextView\r\n        android:id=\"@+id/numberOfEvents0\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"30sp\"\r\n        android:text=\"@string/number_of_events\"\r\n        android:textColor=\"@color/colorTextPrimary\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <com.google.android.material.textview.MaterialTextView\r\n        android:id=\"@+id/numberOfEvents\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textColor=\"@color/colorTextPrimary\"\r\n        android:text=\"0\"\r\n        app:layout_constraintStart_toEndOf=\"@id/numberOfEvents0\"\r\n        app:layout_constraintTop_toTopOf=\"@id/numberOfEvents0\"/>\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/chipsLinearLayout\"\r\n        android:orientation=\"horizontal\"\r\n        android:layout_marginTop=\"80sp\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"/>\r\n\r\n    <com.google.android.material.button.MaterialButton\r\n        android:id=\"@+id/sortingButton\"\r\n        android:layout_width=\"55sp\"\r\n        android:layout_height=\"50sp\"\r\n        android:layout_marginTop=\"2sp\"\r\n        app:icon=\"@drawable/ic_baseline_sort_24\"\r\n        android:elevation=\"4sp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/recyclerview_events\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0sp\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/chipsLinearLayout\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\" />\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/progress_bar\"\r\n        style=\"?android:attr/progressBarStyle\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:visibility=\"gone\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_events_in_a_date.xml b/app/src/main/res/layout/fragment_events_in_a_date.xml
--- a/app/src/main/res/layout/fragment_events_in_a_date.xml	
+++ b/app/src/main/res/layout/fragment_events_in_a_date.xml	
@@ -12,7 +12,7 @@
         android:layout_height="wrap_content"
         android:layout_marginTop="2sp"
         android:textSize="20sp"
-        android:text="Date "
+        android:text="@string/date"
         android:textColor="@color/colorTextPrimary"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent" />
Index: app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.SHARED_PREFERENCES_FILE_NAME;\r\nimport static com.example.eventiapp.util.Constants.SHARED_PREFERENCES_LANGUAGE;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.WindowManager;\r\n\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.fragment.NavHostFragment;\r\nimport androidx.navigation.ui.NavigationUI;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.util.LanguageUtil;\r\nimport com.example.eventiapp.util.SharedPreferencesUtil;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\n\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n\r\n        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.fragmentContainerView);\r\n        assert navHostFragment != null;\r\n        NavController navController = navHostFragment.getNavController();\r\n        BottomNavigationView bottomNavigationView = findViewById(R.id.bottomNavigationView);\r\n        NavigationUI.setupWithNavController(bottomNavigationView, navController);\r\n\r\n        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java b/app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/MainActivity.java	
@@ -26,7 +26,9 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
 
-
+        SharedPreferencesUtil sharedPreferencesUtil=new SharedPreferencesUtil(getApplication());
+        String language = sharedPreferencesUtil.readStringData(SHARED_PREFERENCES_FILE_NAME, SHARED_PREFERENCES_LANGUAGE);
+        //LanguageUtil.setAppLanguage(this, language);
         NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.fragmentContainerView);
         assert navHostFragment != null;
         NavController navController = navHostFragment.getNavController();
Index: app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eventiapp.ui.main;\r\n\r\nimport static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.location.Geocoder;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.HorizontalScrollView;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.eventiapp.R;\r\nimport com.example.eventiapp.adapter.EventsRecyclerViewAdapter;\r\nimport com.example.eventiapp.model.Events;\r\nimport com.example.eventiapp.model.EventsResponse;\r\nimport com.example.eventiapp.model.Place;\r\nimport com.example.eventiapp.model.Result;\r\nimport com.example.eventiapp.repository.events.IRepositoryWithLiveData;\r\nimport com.example.eventiapp.source.google.PlaceDetailsSource;\r\nimport com.example.eventiapp.util.ErrorMessageUtil;\r\nimport com.example.eventiapp.util.ServiceLocator;\r\nimport com.example.eventiapp.util.ShareUtils;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.UiSettings;\r\nimport com.google.android.gms.maps.model.CameraPosition;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.libraries.places.api.model.PhotoMetadata;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\npublic class MapsFragment extends Fragment {\r\n\r\n    private static final String TAG = MapsFragment.class.getSimpleName();\r\n\r\n    private EventsAndPlacesViewModel eventsAndPlacesViewModel;\r\n    private List<com.example.eventiapp.model.Place> placesList;\r\n    private List<Events> placeEventsList;\r\n    private Marker marker;\r\n    private UiSettings mUiSettings;\r\n    GoogleMap myGoogleMap;\r\n    private Geocoder geoCoder;\r\n    private BottomSheetBehavior mBottomSheetBehavior1;\r\n    View bottomSheet;\r\n    LinearLayout tapactionlayout;\r\n    LayoutInflater inflater;\r\n    private ImageView carImageView;\r\n    private ImageView mapsImageView;\r\n    private ImageView callImageView;\r\n    private ImageView favoriteImageView;\r\n    private LinearLayout galleryPhotos;\r\n    private HorizontalScrollView scrollViewImagesPlace;\r\n    private TextView placeTextView;\r\n    private TextView addressTextView;\r\n    private TextView numberOfEvents;\r\n\r\n    private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;\r\n    private RecyclerView recyclerView;\r\n    private LinearLayoutManager layoutManager;\r\n    private ProgressBar progressBar;\r\n    private int totalItemCount; // Total number of events\r\n    private int lastVisibleItem; // The position of the last visible event item\r\n    private int visibleItemCount; // Number or total visible event items\r\n    // Based on this value, the process of loading more events is anticipated or postponed\r\n    private final int threshold = 1;\r\n\r\n    private final OnMapReadyCallback callback = new OnMapReadyCallback() {\r\n\r\n        /**\r\n         * Manipulates the map once available.\r\n         * This callback is triggered when the map is ready to be used.\r\n         * This is where we can add markers or lines, add listeners or move the camera.\r\n         * In this case, we just add a marker near Sydney, Australia.\r\n         * If Google Play services is not installed on the device, the user will be prompted to\r\n         * install it inside the SupportMapFragment. This method will only be triggered once the\r\n         * user has installed Google Play services and returned to the app.\r\n         */\r\n        @Override\r\n        public void onMapReady(GoogleMap googleMap) {\r\n            myGoogleMap = googleMap;\r\n            mUiSettings = myGoogleMap.getUiSettings();\r\n            mUiSettings.setZoomControlsEnabled(true);\r\n            mUiSettings.setMapToolbarEnabled(true);\r\n\r\n\r\n            LatLng bicocca = new LatLng(45.51851, 9.2075123);\r\n           /*\r\n            myGoogleMap.addMarker(new MarkerOptions().position(bicocca).title(\"Marker in Bicocca\"));\r\n            myGoogleMap.moveCamera(CameraUpdateFactory.newLatLng(bicocca));\r\n            */\r\n\r\n            float zoomLevel = 13.0f; //This goes up to 21\r\n            myGoogleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(bicocca, zoomLevel));\r\n\r\n            int count = 0;\r\n\r\n            myGoogleMap.setInfoWindowAdapter(new GoogleMap.InfoWindowAdapter() {\r\n                @Nullable\r\n                @Override\r\n                public View getInfoContents(@NonNull Marker marker) {\r\n                    View v = getLayoutInflater().inflate(R.layout.info_window_maps, null);\r\n                    TextView textViewName = v.findViewById(R.id.place_name);\r\n                    TextView textViewAddress = v.findViewById(R.id.place_address);\r\n                    String[] parts = Objects.requireNonNull(marker.getTitle()).split(\":\");\r\n                    String namePlace = parts[0];\r\n                    textViewName.setText(namePlace);\r\n                    textViewAddress.setText(marker.getSnippet());\r\n                    return v;\r\n                }\r\n\r\n                @Nullable\r\n                @Override\r\n                public View getInfoWindow(@NonNull Marker marker) {\r\n                    return null;\r\n                }\r\n            });\r\n\r\n            geoCoder = new Geocoder(getContext(), Locale.getDefault());\r\n            setMarkers();\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        IRepositoryWithLiveData eventsRepositoryWithLiveData =\r\n                ServiceLocator.getInstance().getRepository(\r\n                        requireActivity().getApplication()\r\n                );\r\n\r\n        if (eventsRepositoryWithLiveData != null) {\r\n            eventsAndPlacesViewModel = new ViewModelProvider(\r\n                    requireActivity(),\r\n                    new EventsAndPlacesViewModelFactory(eventsRepositoryWithLiveData)).get(EventsAndPlacesViewModel.class);\r\n        } else {\r\n            Snackbar.make(requireActivity().findViewById(android.R.id.content),\r\n                    R.string.unexpected_error, Snackbar.LENGTH_SHORT).show();\r\n        }\r\n        placesList = new ArrayList<com.example.eventiapp.model.Place>();\r\n        placeEventsList = new ArrayList<>(); //EVENTI DI UN SINGOLO LUOGO\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.fragment_maps, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        inflater = LayoutInflater.from(getContext());\r\n        SupportMapFragment mapFragment =\r\n                (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);\r\n        if (mapFragment != null) {\r\n            mapFragment.getMapAsync(callback);\r\n        }\r\n\r\n        layoutManager =\r\n                new LinearLayoutManager(requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL, false);\r\n\r\n        eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(placeEventsList,\r\n                requireActivity().getApplication(), 0,\r\n                new EventsRecyclerViewAdapter.OnItemClickListener() {\r\n                    @Override\r\n                    public void onEventsItemClick(Events events) {\r\n                        //VAI AI DETTAGLI DELL'EVENTO\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putParcelable(\"event\", events);\r\n                        Navigation.findNavController(requireView()\r\n                        ).navigate(R.id.action_mapsFragment_to_eventFragment, bundle);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onExportButtonPressed(Events events) {\r\n                        ShareUtils.addToCalendar(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onShareButtonPressed(Events events) {\r\n                        ShareUtils.shareEvent(requireContext(), events);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFavoriteButtonPressed(int position) {\r\n                        //SETTA EVENTO COME PREFERITO\r\n                    }\r\n                });\r\n        progressBar = view.findViewById(R.id.progress_bar);\r\n        recyclerView = view.findViewById(R.id.recyclerview_events);\r\n\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(eventsRecyclerViewAdapter);\r\n\r\n\r\n        eventsAndPlacesViewModel.getPlaces().observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result != null) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n                List<com.example.eventiapp.model.Place> fetchedPlaces = new ArrayList<>(result);\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    if (eventsAndPlacesViewModel.isFirstLoading()) {\r\n                        eventsAndPlacesViewModel.setTotalResults(fetchedPlaces.size());\r\n                        eventsAndPlacesViewModel.setFirstLoading(false);\r\n                        this.placesList.addAll(fetchedPlaces);\r\n                    } else {\r\n                        // Updates related to the favorite status of the places\r\n                        placesList.clear();\r\n                        placesList.addAll(fetchedPlaces);\r\n                    }\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(placesList.size());\r\n                    for (int i = 0; i < placesList.size(); i++) {\r\n                        if (placesList.get(i) == null) {\r\n                            placesList.remove(placesList.get(i));\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(view, errorMessagesUtil.\r\n                                getErrorMessage(\"ERRORE\"),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n        //BOTTOM SHEETS\r\n\r\n        bottomSheet = view.findViewById(R.id.bottom_sheet1);\r\n        tapactionlayout = view.findViewById(R.id.tap_action_layout);\r\n        mBottomSheetBehavior1 = BottomSheetBehavior.from(bottomSheet);\r\n        mBottomSheetBehavior1.setPeekHeight(120);\r\n        mBottomSheetBehavior1.setState(BottomSheetBehavior.STATE_COLLAPSED);\r\n\r\n        scrollViewImagesPlace = view.findViewById(R.id.scrollViewImagesPlace);\r\n        galleryPhotos = view.findViewById(R.id.galleryPhotos);\r\n        carImageView = view.findViewById(R.id.carImageView);\r\n        mapsImageView = view.findViewById(R.id.mapsImageView);\r\n        callImageView = view.findViewById(R.id.callImageView);\r\n        favoriteImageView = view.findViewById(R.id.favoriteImageView);\r\n        placeTextView = view.findViewById(R.id.placeTextView);\r\n        addressTextView = view.findViewById(R.id.addressTextView);\r\n        numberOfEvents = view.findViewById(R.id.number_events_textView);\r\n\r\n        mBottomSheetBehavior1.setBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {\r\n            @Override\r\n            public void onStateChanged(@NonNull View bottomSheet, int newState) {\r\n                if (newState == BottomSheetBehavior.STATE_COLLAPSED) {\r\n                    tapactionlayout.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                if (newState == BottomSheetBehavior.STATE_EXPANDED) {\r\n                    tapactionlayout.setVisibility(View.GONE);\r\n                }\r\n\r\n                if (newState == BottomSheetBehavior.STATE_DRAGGING) {\r\n                    tapactionlayout.setVisibility(View.GONE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onSlide(@NonNull View bottomSheet, float slideOffset) {\r\n\r\n            }\r\n        });\r\n\r\n        tapactionlayout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (mBottomSheetBehavior1.getState() == BottomSheetBehavior.STATE_COLLAPSED) {\r\n                    mBottomSheetBehavior1.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void getEventsOfPlace(String id) {\r\n        //EVENTI PRESENTI NEL LUOGO\r\n\r\n        eventsAndPlacesViewModel.getPlaceEventsLiveData(id).observe(getViewLifecycleOwner(), result -> {\r\n\r\n            if (result.isSuccess()) {\r\n                Log.i(\"SUCCESSO\", \"SUCCESSO\");\r\n\r\n                EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();\r\n                List<Events> fetchedEvents = eventsResponse.getEventsList();\r\n\r\n                if (!eventsAndPlacesViewModel.isLoading()) {\r\n                    eventsRecyclerViewAdapter.notifyItemRangeRemoved(0, this.placeEventsList.size());\r\n                    this.placeEventsList.clear();\r\n                    this.placeEventsList.addAll(fetchedEvents);\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(0,\r\n                            this.placeEventsList.size());\r\n                    progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    eventsAndPlacesViewModel.setLoading(false);\r\n                    eventsAndPlacesViewModel.setCurrentResults(placeEventsList.size());\r\n\r\n                    int initialSize = placeEventsList.size();\r\n\r\n                    for (int i = 0; i < placeEventsList.size(); i++) {\r\n                        if (placeEventsList.get(i) == null) {\r\n                            placeEventsList.remove(placeEventsList.get(i));\r\n                        }\r\n                    }\r\n                    int startIndex = (eventsAndPlacesViewModel.getPage() * EVENTS_PAGE_SIZE_VALUE) -\r\n                            EVENTS_PAGE_SIZE_VALUE;\r\n                    for (int i = startIndex; i < fetchedEvents.size(); i++) {\r\n                        placeEventsList.add(fetchedEvents.get(i));\r\n                    }\r\n                    eventsRecyclerViewAdapter.notifyItemRangeInserted(initialSize, placeEventsList.size());\r\n                }\r\n                numberOfEvents.setText(String.valueOf(placeEventsList.size()));\r\n            } else {\r\n                Log.i(\"FALLITO\", \"FALLITO\");\r\n\r\n                ErrorMessageUtil errorMessagesUtil =\r\n                        new ErrorMessageUtil(requireActivity().getApplication());\r\n                Snackbar.make(requireView(), errorMessagesUtil.\r\n                                getErrorMessage(((Result.Error) result).getMessage()),\r\n                        Snackbar.LENGTH_SHORT).show();\r\n                progressBar.setVisibility(View.GONE);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private boolean isConnected() {\r\n        ConnectivityManager cm =\r\n                (ConnectivityManager) requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (myGoogleMap != null) { //prevent crashing if the map doesn't exist yet (eg. on starting activity)\r\n            myGoogleMap.clear();\r\n\r\n            // add markers from database to the map\r\n            setMarkers();\r\n        }\r\n    }\r\n\r\n    private void setMarkers() {\r\n        for (com.example.eventiapp.model.Place p : placesList) {\r\n            marker = myGoogleMap.addMarker(new MarkerOptions().\r\n                    position(new LatLng(p.getCoordinates()[0], p.getCoordinates()[1])).\r\n                    title(p.getName() + \":\" + p.getId()).\r\n                    snippet(p.getAddress()));\r\n            myGoogleMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\r\n                @Override\r\n                public boolean onMarkerClick(@NonNull Marker marker) {\r\n                    tapactionlayout.setVisibility(View.VISIBLE);\r\n                    LatLng position = marker.getPosition();\r\n                    CameraPosition cameraPosition = new CameraPosition.Builder().target(position).zoom(20).build();\r\n                    myGoogleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));\r\n                    marker.showInfoWindow();\r\n\r\n                    String[] parts = Objects.requireNonNull(marker.getTitle()).split(\":\");\r\n                    String idPlace = parts[1];\r\n                    getEventsOfPlace(idPlace);\r\n\r\n\r\n                    //SETTA FOTO LUOGO\r\n\r\n                    eventsAndPlacesViewModel.getSinglePlace(idPlace).observe(getViewLifecycleOwner(), result -> {\r\n                        if (result != null) {\r\n                            List<PhotoMetadata> images = result.getImages();\r\n                            List<Bitmap> downloadedImages = new ArrayList<>();\r\n                            AtomicInteger counter = new AtomicInteger(0);\r\n\r\n                            PlaceDetailsSource.fetchPlacePhotos(images, false, new PlaceDetailsSource.PlacePhotosListener() {\r\n                                @Override\r\n                                public void onPlacePhotosListener(Bitmap bitmap) {\r\n                                    scrollViewImagesPlace.setVisibility(View.VISIBLE);\r\n                                    if (bitmap != null) {\r\n                                        downloadedImages.add(bitmap);\r\n                                        int count = counter.incrementAndGet();\r\n                                        if (count == images.size()) {\r\n                                            galleryPhotos.removeAllViews();\r\n                                            for (Bitmap downloadedImage : downloadedImages) {\r\n                                                View viewPlacePhoto = inflater.inflate(R.layout.item_place_photo_maps, galleryPhotos, false);\r\n                                                ImageView imagePlace = viewPlacePhoto.findViewById(R.id.imagePlace);\r\n                                                imagePlace.setImageBitmap(downloadedImage);\r\n                                                galleryPhotos.addView(viewPlacePhoto);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onError(String message) {\r\n                                    Log.i(\"ERROR\", message);\r\n                                }\r\n                            });\r\n\r\n                            placeTextView.setVisibility(View.VISIBLE);\r\n                            placeTextView.setText(result.getName());\r\n                            addressTextView.setText(result.getAddress());\r\n\r\n                            carImageView.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    //NAVIGAZIONE\r\n                                    String uri = String.format(Locale.ENGLISH, \"google.navigation:q=%f,%f\", position.latitude, position.longitude);\r\n                                    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\r\n                                    startActivity(intent);\r\n                                }\r\n                            });\r\n\r\n                            mapsImageView.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    //APRI SU GOOGLE MAPS\r\n                                    String uri = String.format(Locale.ENGLISH, \"geo:%f,%f\", position.latitude, position.longitude);\r\n                                    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\r\n                                    startActivity(intent);\r\n                                }\r\n                            });\r\n\r\n                            Place finalP = result;\r\n                            callImageView.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    //CHIAMA POSTO\r\n\r\n                                    String number = finalP.getPhoneNumber();\r\n                                    if (number != null) {\r\n                                        Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse(\"tel:\" + number));\r\n                                        startActivity(intent);\r\n                                    } else {\r\n                                        Toast.makeText(requireContext(), \"NUMERO NON TROVATO\", Toast.LENGTH_LONG).show();\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n\r\n                            favoriteImageView.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    //AGGIUNGI POSTO AI FAVORITI DELL' UTENTE\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java b/app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java
--- a/app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java	
+++ b/app/src/main/java/com/example/eventiapp/ui/main/MapsFragment.java	
@@ -2,6 +2,7 @@
 
 import static com.example.eventiapp.util.Constants.EVENTS_PAGE_SIZE_VALUE;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
@@ -66,10 +67,7 @@
     private EventsAndPlacesViewModel eventsAndPlacesViewModel;
     private List<com.example.eventiapp.model.Place> placesList;
     private List<Events> placeEventsList;
-    private Marker marker;
-    private UiSettings mUiSettings;
     GoogleMap myGoogleMap;
-    private Geocoder geoCoder;
     private BottomSheetBehavior mBottomSheetBehavior1;
     View bottomSheet;
     LinearLayout tapactionlayout;
@@ -85,8 +83,6 @@
     private TextView numberOfEvents;
 
     private EventsRecyclerViewAdapter eventsRecyclerViewAdapter;
-    private RecyclerView recyclerView;
-    private LinearLayoutManager layoutManager;
     private ProgressBar progressBar;
     private int totalItemCount; // Total number of events
     private int lastVisibleItem; // The position of the last visible event item
@@ -96,19 +92,10 @@
 
     private final OnMapReadyCallback callback = new OnMapReadyCallback() {
 
-        /**
-         * Manipulates the map once available.
-         * This callback is triggered when the map is ready to be used.
-         * This is where we can add markers or lines, add listeners or move the camera.
-         * In this case, we just add a marker near Sydney, Australia.
-         * If Google Play services is not installed on the device, the user will be prompted to
-         * install it inside the SupportMapFragment. This method will only be triggered once the
-         * user has installed Google Play services and returned to the app.
-         */
         @Override
-        public void onMapReady(GoogleMap googleMap) {
+        public void onMapReady(@NonNull GoogleMap googleMap) {
             myGoogleMap = googleMap;
-            mUiSettings = myGoogleMap.getUiSettings();
+            UiSettings mUiSettings = myGoogleMap.getUiSettings();
             mUiSettings.setZoomControlsEnabled(true);
             mUiSettings.setMapToolbarEnabled(true);
 
@@ -125,10 +112,10 @@
             int count = 0;
 
             myGoogleMap.setInfoWindowAdapter(new GoogleMap.InfoWindowAdapter() {
-                @Nullable
+                @NonNull
                 @Override
                 public View getInfoContents(@NonNull Marker marker) {
-                    View v = getLayoutInflater().inflate(R.layout.info_window_maps, null);
+                    @SuppressLint("InflateParams") View v = getLayoutInflater().inflate(R.layout.info_window_maps, null);
                     TextView textViewName = v.findViewById(R.id.place_name);
                     TextView textViewAddress = v.findViewById(R.id.place_address);
                     String[] parts = Objects.requireNonNull(marker.getTitle()).split(":");
@@ -145,7 +132,7 @@
                 }
             });
 
-            geoCoder = new Geocoder(getContext(), Locale.getDefault());
+            Geocoder geoCoder = new Geocoder(getContext(), Locale.getDefault());
             setMarkers();
         }
     };
@@ -188,9 +175,8 @@
             mapFragment.getMapAsync(callback);
         }
 
-        layoutManager =
-                new LinearLayoutManager(requireContext(),
-                        LinearLayoutManager.HORIZONTAL, false);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(requireContext(),
+                LinearLayoutManager.HORIZONTAL, false);
 
         eventsRecyclerViewAdapter = new EventsRecyclerViewAdapter(placeEventsList,
                 requireActivity().getApplication(), 0,
@@ -218,9 +204,19 @@
                     public void onFavoriteButtonPressed(int position) {
                         //SETTA EVENTO COME PREFERITO
                     }
+
+                    @Override
+                    public void onModeEventButtonPressed(Events events) {
+
+                    }
+
+                    @Override
+                    public void onDeleteEventButtonPressed(Events events) {
+
+                    }
                 });
         progressBar = view.findViewById(R.id.progress_bar);
-        recyclerView = view.findViewById(R.id.recyclerview_events);
+        RecyclerView recyclerView = view.findViewById(R.id.recyclerview_events);
 
         recyclerView.setLayoutManager(layoutManager);
         recyclerView.setAdapter(eventsRecyclerViewAdapter);
@@ -321,8 +317,6 @@
         eventsAndPlacesViewModel.getPlaceEventsLiveData(id).observe(getViewLifecycleOwner(), result -> {
 
             if (result.isSuccess()) {
-                Log.i("SUCCESSO", "SUCCESSO");
-
                 EventsResponse eventsResponse = ((Result.EventsResponseSuccess) result).getData();
                 List<Events> fetchedEvents = eventsResponse.getEventsList();
 
@@ -353,8 +347,6 @@
                 }
                 numberOfEvents.setText(String.valueOf(placeEventsList.size()));
             } else {
-                Log.i("FALLITO", "FALLITO");
-
                 ErrorMessageUtil errorMessagesUtil =
                         new ErrorMessageUtil(requireActivity().getApplication());
                 Snackbar.make(requireView(), errorMessagesUtil.
@@ -388,8 +380,15 @@
 
     private void setMarkers() {
         for (com.example.eventiapp.model.Place p : placesList) {
-            marker = myGoogleMap.addMarker(new MarkerOptions().
-                    position(new LatLng(p.getCoordinates()[0], p.getCoordinates()[1])).
+            double[] location = p.getCoordinates();
+            LatLng latLng;
+            if (location[0] > location[1]) {
+                latLng = new LatLng(location[0], location[1]);
+            } else {
+                latLng = new LatLng(location[1], location[0]);
+            }
+            myGoogleMap.addMarker(new MarkerOptions().
+                    position(latLng).
                     title(p.getName() + ":" + p.getId()).
                     snippet(p.getAddress()));
             myGoogleMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {
